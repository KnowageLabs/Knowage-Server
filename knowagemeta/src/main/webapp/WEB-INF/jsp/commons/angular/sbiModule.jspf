

<script>
var sbiM=angular.module('sbiModule',["ngSanitize"]);

// sbiM.config(function($mdThemingProvider) {
// 	$mdThemingProvider.theme('default').primaryPalette('grey').accentPalette('blue-grey');
// });

sbiM.factory('sbiModule_config',function(){
	var conf= {
		contextName: '/<%= request.getContextPath().startsWith("/")||request.getContextPath().startsWith("\\")?request.getContextPath().substring(1): request.getContextPath()%>',    
		externalBasePath: '<%= KnowageSystemConfiguration.getKnowageContext() %>',
 		clientServerDateFormat: '<%= GeneralUtilities.getServerDateFormatExtJs() %>',  // the date format to be used when communicating with server
		clientServerTimestampFormat: '<%= GeneralUtilities.getServerTimestampFormatExtJs() %>',   // the timestamp format to be used when communicating with server
		serverDateFormat: '<%= GeneralUtilities.getServerDateFormat() %>',
		productTypes:[],
		profileAttributes:[],
		avaiableRoles:[],
		dynamicResourcesBasePath: '<%= dynamicResourcesBasePath %>',    
	};
	<% for(String pr : productTypes) { 	%>
	conf.productTypes.push('<%=pr%>');
	<% } %>
	
	<% for(String pr : profileAttributes) { 	%>
	conf.profileAttributes.push('<%=pr%>');
	<% } %>
	
	<% for(String ar : avaiableRoles) { 	%>
	conf.avaiableRoles.push('<%=ar%>');
	<% } %>
	
	return conf;
});

// sbiM.config(function($mdDateLocaleProvider) {
<%-- 	this.localizedDateFormat= '<%= GeneralUtilities.getLocaleDateFormatForExtJs(permanentSession) %>';  // the date format localized according to user language and country  --%>
	
// 	$mdDateLocaleProvider.parseDate = function(date) {
// 		 if (typeof date == "string" && date.length > 0){
// 			 var formats = localizedDateFormat.split('/');
// 			 var reString='';
// 			 //create regex based on localizedDateFormat
// 			 for (var i =0; i<formats.length;i++){
// 				if (formats[i].toUpperCase().indexOf('D')>=0 || formats[i].toUpperCase().indexOf('M')>=0){
// 					reString+="(\\d{1,2})\/";
// 				}else if (formats[i].toUpperCase().indexOf('Y')>=0){
// 					reString+="(\\d{2}|\\d{4})\/";
// 				}
// 			 }
// 			 var re = new RegExp('^'+reString.substring(0,reString.length-1)+'$');
// 			 var result = re.exec(date);
// 			 var dateCorrect = false;
// 			 if (result && result.length == 4){
// 				 var day,mm,yy;
// 				 for (var i =0; i<formats.length;i++){
// 					if (formats[i].toUpperCase().indexOf('D')>=0){
// 						day=result[i+1];
// 					}else if (formats[i].toUpperCase().indexOf('M')>=0){
// 						mm=result[i+1];
// 					}else if (formats[i].toUpperCase().indexOf('Y')>=0){
// 						yy=result[i+1];
// 					}
// 				 }
// 				 if (mm>=1 && mm<=12 && day>=1 && day <= 31){
// 					 if ( (mm == 11 || mm == 4 || mm == 6 || mm == 9) && day<=30){
// 						 dateCorrect = true;	
// 					 }else if ( mm == 2 && ( ((yy % 4) == 0 && day<=29) || ((yy % 4) != 0 && day<=28))){
// 						 dateCorrect = true;
// 					 }else if (mm == 1 || mm == 3 || mm == 5  || mm == 7 || mm == 8 || mm == 10 || mm == 12){
// 						 dateCorrect = true;
// 					 }
// 				 }
// 			 }
// 			 return dateCorrect == true ? new Date(yy,mm-1,day) : null;
// 		 }else{
// 		    return date;
// 		 }
// 	};
	
// 	$mdDateLocaleProvider.formatDate = function(date){
// 		if (!date){
// 			return null;
// 		}
		
// 		if(!angular.isDate(date)){
// 			try{
// 				date=new Date(date);
// 			}catch(e){
// 				return null;
// 			}
// 		}
		
// 		var formats = localizedDateFormat.split('/');
// 		var dateResult='';
// 		for (var time in formats){
// 			var partOfDate='';
// 			if (formats[time].toUpperCase().indexOf('D')>=0){
// 				partOfDate+=date.getDate();
// 			}else if (formats[time].toUpperCase().indexOf('M')>=0){
// 				partOfDate+=(date.getMonth()+1);
// 			}else if (formats[time].toUpperCase().indexOf('Y')>=0){
// 				partOfDate+=date.getFullYear();
// 			}
// 			if (partOfDate.length == 1 && formats[time].length == 2){
// 				partOfDate = '0'+partOfDate;
// 			}else if (partOfDate.length==4 && formats[time].length == 2){
// 				partOfDate=partOfDate.substring(2);
// 			}
// 			dateResult+=partOfDate+'/';
// 		}
// 		return dateResult.substring(0, dateResult.length - 1);
// 	};
// });


sbiM.factory('sbiModule_user',function(){
	
	var user={};
<%-- 	user.userUniqueIdentifier = '<%= StringEscapeUtils.escapeJavaScript(userUniqueIdentifier) %>'; --%>
<%-- 	user.userId = '<%= StringEscapeUtils.escapeJavaScript(userId) %>'; --%>
<%-- 	user.userName = '<%= StringEscapeUtils.escapeJavaScript(userName) %>';  --%>
<%-- 	user.ismodeweb = <%= sbiMode.equals("WEB")? "true" : "false"%>; --%>
	user.isSuperAdmin = '<%= userProfile != null && ((UserProfile)userProfile).getIsSuperadmin() %>';
	user.isTechnicalUser = '<%= userProfile != null && UserUtilities.isTechnicalUser((UserProfile)userProfile)%>'
	// 	set roles
// 	user.roles =[];
<%-- 	<% for(Object rol : userRoles) { 	%> --%>
<%-- 	user.roles.push('<%=StringEscapeUtils.escapeJavaScript(rol.toString())%>'); --%>
<%-- 	<% } %> --%>
	
// 	//set functionalities
 	user.functionalities =[];
 	<% if (userProfile != null && userProfile.getFunctionalities() != null && !userProfile.getFunctionalities().isEmpty()) { 
 		for(Object fun :  userProfile.getFunctionalities()){ %> 
 		user.functionalities.push('<%=StringEscapeUtils.escapeJavaScript(fun.toString())%>'); 
 		<% } }%> 
		
	return user;
});

sbiM.directive('loading',   ['$http' ,function ($http)
                             {
                                 return {
                                     restrict: 'A',
                                     
                                     link: function (scope, elm, attrs)
                                     {
                                         scope.isLoading = function () {
                                             return $http.pendingRequests.length > 0;
                                         };

                                         scope.$watch(scope.isLoading, function (v)
                                         {
                                             if(v){
                                            	 elm.css("display","block")
                                             }else{
                                            	 elm.css("display","none")
                                             }
                                         });
                                     }
                                 };

                             }]);

sbiM.directive('restLoading',   ['$http' ,function ($http)
	{
	    return {
	        template:"<div loading layout-fill style='position:fixed;z-index: 500;background:rgba(0,0,0, 0.3);'>"+
	    	"<md-progress-circular  md-mode='indeterminate' style='top:50%;left:50%' ></md-progress-circular></div>",
	        link: function (scope, elm, attrs)
	        {
	            scope.$watch(function () {
	                return $http.pendingRequests.length > 0;
	            }, function (v)
	            {
	                if(v){
	               	 elm.css("display","block");
	                }else{
	               	 elm.css("display","none");
	                }
	            });
	        }
	    };
	}]);

sbiM.service('sbiModule_logger',function(){
	this.exec=true;
	this.log = function(val1,val2,val3){
		if(this.exec){
		console.log("[LOG] ",val1,(val2 || ""),(val3|| ""));
		}
	};
	
	this.trace = function(val1,val2,val3){
		if(this.exec){
		console.log("[TRACE] ",val1,(val2 || ""),(val3|| ""));
		}
	};
	
});

sbiM.service('sbiModule_messaging',function(toastr){
	this.showErrorMessage = function(msg,title){
		
		toastr.error(msg,title, {
			  closeButton: true
		});
	};
	this.showWarningMessage = function(msg,title){
		
		toastr.warning(msg,title, {
			  closeButton: true
		});
	};
	this.showInfoMessage = function(msg,title){
		
		toastr.info(msg,title, {
			  closeButton: true
		});
	};
	this.showSuccessMessage = function(msg,title){
		
		toastr.success(msg,title, {
			  closeButton: true
			});
	};
	
});

sbiM.service('sbiModule_translate', function() {
	this.addMessageFile = function(file){
		messageResource.load([file,"messages"], function(){});
	};
	
	this.load = function(key,sourceFile) {
		var sf= sourceFile == undefined? 'messages' : sourceFile;
		return messageResource.get(key, sf);
	};
	
	this.format = function() {
	    // The string containing the format items (e.g. "{0}")
	    // will and always has to be the first argument.
	    var theString = arguments[0];
	    
	    // start with the second argument (i = 1)
	    for (var i = 1; i < arguments.length; i++) {
	        // "gm" = RegEx options for Global search (more than one instance)
	        // and for Multiline search
	        var regEx = new RegExp("\\{" + (i - 1) + "\\}", "gm");
	        theString = theString.replace(regEx, arguments[i]);
	    }
	    
	    return theString;
	}
	
});

sbiM.service('sbiModule_restServices', function($http, $q, sbiModule_translate, sbiModule_config,sbiModule_logger,$mdDialog) {
	
	var alteredContextPath=null;

	this.alterContextPath=function(cpat){
		alteredContextPath=cpat;
	}

	function getBaseUrl(endP_path) {
		var burl= alteredContextPath==null? sbiModule_config.contextName +'/restful-services/'+ endP_path+"/"  : alteredContextPath+ "/restful-services/" + endP_path+"/" 
		alteredContextPath=null;
		return burl ;
	};

	this.get = function(endP_path, req_Path, item, conf) {
		(item == undefined || item==null) ? 
				item = "" : 
					item = "?" + encodeURIComponent(item)
							.replace(/'/g,"%27")
							.replace(/"/g,"%22")
							.replace(/%3D/g,"=")
							.replace(/%26/g,"&");
		sbiModule_logger.trace("GET: " +endP_path+"/"+ req_Path + "" + item, conf);
		return $http.get(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf);
	};

	this.remove = function(endP_path, req_Path, item, conf) {
		item == undefined ? item = "" : item = "?" + item;
		sbiModule_logger.trace("REMOVE: "+endP_path+"/"+req_Path + "" + item,conf);
		return $http.post(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf);
	};

	this.post = function(endP_path, req_Path, item, conf) {
		sbiModule_logger.trace("POST: "+endP_path+"/"+ req_Path,item,conf);
		return $http.post(getBaseUrl(endP_path) + "" + req_Path, item, conf);
	};
	
	this.put = function(endP_path, req_Path, item, conf) {
		sbiModule_logger.trace("PUT: "+endP_path+"/"+req_Path,item,conf);
		return $http.put(getBaseUrl(endP_path) + "" + req_Path, item, conf);
	};
	
	this.delete = function(endP_path, req_Path, item, conf) {
		(item == undefined || item==null) ? item = "" : item = "?" + encodeURIComponent(item).replace(/'/g,"%27").replace(/"/g,"%22").replace(/%3D/g,"=").replace(/%26/g,"&");
		sbiModule_logger.trace("PUT:" +endP_path+"/"+req_Path+ "" + item,conf);
		return $http.delete(getBaseUrl(endP_path) + "" + req_Path, conf);
	};


	
	/*
	NEW METHODS
	*/
	
	var genericErrorHandling = function(data, status, headers, config, deferred) {
  		deferred.reject(data, status, headers, config);
	};
	
	var handleResponse = function(data, status, headers, config, deferred) {
		if(data.data != null){
			if ( data.data.hasOwnProperty("errors")) {
				
				genericErrorHandling(data, status, headers, config, deferred);
			} else {
				deferred.resolve(data, status, headers, config);
			}	
		}else{
			if ( data.status == 201) {
				deferred.resolve(data, status, headers, config);
				
			} else {
				genericErrorHandling(data, status, headers, config, deferred);
			}	
			
		}
		
	};

	// SAMPLE METHOD, this will be the implementation
	this.promiseGet = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		// Required for passing JSON on a GET request
		if (item == undefined || item==null) {
			item = "";
		}else {
			item = "?" + 
				encodeURIComponent(item)
				.replace(/'/g,"%27")
				.replace(/"/g,"%22")
				.replace(/%3D/g,"=")
				.replace(/%26/g,"&");
		}
		
		sbiModule_logger.trace("GET: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.get(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promisePost = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("POST: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.post(getBaseUrl(endP_path) + "" + req_Path , item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promisePut = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("PUT: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.put(getBaseUrl(endP_path) + "" + req_Path , item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promiseDelete = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("DELETE: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');
		(item == undefined || item==null) ? item = "" : item = "?" + encodeURIComponent(item).replace(/'/g,"%27").replace(/"/g,"%22").replace(/%3D/g,"=").replace(/%26/g,"&");
		
		if(conf == undefined) conf = {};
		if(conf.data == undefined) conf.data = "";
		
		$http.delete(getBaseUrl(endP_path) + "" + req_Path+""+item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.errorHandler=function(text,title){
		var titleFin= title ? sbiModule_translate.load(title) : "";
		var textFin=text;
		
		if(angular.isObject(text)){
			if(text.hasOwnProperty("errors") || text.hasOwnProperty("warnings")){
				var messages = text.errors || text.warnings;
				textFin="";
				for(var i=0;i<messages.length;i++){
					textFin+=sbiModule_translate.load(messages[i].message)+" <br> ";
				}
			}else{
				textFin=sbiModule_translate.load(JSON.stringify(text));
			}
		}else{
			textFin=sbiModule_translate.load(text);
		}
		
		var alert = $mdDialog.alert()
		.title(titleFin)
		.htmlContent(textFin)
		.ariaLabel('error') 
		.ok(sbiModule_translate.load('sbi.general.ok'))
		return $mdDialog.show(alert); //can use the finally function
// 		.cancel(sbiModule_translate.load('sbi.general.cancel'))
	};
});

sbiM.factory('sbiModule_device',function($window){
	var deviceObj = {};
	var browserObj = {};
	
	var userAgent = $window.navigator.userAgent;
	if (/Firefox[\/\s](\d+\.\d+)/.test(userAgent)){
		//detecting Firefox
		browserObj.name='firefox';
		browserObj.version = RegExp.$1;
	
	}else if(
			/Chrome[\/\s](\d+\.\d+)/.test(userAgent)
			&& !(/Edge(\/)/.test(userAgent))
		){
		//detecting Chrome
		browserObj.name='chrome';
		browserObj.version = RegExp.$1;
	
	} else {
		//detecting IE
		var detectIEregexp = "";
		if (userAgent.indexOf('MSIE') != -1){ // IE 9/10
			detectIEregexp = /MSIE (\d+\.\d+);/ //test for MSIE x.x		
		
		} else if (
				/Trident.*rv[ :]*(\d+\.\d+)/.test(userAgent)
				&& !(/Edge(\/)/.test(userAgent))
		){ // IE 11 // if no "MSIE" string in userAgent
			detectIEregexp = /Trident.*rv[ :]*(\d+\.\d+)/;
		} else { // IE Edge
			detectIEregexp = /Mozilla.*Edge\/(12.\d+)/;
		}
		
		
		if (detectIEregexp.test(userAgent)){ //if some form of IE
			browserObj.name='internet explorer';
			browserObj.version = RegExp.$1;
		 }
	}
	
	if (/iPhone|iPad|iPod|BlackBerry|Opera Mini|IEMobile|Android/i.test(userAgent)){
		deviceObj.isMobile = true;
	}else{
		deviceObj.isMobile = false;
	}
	deviceObj.platform = $window.navigator.platform;	

	return{
		browser : browserObj,
		device : deviceObj
	}
});

sbiM.service('sbiModule_download', function(sbiModule_config,sbiModule_logger, sbiModule_device, $window) {
	var deviceBrowser = sbiModule_device.browser.name;
	/* allows download of Blob files. The files processed as blob are:
			txt -> typeFile = 'text/plain'
			json -> typeFile = 'text/json'
			zip -> typeFile = 'application/zip'
			image -> typeFile = 'image/[png | jpeg | gif |...]'
	 */
	this.getBlob = function(data, nameFile, typeFile, extensionFile){
		var blob = new Blob([data],{type: typeFile}); 
		var urlCreator = window.URL || window.webkitURL || window.mozURL || window.msURL;
		var url = urlCreator !== undefined ? urlCreator.createObjectURL(blob) : JSON.stringify(blob);
		
		if (deviceBrowser == 'internet explorer'){
			window.navigator.msSaveBlob(blob, nameFile + '.'  + extensionFile); // The user only has the option of clicking the Save button.
		}else{
			var link = document.createElement('a');
			document.body.appendChild(link);
			link.download = nameFile + '.'  + extensionFile;
			link.href = url;
			link.target = '_blank';
			link.click();
		}
	};
			
	this.getPlain = function(data, nameFile, typeFile, extensionFile){
		if (deviceBrowser == 'internet explorer'){
			this.getBlob(data, nameFile, typeFile, extensionFile);
		}else{
			text = JSON.stringify(data);	
			a = document.createElement('a');
			document.body.appendChild(a);
			a.download = nameFile+ '.'  + extensionFile;
			a.href = 'data:'+typeFile+ ';charset=utf-8,' + encodeURI(text);
			a.target = '_blank';
			a.click();
		}
	};
	
	/* download file from direct link */
	this.getLink = function (endPath){
		var link = sbiModule_config.contextName + endPath;
		console.log(link)
		$window.location = link;
	};
});

sbiM.service('sbiModule_helpOnLine', function(sbiModule_config,$mdDialog,sbiModule_translate,sbiModule_config,sbiModule_restServices) {
	var holServ=this;
	this.show=function(data){
		$mdDialog.show({
			controller: function($scope,$mdDialog,translate){
    	  		$scope.translate=translate;
    	  		$scope.url= sbiModule_config.contextName + '/restful-services/publish?PUBLISHER=glossaryHelpOnline?'+data;
    	  		$scope.close = function() {
   		    		$mdDialog.hide();
   		  		};
	      	},
	      	locals:{ 
	    	  	translate:sbiModule_translate
    		},
	      	templateUrl : sbiModule_config.contextName + '/js/src/angular_1.4/tools/documentexecution/templates/helpOnLineDialogTemplate.jsp'
	    });
	};
	
	this.showDocumentHelpOnLine=function(label){
		sbiModule_restServices.promiseGet('1.0/documents',label).then(function(response){
		var data='DOCUMENT='+response.data.id+'&LABEL='+response.data.label+''+(response.data.dataSetId!=undefined? "&DATASET="+response.data.dataSetId : '')
			holServ.show(data);
		},function(response){
			alert("Errore "+response.data.errors[0].message);
		});
	};
});
</script>


<!-- sbiModule_dateServices -->
<script type="text/javascript" src="${pageContext.request.contextPath}/js/src/angular_1.4/tools/commons/sbiModule_services/sbiModule_dateServices.js"></script>
<!-- sbiModule_jsonServices -->
<script type="text/javascript" src="${pageContext.request.contextPath}/js/src/angular_1.4/tools/commons/sbiModule_services/sbiModule_jsonServices.js"></script>
	 