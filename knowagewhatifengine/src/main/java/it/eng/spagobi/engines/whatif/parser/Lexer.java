/*
 * Knowage, Open Source Business Intelligence suite
 * Copyright (C) 2016 Engineering Ingegneria Informatica S.p.A.
 * 
 * Knowage is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knowage is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package it.eng.spagobi.engines.whatif.parser;

/* The following code was generated by JFlex 1.5.1  */

/*
 Lexer for What-if metalanguage
 */

/*
 a lexical specification file for JFlex consists of three parts divided by a single line starting with %%:
 UserCode 

 Options and declarations 

 Lexical rules

 */

/* --------------------------Usercode Section------------------------ */

import java_cup.runtime.Symbol;

/*
 The text up to the first line starting with %% is copied verbatim to the top of the generated lexer class (before the actual class declaration). Beside package and import statements there is usually not much to do here. If the code ends with a javadoc class comment, the generated class will get this comment, if not, JFlex will generate one automatically.
 */

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.5.1 from the specification file <tt>lexerspec.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int YYINITIAL = 0;
	public static final int MEMBER_DECLARATION = 2;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
			0, 0, 1, 1
	};

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
			"\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\11\3\0" +
					"\1\7\1\23\2\0\1\21\1\22\1\17\1\16\1\5\1\13\1\12" +
					"\1\20\12\4\1\0\1\24\1\0\1\25\3\0\32\6\1\14\1\0" +
					"\1\15\1\0\1\7\1\0\32\6\4\0\41\10\2\0\4\7\4\0" +
					"\1\7\2\0\1\10\7\0\1\7\4\0\1\7\5\0\27\7\1\0" +
					"\37\7\1\0\u01ca\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0" +
					"\1\7\21\0\160\10\5\7\1\0\2\7\2\0\4\7\10\0\1\7" +
					"\1\0\3\7\1\0\1\7\1\0\24\7\1\0\123\7\1\0\213\7" +
					"\1\0\5\10\2\0\236\7\11\0\46\7\2\0\1\7\7\0\47\7" +
					"\11\0\55\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10" +
					"\10\0\33\7\5\0\3\7\15\0\4\10\7\0\1\7\4\0\13\10" +
					"\5\0\53\7\37\10\4\0\2\7\1\10\143\7\1\0\1\7\10\10" +
					"\1\0\6\10\2\7\2\10\1\0\4\10\2\7\12\10\3\7\2\0" +
					"\1\7\17\0\1\10\1\7\1\10\36\7\33\10\2\0\131\7\13\10" +
					"\1\7\16\0\12\10\41\7\11\10\2\7\4\0\1\7\5\0\26\7" +
					"\4\10\1\7\11\10\1\7\3\10\1\7\5\10\22\0\31\7\3\10" +
					"\244\0\4\10\66\7\3\10\1\7\22\10\1\7\7\10\12\7\2\10" +
					"\2\0\12\10\1\0\7\7\1\0\7\7\1\0\3\10\1\0\10\7" +
					"\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7" +
					"\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10\1\7\10\0" +
					"\1\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10\4\7\7\0" +
					"\1\7\5\0\3\10\1\0\6\7\4\0\2\7\2\0\26\7\1\0" +
					"\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\10\1\0" +
					"\5\10\4\0\2\10\2\0\3\10\3\0\1\10\7\0\4\7\1\0" +
					"\1\7\7\0\14\10\3\7\1\10\13\0\3\10\1\0\11\7\1\0" +
					"\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0" +
					"\1\10\1\7\10\10\1\0\3\10\1\0\3\10\2\0\1\7\17\0" +
					"\2\7\2\10\2\0\12\10\1\0\1\7\17\0\3\10\1\0\10\7" +
					"\2\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7" +
					"\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10\10\0\2\10" +
					"\4\0\2\7\1\0\3\7\2\10\2\0\12\10\1\0\1\7\20\0" +
					"\1\10\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7" +
					"\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7" +
					"\4\0\5\10\3\0\3\10\1\0\4\10\2\0\1\7\6\0\1\10" +
					"\16\0\12\10\11\0\1\7\7\0\3\10\1\0\10\7\1\0\3\7" +
					"\1\0\27\7\1\0\12\7\1\0\5\7\3\0\1\7\7\10\1\0" +
					"\3\10\1\0\4\10\7\0\2\10\1\0\2\7\6\0\2\7\2\10" +
					"\2\0\12\10\22\0\2\10\1\0\10\7\1\0\3\7\1\0\27\7" +
					"\1\0\12\7\1\0\5\7\2\0\1\10\1\7\7\10\1\0\3\10" +
					"\1\0\4\10\7\0\2\10\7\0\1\7\1\0\2\7\2\10\2\0" +
					"\12\10\1\0\2\7\17\0\2\10\1\0\10\7\1\0\3\7\1\0" +
					"\51\7\2\0\1\7\7\10\1\0\3\10\1\0\4\10\1\7\10\0" +
					"\1\10\10\0\2\7\2\10\2\0\12\10\12\0\6\7\2\0\2\10" +
					"\1\0\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7" +
					"\3\0\1\10\4\0\6\10\1\0\1\10\1\0\10\10\22\0\2\10" +
					"\15\0\60\7\1\10\2\7\7\10\4\0\10\7\10\10\1\0\12\10" +
					"\47\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7" +
					"\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7" +
					"\2\0\2\7\1\0\4\7\1\10\2\7\6\10\1\0\2\10\1\7" +
					"\2\0\5\7\1\0\1\7\1\0\6\10\2\0\12\10\2\0\2\7" +
					"\42\0\1\7\27\0\2\10\6\0\12\10\13\0\1\10\1\0\1\10" +
					"\1\0\1\10\4\0\2\10\10\7\1\0\44\7\4\0\24\10\1\0" +
					"\2\10\5\7\13\10\1\0\44\10\11\0\1\10\71\0\53\7\24\10" +
					"\1\7\12\10\6\0\6\7\4\10\4\7\3\10\1\7\3\10\2\7" +
					"\7\10\3\7\4\10\15\7\14\10\1\7\17\10\2\0\46\7\12\0" +
					"\53\7\1\0\1\7\3\0\u0149\7\1\0\4\7\2\0\7\7\1\0" +
					"\1\7\1\0\4\7\2\0\51\7\1\0\4\7\2\0\41\7\1\0" +
					"\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\17\7\1\0" +
					"\71\7\1\0\4\7\2\0\103\7\2\0\3\10\40\0\20\7\20\0" +
					"\125\7\14\0\u026c\7\2\0\21\7\1\0\32\7\5\0\113\7\3\0" +
					"\3\7\17\0\15\7\1\0\4\7\3\10\13\0\22\7\3\10\13\0" +
					"\22\7\2\10\14\0\15\7\1\0\3\7\1\0\2\10\14\0\64\7" +
					"\40\10\3\0\1\7\3\0\2\7\1\10\2\0\12\10\41\0\3\10" +
					"\2\0\12\10\6\0\130\7\10\0\51\7\1\10\1\7\5\0\106\7" +
					"\12\0\35\7\3\0\14\10\4\0\14\10\12\0\12\10\36\7\2\0" +
					"\5\7\13\0\54\7\4\0\21\10\7\7\2\10\6\0\12\10\46\0" +
					"\27\7\5\10\4\0\65\7\12\10\1\0\35\10\2\0\13\10\6\0" +
					"\12\10\15\0\1\7\130\0\5\10\57\7\21\10\7\7\4\0\12\10" +
					"\21\0\11\10\14\0\3\10\36\7\12\10\3\0\2\7\12\10\6\0" +
					"\46\7\16\10\14\0\44\7\24\10\10\0\12\10\3\0\3\7\12\10" +
					"\44\7\122\0\3\10\1\0\25\10\4\7\1\10\4\7\1\10\15\0" +
					"\300\7\47\10\25\0\4\10\u0116\7\2\0\6\7\2\0\46\7\2\0" +
					"\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0" +
					"\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0" +
					"\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0\3\7\1\0" +
					"\7\7\16\0\5\10\32\0\5\10\20\0\2\7\23\0\1\7\13\0" +
					"\5\10\5\0\6\10\1\0\1\7\15\0\1\7\20\0\15\7\3\0" +
					"\32\7\26\0\15\10\4\0\1\10\3\0\14\10\21\0\1\7\4\0" +
					"\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0" +
					"\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0" +
					"\5\7\4\0\1\7\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0" +
					"\205\7\6\0\4\7\3\10\16\0\46\7\12\0\66\7\11\0\1\7" +
					"\17\0\1\10\27\7\11\0\7\7\1\0\7\7\1\0\7\7\1\0" +
					"\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0" +
					"\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7\6\10\1\0\5\7" +
					"\2\0\5\7\4\0\126\7\2\0\2\10\2\0\3\7\1\0\132\7" +
					"\1\0\4\7\5\0\51\7\3\0\136\7\21\0\33\7\65\0\20\7" +
					"\u0200\0\u19b6\7\112\0\u51cc\7\64\0\u048d\7\103\0\56\7\2\0\u010d\7" +
					"\3\0\20\7\12\10\2\7\24\0\57\7\1\10\14\0\2\10\1\0" +
					"\31\7\10\0\120\7\2\10\45\0\11\7\2\0\147\7\2\0\4\7" +
					"\1\0\2\7\16\0\12\7\120\0\10\7\1\10\3\7\1\10\4\7" +
					"\1\10\27\7\5\10\20\0\1\7\7\0\64\7\14\0\2\10\62\7" +
					"\21\10\13\0\12\10\6\0\22\10\6\7\3\0\1\7\4\0\12\10" +
					"\34\7\10\10\2\0\27\7\15\10\14\0\35\7\3\0\4\10\57\7" +
					"\16\10\16\0\1\7\12\10\46\0\51\7\16\10\11\0\3\7\1\10" +
					"\10\7\2\10\2\0\12\10\6\0\27\7\3\0\1\7\1\10\4\0" +
					"\60\7\1\10\1\7\3\10\2\7\2\10\5\7\2\10\1\7\1\10" +
					"\1\7\30\0\3\7\43\0\6\7\2\0\6\7\2\0\6\7\11\0" +
					"\7\7\1\0\7\7\221\0\43\7\10\10\1\0\2\10\2\0\12\10" +
					"\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u012e\7\2\0\76\7" +
					"\2\0\152\7\46\0\7\7\14\0\5\7\5\0\1\7\1\10\12\7" +
					"\1\0\15\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7" +
					"\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7" +
					"\3\0\20\10\20\0\7\10\14\0\2\7\30\0\3\7\31\0\1\7" +
					"\6\0\5\7\1\0\207\7\2\0\1\10\4\0\1\7\13\0\12\10" +
					"\7\0\32\7\4\0\1\7\1\0\32\7\13\0\131\7\3\0\6\7" +
					"\2\0\6\7\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7" +
					"\22\0\3\10\4\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
			"\2\0\1\1\2\2\1\3\2\4\1\5\1\1\1\6" +
					"\1\7\1\10\1\11\1\12\1\13\1\14\1\15\5\0" +
					"\2\3\1\16\3\0\1\16\3\0\2\16\2\0";

	private static int[] zzUnpackAction() {
		int[] result = new int[37];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
			"\0\0\0\26\0\54\0\102\0\54\0\130\0\156\0\204" +
					"\0\54\0\232\0\54\0\54\0\54\0\54\0\54\0\54" +
					"\0\54\0\54\0\260\0\306\0\334\0\362\0\u0108\0\260" +
					"\0\u011e\0\u0134\0\u014a\0\u0160\0\u0176\0\u018c\0\u01a2\0\u01b8" +
					"\0\u01ce\0\u01e4\0\54\0\u01fa\0\u0210";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[37];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
			"\1\3\1\4\2\5\1\6\1\3\1\7\1\10\1\3" +
					"\1\5\1\3\1\11\1\12\1\3\1\13\1\14\1\15" +
					"\1\16\1\17\1\20\1\21\1\22\26\3\30\0\1\5" +
					"\27\0\1\6\1\23\1\24\2\0\1\24\1\25\17\0" +
					"\1\7\1\0\1\7\2\10\1\24\1\26\17\0\1\10" +
					"\1\0\3\10\21\0\1\27\1\0\1\27\23\0\1\30" +
					"\25\0\1\24\1\0\1\24\2\0\1\24\1\26\17\0" +
					"\1\31\1\0\1\32\23\0\1\32\1\0\1\32\23\0" +
					"\1\27\1\0\1\27\2\0\1\27\3\0\1\33\14\0" +
					"\1\31\1\0\1\32\2\0\1\32\1\34\17\0\1\32" +
					"\1\0\1\32\2\0\1\32\1\34\25\0\1\35\17\0" +
					"\1\36\1\0\1\36\33\0\1\37\15\0\1\36\1\0" +
					"\1\36\2\0\1\36\20\0\1\40\1\0\1\40\23\0" +
					"\1\40\1\0\1\40\2\0\1\40\2\41\1\0\1\42" +
					"\14\0\1\41\1\0\1\41\2\0\3\41\1\0\1\43" +
					"\22\0\1\44\27\0\1\45\15\0\1\41\1\0\1\41" +
					"\17\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[550];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error",
			"Error: could not match input",
			"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
			"\2\0\1\11\1\1\1\11\3\1\1\11\1\1\10\11" +
					"\5\0\3\1\3\0\1\1\3\0\1\1\1\11\2\0";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[37];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/* user code: */
	private final StringBuilder parsedString = new StringBuilder();

	public String getParsedString() {
		return parsedString.toString();
	}

	private boolean verbose = false;

	/*
	 * set verbose to true to enable print of information about tokens
	 */
	public void setVerbose(boolean value) {
		this.verbose = value;
	}

	/*
	 * To create a new java_cup.runtime.Symbol with information about the
	 * current token, the token will have no value in this case.
	 */
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}

	/*
	 * Also creates a new java_cup.runtime.Symbol with information about the
	 * current token, but this object has a value.
	 */
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public Lexer(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public Lexer(java.io.InputStream in) {
		this(new java.io.InputStreamReader
				(in, java.nio.charset.Charset.forName("UTF-8")));
	}

	/**
	 * Unpacks the compressed character translation table.
	 * 
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 2146) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do {
				map[j++] = value;
			} while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead,
					zzBuffer, 0,
					zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead,
				zzBuffer.length - zzEndRead);

		if (numRead > 0) {
			zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of
		// stream
		if (numRead == 0) {
			int c = zzReader.read();
			if (c == -1) {
				return true;
			} else {
				zzBuffer[zzEndRead++] = (char) c;
				return false;
			}
		}

		// numRead < 0
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null) {
			zzReader.close();
		}
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 * 
	 * Internal scan buffer is resized down to its initial length, if it has
	 * grown.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
		if (zzBuffer.length > ZZ_BUFFERSIZE) {
			zzBuffer = new char[ZZ_BUFFERSIZE];
		}
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength()) {
			zzScanError(ZZ_PUSHBACK_2BIG);
		}

		zzMarkedPos -= number;
	}

	/**
	 * Contains user EOF-code, which will be executed exactly once, when the end
	 * of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException {
		if (!zzEOFDone) {
			zzEOFDone = true;
			yyclose();
		}
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public java_cup.runtime.Symbol next_token() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR) {
						zzR = false;
					} else {
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn++;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one
				// line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL) {
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				} else if (zzAtEOF) {
					zzPeek = false;
				} else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof) {
						zzPeek = false;
					} else {
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
					}
				}
				if (zzPeek) {
					yyline--;
				}
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = zzBufferL[zzCurrentPosL++];
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					}
					else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						}
						else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) {
						break zzForAction;
					}
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) {
							break zzForAction;
						}
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 1: {
				throw new Error("Illegal character <" + yytext() + ">");
			}
			case 15:
				break;
			case 2: { /* just skip what was found, do nothing */
				break;
			}
			case 16:
				break;
			case 3: {
				if (verbose) {
					System.out.println("NUMBER=" + yytext());
				}
				parsedString.append("NUMBER=" + yytext());
				String val = yytext().replaceAll(",", ".");
				return new Symbol(sym.NUMBER, new Double(val));
			}
			case 17:
				break;
			case 4: {
				if (verbose) {
					System.out.println("VARIABLE=" + yytext());
				}
				parsedString.append("VARIABLE=" + yytext());
				return new Symbol(sym.VARIABLE, yytext());
			}
			case 18:
				break;
			case 5: {
				if (verbose) {
					System.out.println(" - ");
				}
				parsedString.append("-");
				return symbol(sym.MINUS, "-");
			}
			case 19:
				break;
			case 6: {
				if (verbose) {
					System.out.println(" + ");
				}
				parsedString.append("+");
				return symbol(sym.PLUS, "+");
			}
			case 20:
				break;
			case 7: {
				if (verbose) {
					System.out.println(" * ");
				}
				parsedString.append("*");
				return symbol(sym.TIMES, "*");
			}
			case 21:
				break;
			case 8: {
				if (verbose) {
					System.out.println(" / ");
				}
				parsedString.append("/");
				return symbol(sym.DIVIDE, "/");
			}
			case 22:
				break;
			case 9: {
				if (verbose) {
					System.out.println(" ( ");
				}
				parsedString.append("(");
				return symbol(sym.LPAREN, "(");
			}
			case 23:
				break;
			case 10: {
				if (verbose) {
					System.out.println(" ) ");
				}
				parsedString.append(")");
				return symbol(sym.RPAREN, ")");
			}
			case 24:
				break;
			case 11: {
				if (verbose) {
					System.out.println(" % ");
				}
				parsedString.append("%");
				return symbol(sym.PERCENT, "%");
			}
			case 25:
				break;
			case 12: {
				if (verbose) {
					System.out.println(" ; ");
				}
				parsedString.append(";");
				return symbol(sym.SEMI, ";");
			}
			case 26:
				break;
			case 13: {
				if (verbose) {
					System.out.println(" = ");
				}
				parsedString.append("=");
				return symbol(sym.EQUAL, "=");
			}
			case 27:
				break;
			case 14: {
				if (verbose) {
					System.out.println("MEMBER=" + yytext());
				}
				parsedString.append("MEMBER=" + yytext());
				return new Symbol(sym.MEMBER, yytext());
			}
			case 28:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					zzDoEOF();
					{
						return new java_cup.runtime.Symbol(sym.EOF);
					}
				}
				else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
