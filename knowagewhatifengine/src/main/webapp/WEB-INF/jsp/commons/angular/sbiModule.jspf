<!--
Knowage, Open Source Business Intelligence suite
Copyright (C) 2016 Engineering Ingegneria Informatica S.p.A.
 
Knowage is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Knowage is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.
 
You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->


<script>
var sbiM=angular.module('sbiModule',["toastr"]);
var httpinterceptor;
sbiM.factory('sbiModule_docInfo',function(){
	return {
    	label: '<%= documentLabel %>',
    	id :	'<%= documentId %>'
    	
	};
});

sbiM.factory('sbiModule_config',function(){
	return {
		protocol: '<%= request.getScheme()%>' ,
		host: '<%= request.getServerName()%>',
	    port: '<%= request.getServerPort()%>',
		contextName: '/<%= request.getContextPath().startsWith("/")||request.getContextPath().startsWith("\\")?request.getContextPath().substring(1): request.getContextPath()%>',
    	externalBasePath:"<%= KnowageSystemConfiguration.getKnowageContext()%>"	,
    	curr_country: '<%= curr_country %>',
    	curr_language: '<%= curr_language%>',
    	curr_script: '<%= curr_script%>'
	};
});

sbiM.service('sbiModule_logger',function(){
	this.exec=true;
	this.log = function(val1,val2,val3){
		if(this.exec){
		console.log("[LOG] ",val1,(val2 || ""),(val3|| ""));
		}
	};
	
	this.trace = function(val1,val2,val3){
		if(this.exec){
		console.log("[TRACE] ",val1,(val2 || ""),(val3|| ""));
		}
	};
	
});


sbiM.directive('loading',   ['$http' ,function ($http)
    {
        return {
            restrict: 'A',
            
            link: function (scope, elm, attrs)
            {
                scope.isLoading = function () {
                    return $http.pendingRequests.length > 0;
                };
                
                scope.showLoadingMask = true;

                scope.$watch(scope.isLoading, function (newValue, oldValue)
                {
                    if(newValue){
                    	scope.showLoadingMask = true;
                    }else{
                    	scope.showLoadingMask = false;
                    }
                });
            }
        };

    }]);
    
sbiM.factory('sbiModule_user',function(){
	
	var user={};
	user.userUniqueIdentifier = '<%= StringEscapeUtils.escapeJavaScript(userUniqueIdentifier) %>';
	user.userId = '<%= StringEscapeUtils.escapeJavaScript(userId) %>';
	user.userName = '<%= StringEscapeUtils.escapeJavaScript(userName) %>'; 
	user.ismodeweb = true;
	user.isSuperAdmin = '<%= userProfile != null && ((UserProfile)userProfile).getIsSuperadmin() %>';
	// 	set roles
	user.roles =[];
	<% for(Object rol : userRoles) { 	%>
	user.roles.push('<%=StringEscapeUtils.escapeJavaScript(rol.toString())%>');
	<% } %>
	
	//set functionalities
	user.functionalities =[];
	<% if (userProfile != null && userProfile.getFunctionalities() != null && !userProfile.getFunctionalities().isEmpty()) {
		for(Object fun :  userProfile.getFunctionalities()){ %>
		user.functionalities.push('<%=StringEscapeUtils.escapeJavaScript(fun.toString())%>');
		<% } }%>
	
	user.isAbleTo=function(func){
		return user.functionalities.indexOf(func)!=-1;
	}
	return user;
});

sbiM.service('sbiModule_messaging',function(toastr){
	this.showErrorMessage = function(msg,title){
		
		toastr.error(msg,title, {
			  closeButton: true
		});
	};
	this.showWarningMessage = function(msg,title){
		
		toastr.warning(msg,title, {
			  closeButton: true
		});
	};
	this.showInfoMessage = function(msg,title){
		
		toastr.info(msg,title, {
			  closeButton: true
		});
	};
	this.showSuccessMessage = function(msg,title){
		
		toastr.success(msg,title, {
			  closeButton: true
			});
	};
	
});

sbiM.service('sbiModule_translate', function() {
	this.addMessageFile = function(file){
		messageResource.load([file,"messages"], function(){});
	};
	
	this.load = function(key,sourceFile) {
		var sf= sourceFile == undefined? 'messages' : sourceFile;
		return messageResource.get(key, sf);
	};
});

sbiM.service('sbiModule_restServices', function($http, $q, $timeout, sbiModule_config,sbiModule_logger,sbiModule_messaging,sbiModule_translate) {
	
	var alteredContextPath=null;

	this.alterContextPath=function(cpat){		
		alteredContextPath=cpat;
	}

	function getBaseUrl(endP_path) {		
		var burl= alteredContextPath==null? sbiModule_config.contextName +'/restful-services/'+ endP_path  : alteredContextPath+ "/restful-services/" + endP_path 
		alteredContextPath=null;
		return burl ;
	};
	
	this.getCompleteBaseUrl = function(endP_path) {		
		var burl= alteredContextPath==null? sbiModule_config.contextName +'/restful-services/'+ endP_path  : alteredContextPath+ "/restful-services/" + endP_path 
		alteredContextPath=null;
		return burl ;
	};

	
	
	this.get = function(endP_path, req_Path, item, conf) {
		(item == undefined || item==null) ? 
				item = "" : 
					item = "?" + encodeURIComponent(item)
							.replace(/'/g,"%27")
							.replace(/"/g,"%22")
							.replace(/%3D/g,"=")
							.replace(/%26/g,"&");
		sbiModule_logger.trace("GET: " +endP_path+"/"+ req_Path + "" + item, conf);
		return $http.get(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf);
	};

	this.remove = function(endP_path, req_Path, item, conf) {
		item == undefined ? item = "" : item = "?" + item;
		sbiModule_logger.trace("REMOVE: "+endP_path+"/"+req_Path + "" + item,conf);
		return $http.post(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf);
	};

	this.post = function(endP_path, req_Path, item, conf) {
		sbiModule_logger.trace("POST: "+endP_path+"/"+ req_Path,item,conf);
		return $http.post(getBaseUrl(endP_path) + "" + req_Path, item, conf);
	};
	
	this.put = function(endP_path, req_Path, item, conf) {
		sbiModule_logger.trace("PUT: "+endP_path+"/"+req_Path,item,conf);
		return $http.put(getBaseUrl(endP_path) + "" + req_Path, item, conf);
	};
	
	this.delete = function(endP_path, req_Path, item, conf) {
		(item == undefined || item==null) ? item = "" : item = "?" + encodeURIComponent(item).replace(/'/g,"%27").replace(/"/g,"%22").replace(/%3D/g,"=").replace(/%26/g,"&");
		sbiModule_logger.trace("PUT:" +endP_path+"/"+req_Path+ "" + item,conf);
		return $http.delete(getBaseUrl(endP_path) + "" + req_Path, conf);
	};


	
	/*
	NEW METHODS
	*/
	
	var genericErrorHandling = function(data, status, headers, config, deferred) {
		if(data.status==401){
			console.log("request unauthorized");
			sbiModule_messaging.showErrorMessage("",sbiModule_translate.load('sbi.generic.sessionexp'));
			$timeout(function() {
				redirectToLoginUrl();
		    }, 3000);
			
			
		}else{
			deferred.reject(data, status, headers, config);	
		}
			
		  		
	};
	
	var redirectToLoginUrl = function() {
    	var sessionExpiredSpagoBIJSFound = false;
    	var loginUrl = sbiModule_config.externalBasePath;
    	try {
    		var currentWindow = window;
    		var parentWindow = parent;
    		while (parentWindow != currentWindow) {
    			if (parentWindow.sessionExpiredSpagoBIJS) {
    				parentWindow.location = loginUrl;
    				sessionExpiredSpagoBIJSFound = true;
    				break;
    			} else {
    				currentWindow = parentWindow;
    				parentWindow = currentWindow.parent;
    			}
    		}
    	} catch (err) {
    		console.log(err);
    	}
    	
    	if (!sessionExpiredSpagoBIJSFound) {
    		window.location = loginUrl;
    	}
    };
	
	
	var handleResponse = function(data, status, headers, config, deferred) {
		console.log(data);
		if(data.data != null){
			if ( data.data.hasOwnProperty("errors")) {
				
				genericErrorHandling(data, status, headers, config, deferred);
			} else {
				deferred.resolve(data, status, headers, config);
			}	
		}else{
			if ( data.status == 201) {
				deferred.resolve(data, status, headers, config);
				
			} else {
				genericErrorHandling(data, status, headers, config, deferred);
			}	
			
		}
		/////////////////////////////////////
	};
	
	

	// SAMPLE METHOD, this will be the implementation
	this.promiseGet = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		// Required for passing JSON on a GET request
		if (item == undefined || item==null) {
			item = "";
		}else {
			item = "?" + 
				encodeURIComponent(item)
				.replace(/'/g,"%27")
				.replace(/"/g,"%22")
				.replace(/%3D/g,"=")
				.replace(/%26/g,"&");
		}
		
		sbiModule_logger.trace("GET: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.get(getBaseUrl(endP_path) + "" + req_Path + "" + item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promisePost = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("POST: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.post(getBaseUrl(endP_path) + "" + req_Path , item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promisePut = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("PUT: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.put(getBaseUrl(endP_path) + "" + req_Path , item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promiseDelete = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("DELETE: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');
		
		if(conf == undefined) conf = {};
		if(conf.data == undefined) conf.data = "";

		$http.delete(getBaseUrl(endP_path) + "" + req_Path, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
  });

sbiM.service('sbiModule_download', function(sbiModule_config,sbiModule_logger, sbiModule_device, $window) {
	var browser = sbiModule_device.browser.name;
	/* allows download of Blob files. The files processed as blob are:
			txt -> typeFile = 'text/plain'
			json -> typeFile = 'text/json'
			zip -> typeFile = 'application/zip'
			image -> typeFile = 'image/[png | jpeg | gif |...]'
	 */
	this.getBlob = function(data, nameFile, typeFile, extensionFile){
		var blob = new Blob([data],{type: typeFile}); 
		var urlCreator = window.URL || window.webkitURL || window.mozURL || window.msURL;
		var url = urlCreator !== undefined ? urlCreator.createObjectURL(blob) : JSON.stringify(blob);
		
		if (browser == 'internet explorer'){
			window.navigator.msSaveBlob(blob,   nameFile + '.'  + extensionFile); // The user only has the option of clicking the Save button.
		}else{
			var link = document.createElement('a');
			document.body.appendChild(link);
			link.download = nameFile + '.'  + extensionFile;
			link.href = url;
			link.target = '_blank';
			link.click();
		}
	}
			
	this.getPlain = function(data, nameFile, typeFile, extensionFile){
		if (browser == 'internet explorer'){
			this.getBlob(data, nameFile, typeFile, extensionFile);
		}else{
			text = JSON.stringify(data);	
			a = document.createElement('a');
			document.body.appendChild(a);
			a.download = nameFile+ '.'  + extensionFile;
			a.href = 'data:'+typeFile+ ';charset=utf-8,' + encodeURI(text);
			a.target = '_blank';
			a.click();
		}
	}
	/* download file from direct link */
	this.getLink = function (endPath){
		var link = sbiModule_config.contextName + endPath;
		console.log(link)
		$window.location = link;
	}
});

sbiM.factory('sbiModule_device',function($window){
	var deviceObj = {};
	var browserObj = {};
	
	var userAgent = $window.navigator.userAgent;
	if (/Firefox[\/\s](\d+\.\d+)/.test(userAgent)){
		//detecting Firefox
		browserObj.name='firefox';
		browserObj.version = RegExp.$1;
	}else if(/Chrome[\/\s](\d+\.\d+)/.test(userAgent)){
		//detecting Chrome
		browserObj.name='chrome';
		browserObj.version = RegExp.$1;
	}else{
		//detecting IE
		var detectIEregexp = "";
		if (userAgent.indexOf('MSIE') != -1){
			detectIEregexp = /MSIE (\d+\.\d+);/ //test for MSIE x.x		
		}else{ // if no "MSIE" string in userAgent
			detectIEregexp = /Trident.*rv[ :]*(\d+\.\d+)/;
		}
		if (detectIEregexp.test(userAgent)){ //if some form of IE
			browserObj.name='internet explorer';
			browserObj.version = RegExp.$1;
		 }
	 }
	if (/iPhone|iPad|iPod|BlackBerry|Opera Mini|IEMobile|Android/i.test(userAgent)){
		deviceObj.isMobile = true;
	}else{
		deviceObj.isMobile = false;
	}
	deviceObj.platform = $window.navigator.platform;	

	return{
		browser : browserObj,
		device : deviceObj
	}
});
</script>