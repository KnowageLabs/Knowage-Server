

<%@page import="it.eng.spagobi.commons.utilities.SpagoBIUtilities"%>
<%@page import="it.eng.knowage.wapp.Version"%>
<%@page import="it.eng.spagobi.tenant.TenantManager"%>
<%@page import="it.eng.spagobi.commons.SingletonConfig"%>
<%@page import="it.eng.spagobi.commons.constants.SpagoBIConstants"%>
<%@page import="it.eng.knowage.commons.utilities.urls.UrlBuilder"%>

<script>
var sbiM=angular.module('sbiModule',["toastr","ngSanitize"]);

// sbiM.config(function($mdThemingProvider) {
// 	$mdThemingProvider.theme('default').primaryPalette('grey').accentPalette('blue-grey');
// });
<%	
	String contextNameForEngineComposition = KnowageSystemConfiguration.getKnowageContext().replaceAll("^/", "");
	String spagoBiContext = KnowageSystemConfiguration.getKnowageContext();	//  /knowage
	UrlBuilder dynamicUrlBuilder = new UrlBuilder(spagoBiContext);
	String dynamicResourcesBasePath = dynamicUrlBuilder.getDynamicResorucesBasePath();  //  /knowage/js/src/
%>
sbiM.factory('sbiModule_config',function(){ 
	return {
		knowageVersion: '<%= Version.getVersionForDatabase() %>',
		cpuNumber: <%= Runtime.getRuntime().availableProcessors() %>,
		hostName: '<%= SpagoBIUtilities.getCurrentHostName() %>',
    	contextName: '<%= KnowageSystemConfiguration.getKnowageContext() %>',
    	contextLogo: '<%= urlBuilder.getResourceLinkByTheme(request, "/img/wapp/logo.png", currTheme)%>',
    	contextMetaName: '<%= KnowageSystemConfiguration.getKnowageContext() %>meta',
    	
    	// Engines
    	qbeEngineContextName: '<%= contextNameForEngineComposition %>qbeengine',
    	birtReportEngineContextName: '<%= contextNameForEngineComposition %>birtreportengine',
    	jasperReportEngineContextName: '<%= contextNameForEngineComposition %>jasperreportengine',    	
    	dataMiningContextName: '<%= contextNameForEngineComposition %>dataminingengine',
    	whatIfEngineContextName: '<%= contextNameForEngineComposition %>whatifengine',
    	olapEngineContextName: '<%= contextNameForEngineComposition %>olapengine',
    	
    	adapterPath: '<%= KnowageSystemConfiguration.getKnowageContext() + GeneralUtilities.getSpagoAdapterHttpUrl() %>',
    	adapterPathNoContext : '<%= GeneralUtilities.getSpagoAdapterHttpUrl() %>',
    	host: window.location.origin,
    	curr_country: '<%= curr_country %>',
    	curr_language: '<%= curr_language%>',
    	curr_script: '<%= curr_script %>',
    	 
    	<%--     	currTheme: '<%= currTheme %>', --%>
		<%-- 	supportedLocales: <%= GeneralUtilities.getSupportedLocalesAsJSONArray().toString() %>, --%>
 		dateFormat: '<%= GeneralUtilities.getLocaleDateFormat(permanentSession) %>',  // the date format localized according to user language and country 
 		localizedDateFormat: '<%= GeneralUtilities.getLocaleDateFormatForExtJs(permanentSession) %>',  // the date format localized according to user language and country 
		localizedTimestampFormat: '<%= GeneralUtilities.getLocaleDateFormatForExtJs(permanentSession) %> H:i:s',  // the timestamp format localized according to user language and country
		clientServerDateFormat: '<%= GeneralUtilities.getServerDateFormatExtJs() %>',  // the date format to be used when communicating with server
		clientServerTimestampFormat: '<%= GeneralUtilities.getServerTimestampFormatExtJs() %>',   // the timestamp format to be used when communicating with server
		engineUrls:<%= aServiceResponse.getAttribute("engineUrls") %>,
		serverDateFormat: '<%= GeneralUtilities.getServerDateFormat() %>',
		sessionParametersStoreName: '<%= SpagoBIConstants.SESSION_PARAMETERS_STORE_NAME %>',
        sessionParametersStateKey: '<%= SpagoBIConstants.SESSION_PARAMETER_STATE_OBJECT_KEY %>',
        isStatePersistenceEnabled: <%= SingletonConfig.getInstance().getConfigValue("SPAGOBI.SESSION_PARAMETERS_MANAGER.enabled")  %>,
        layerFileMaxSize: '<%= GeneralUtilities.getGisLayerFileMaxSize() %>',
        workspaceShowGrid: '<%= SingletonConfig.getInstance().getConfigValue("KNOWAGE.WORKSPACE_SHOW_GRID") %>',
        dynamicResourcesBasePath: '<%= dynamicResourcesBasePath %>',       
        downloadPollingTime: <%= SingletonConfig.getInstance().getConfigValue("KNOWAGE.DOWNLOAD.POLLING.TIME")  %>,
        
		<%-- <%if(parametersStatePersistenceEnabled != null) {%> --%>
		<%-- isParametersStatePersistenceEnabled: <%= Boolean.valueOf(parametersStatePersistenceEnabled) %>, --%>
		<%-- <%}%> --%>
		
		<%-- <%if(parameterStatePersistenceScope != null) {%> --%>
		<%-- parameterStatePersistenceScope: '<%= parameterStatePersistenceScope.toUpperCase() %>', --%>
		<%-- <%}%> --%>
		
		<%-- <%if(parametersMementoPersistenceEnabled != null) {%> --%>
		<%-- isParametersMementoPersistenceEnabled: <%= Boolean.valueOf(parametersMementoPersistenceEnabled) %>, --%>
		<%-- <%}%> --%>
		
		<%-- <%if(parameterMementoPersistenceScope != null) {%> --%>
		<%-- parameterMementoPersistenceScope: '<%= parameterMementoPersistenceScope.toUpperCase() %>', --%>
		<%-- <%}%> --%>
		
		<%-- <%if(parameterMementoPersistenceDepth != null) {%> --%>
		<%-- parameterMementoPersistenceDepth: <%= parameterMementoPersistenceDepth %>, --%>
		<%-- <%}%> --%>
		
		<%-- isSSOEnabled: <%= GeneralUtilities.isSSOEnabled() %> --%>

	};
});

sbiM.config(function($mdDateLocaleProvider) {
	this.localizedDateFormat= '<%= GeneralUtilities.getLocaleDateFormatForExtJs(permanentSession) %>';  // the date format localized according to user language and country 
	
	$mdDateLocaleProvider.parseDate = function(date) {
		 if (typeof date == "string" && date.length > 0){
			 var formats = localizedDateFormat.split('/');
			 var reString='';
			 //create regex based on localizedDateFormat
			 for (var i =0; i<formats.length;i++){
				if (formats[i].toUpperCase().indexOf('D')>=0 || formats[i].toUpperCase().indexOf('M')>=0){
					reString+="(\\d{1,2})\/";
				}else if (formats[i].toUpperCase().indexOf('Y')>=0){
					reString+="(\\d{2}|\\d{4})\/";
				}
			 }
			 var re = new RegExp('^'+reString.substring(0,reString.length-1)+'$');
			 var result = re.exec(date);
			 var dateCorrect = false;
			 if (result && result.length == 4){
				 var day,mm,yy;
				 for (var i =0; i<formats.length;i++){
					if (formats[i].toUpperCase().indexOf('D')>=0){
						day=result[i+1];
					}else if (formats[i].toUpperCase().indexOf('M')>=0){
						mm=result[i+1];
					}else if (formats[i].toUpperCase().indexOf('Y')>=0){
						yy=result[i+1];
					}
				 }
				 if (mm>=1 && mm<=12 && day>=1 && day <= 31){
					 if ( (mm == 11 || mm == 4 || mm == 6 || mm == 9) && day<=30){
						 dateCorrect = true;	
					 }else if ( mm == 2 && ( ((yy % 4) == 0 && day<=29) || ((yy % 4) != 0 && day<=28))){
						 dateCorrect = true;
					 }else if (mm == 1 || mm == 3 || mm == 5  || mm == 7 || mm == 8 || mm == 10 || mm == 12){
						 dateCorrect = true;
					 }
				 }
			 }
			 return dateCorrect == true ? new Date(yy,mm-1,day) : null;
		 }else{
		    return date;
		 }
	};
	
	$mdDateLocaleProvider.formatDate = function(date){
		if (!date){
			return null;
		}
		
		if(!angular.isDate(date)){
			try{
				date=new Date(date);
			}catch(e){
				return null;
			}
		}
		
		var formats = localizedDateFormat.split('/');
		var dateResult='';
		for (var time in formats){
			if(typeof formats[time] == 'string'){
				var partOfDate='';
				if (formats[time].toUpperCase().indexOf('D')>=0){
					partOfDate+=date.getDate();
				}else if (formats[time].toUpperCase().indexOf('M')>=0){
					partOfDate+=(date.getMonth()+1);
				}else if (formats[time].toUpperCase().indexOf('Y')>=0){
					partOfDate+=date.getFullYear();
				}
				if (partOfDate.length == 1 && formats[time].length == 2){
					partOfDate = '0'+partOfDate;
				}else if (partOfDate.length==4 && formats[time].length == 2){
					partOfDate=partOfDate.substring(2);
				}
				dateResult+=partOfDate+'/';
			}
			
		}
		return dateResult.substring(0, dateResult.length - 1);
	};
});


sbiM.factory('sbiModule_user',function(){
	
	var user={};
	user.userUniqueIdentifier = '<%= StringEscapeUtils.escapeJavaScript(userUniqueIdentifier) %>';
	user.userId = '<%= StringEscapeUtils.escapeJavaScript(userId) %>';
	user.userName = '<%= StringEscapeUtils.escapeJavaScript(userName) %>'; 
	user.ismodeweb = <%= sbiMode.equals("WEB")? "true" : "false"%>;
	user.isSuperAdmin = '<%= userProfile != null && ((UserProfile)userProfile).getIsSuperadmin() %>';
	user.isTechnicalUser = '<%= userProfile != null && UserUtilities.isTechnicalUser((UserProfile)userProfile)%>'
	user.isTesterUser = '<%= userProfile != null && UserUtilities.isTester((UserProfile)userProfile)%>'
	user.isAdminUser = '<%= userProfile != null && UserUtilities.isAdministrator((UserProfile)userProfile)%>'
	user.sessionRole = '<%= sessionRole != null ? StringEscapeUtils.escapeJavaScript(sessionRole)  : ""%>';
	user.tenant = '<%= ((UserProfile)userProfile).getOrganization() != null ? ((UserProfile)userProfile).getOrganization() : TenantManager.getTenant().getName() %>';
	// 	set roles
	user.roles =[];
	<% for(Object rol : userRoles) { 	%>
	user.roles.push('<%=StringEscapeUtils.escapeJavaScript(rol.toString())%>');
	<% } %>
	
	//set functionalities
	user.functionalities =[];
	<% if (userProfile != null && userProfile.getFunctionalities() != null && !userProfile.getFunctionalities().isEmpty()) {
		for(Object fun :  userProfile.getFunctionalities()){ %>
		user.functionalities.push('<%=StringEscapeUtils.escapeJavaScript(fun.toString())%>');
		<% } }%>
	
	user.isAbleTo=function(func){
		return user.functionalities.indexOf(func)!=-1;
	}
	return user;
});

sbiM.directive('loading',   ['$http' ,function ($http)
                             {
                                 return {
                                     restrict: 'A',
                                     
                                     link: function (scope, elm, attrs)
                                     {
                                         scope.isLoading = function () {
                                             return $http.pendingRequests.length > 0;
                                         };

                                         scope.$watch(scope.isLoading, function (v)
                                         {
                                             if(v){
                                             	scope.showEl = true;
                                             }else{
                                             	scope.showEl = false;
                                             }
                                         });
                                     }
                                 };

                             }]);

sbiM.directive('restLoading',   ['$http' ,function ($http)
                             	{
                             	    return {
                             	        template:"<div loading layout-fill style='position:fixed;z-index: 500;background:rgba(0,0,0, 0.3);'>"+
                             	    	"<md-progress-circular  md-mode='indeterminate' style='top:50%;left:50%' ></md-progress-circular></div>",
                             	        link: function (scope, elm, attrs)
                             	        {
                             	            scope.$watch(function () {
                             	                return $http.pendingRequests.length > 0;
                             	            }, function (v)
                             	            {
                             	                if(v){
                             	               	 elm.css("display","block");
                             	                }else{
                             	               	 elm.css("display","none");
                             	                }
                             	            });
                             	        }
                             	    };
                             	}]);

sbiM.service('sbiModule_logger',function(){
	this.exec=true;
	this.log = function(val1,val2,val3){
		if(this.exec){
		console.log("[LOG] ",val1,(val2 || ""),(val3|| ""));
		}
	};
	
	this.trace = function(val1,val2,val3){
		if(this.exec){
		console.log("[TRACE] ",val1,(val2 || ""),(val3|| ""));
		}
	};
	
});

sbiM.service('kn_regex',function(){
	this.extendedAlphanumeric = /^([\pL\w\s\-\_\(\)\[\]\;\:\!\?\,\.\'\"\x2F\x5F%])*$/;
	this.xss = /^((?!<A|<LINK|<IMG|<SCRIPT|&LT;A|&LT;LINK|&LT;IMG|&LT;SCRIPT|{{).)*$/i;
	this.alphanumeric = /^([a-zA-Z0-9\s\-\_])*$/;
	this.alphanumericNoSpaces = /^([a-zA-Z0-9\-\_])*$/;
});

sbiM.service('sbiModule_messaging',function(toastr,sbiModule_restServices,sbiModule_translate,$mdToast,$mdDialog){
	
	this.showErrorMessage = function(msg,title){
// 		toastr.error(msg,title, {
// 			  closeButton: true
// 		});
		sbiModule_restServices.errorHandler(msg,title);
	};
	
	this.showAlertMessage = function(title,msg){
		$mdDialog.show(
			      $mdDialog.alert()
			        .parent(angular.element(document.querySelector('body')))
			        .clickOutsideToClose(true)
			        .title(title)
			        .htmlContent(msg)
			        .ariaLabel('Alert Dialog')
			        .ok(sbiModule_translate.load('sbi.general.hide'))
			    );
	};
	
	
	
	this.showWarningMessage = function(msg,title,hideTimeout){
// 		toastr.warning(msg,title, {
// 			  closeButton: true
// 		});

		var timeout = 3000;

		if (hideTimeout != undefined && typeof hideTimeout == "number") {
			timeout = hideTimeout;
		}

		return	$mdToast.show(
					$mdToast
					.simple()
					.parent(angular.element(document.querySelector('body')))
					.content(msg)
					.position('top')
					.action('OK')
					.highlightAction(false)
					.hideDelay(timeout)
				);
		
	};
	this.showInfoMessage = function(msg,title,hideTimeout){
// 		toastr.info(msg,title, {
// 			  closeButton: true
// 		});

		var timeout = 3000;

		if (hideTimeout != undefined && typeof hideTimeout == "number") {
			timeout = hideTimeout;
		}

		return	$mdToast.show(
					$mdToast
					.simple()
					.parent(angular.element(document.querySelector('body')))
					.content(msg)
					.position('top')
					.action('OK')
					.highlightAction(false)
					.hideDelay(timeout)
				);
		
	};
	
	// hideTimeout - configurable timeout for hiding of the mdToast. (added by: danristo)
	this.showSuccessMessage = function(msg,title,hideTimeout){
// 		toastr.success(msg,title, {
// 			  closeButton: true
// 			});
		
		var timeout = 3000;

		if (hideTimeout != undefined && typeof hideTimeout == "number") {
			timeout = hideTimeout;
		}

		return	$mdToast.show(
					$mdToast
					.simple()
					.parent(angular.element(document.querySelector('body')))
					.content(msg)
					.position('top')
					.action('OK')
					.highlightAction(false)
					.hideDelay(timeout) // changed by: danristo (previous value: 60000)
				);
		
	};
		
});

sbiM.service('sbiModule_translate', function() {
	this.addMessageFile = function(file){
		messageResource.load([file,"messages"], function(){});
	};
	
	this.load = function(key,sourceFile) {
		var sf= sourceFile == undefined? 'messages' : sourceFile;
		return messageResource.get(key, sf);
	};
	
	this.format = function() {
	    // The string containing the format items (e.g. "{0}")
	    // will and always has to be the first argument.
	    var theString = arguments[0];
	    
	    // start with the second argument (i = 1)
	    for (var i = 1; i < arguments.length; i++) {
	        // "gm" = RegEx options for Global search (more than one instance)
	        // and for Multiline search
	        var regEx = new RegExp("\\{" + (i - 1) + "\\}", "gm");
	        theString = theString.replace(regEx, arguments[i]);
	    }
	    
	    return theString;
	}
	
});




sbiM.service('sbiModule_restServices', function($http, $q, sbiModule_translate, sbiModule_config, sbiModule_logger, $mdDialog, $sanitize,$mdPanel, sbiModule_user) {
	
	var loginUrl = '<%= KnowageSystemConfiguration.getKnowageContext() %>'; // login url, used when session is expired
	
	var alteredContextPath=null;

	this.alterContextPath=function(cpat){
		alteredContextPath=cpat;
	}

	this.getBaseUrl = function(endP_path) {

		var burl;
		if(sbiModule_user.userId == ('public-'+sbiModule_user.tenant)){
			burl= alteredContextPath==null? sbiModule_config.contextName +'/public/restful-services/'+ endP_path+"/"  : alteredContextPath+ "/public/restful-services/" + endP_path+"/";
		}
		else{
			burl= alteredContextPath==null? sbiModule_config.contextName +'/restful-services/'+ endP_path+"/"  : alteredContextPath+ "/restful-services/" + endP_path+"/"; 
		} 
		alteredContextPath=null;
		return burl ;
	};

	this.get = function(endP_path, req_Path, item, conf) {
		(item == undefined || item==null) ? 
				item = "" : 
					item = "?" + encodeURIComponent(item)
							.replace(/'/g,"%27")
							.replace(/"/g,"%22")
							.replace(/%3D/g,"=")
							.replace(/%26/g,"&");
		sbiModule_logger.trace("GET: " +endP_path+"/"+ req_Path + "" + item, conf);
		return $http.get(this.getBaseUrl(endP_path) + "" + req_Path + "" + item, conf);
	};

	this.remove = function(endP_path, req_Path, item, conf) {
		item == undefined ? item = "" : item = "?" + item;
		sbiModule_logger.trace("REMOVE: "+endP_path+"/"+req_Path + "" + item,conf);
		return $http.post(this.getBaseUrl(endP_path) + "" + req_Path + "" + item, conf);
	};

	this.post = function(endP_path, req_Path, item, conf) {
		sbiModule_logger.trace("POST: "+endP_path+"/"+ req_Path,item,conf);
		return $http.post(this.getBaseUrl(endP_path) + "" + req_Path, item, conf);
	};
	
	this.put = function(endP_path, req_Path, item, conf) {
		sbiModule_logger.trace("PUT: "+endP_path+"/"+req_Path,item,conf);
		return $http.put(this.getBaseUrl(endP_path) + "" + req_Path, item, conf);
	};
	
	this.delete = function(endP_path, req_Path, item, conf) {
		(item == undefined || item==null) ? item = "" : item = "?" + encodeURIComponent(item).replace(/'/g,"%27").replace(/"/g,"%22").replace(/%3D/g,"=").replace(/%26/g,"&");
		sbiModule_logger.trace("DELETE:" +endP_path+"/"+req_Path+ "" + item,conf);
		return $http.delete(this.getBaseUrl(endP_path) + "" + req_Path, conf);
	};


	
	/*
	NEW METHODS
	*/
	
	var genericErrorHandling = function(data, status, headers, config, deferred) {
		if(data.status == 401){
			redirectToLoginUrl()
		}else{
			deferred.reject(data, status, headers, config);	
		}
				  		
	};
	
		var loginUrl = '<%= KnowageSystemConfiguration.getKnowageContext() %>'; // login url, used when session is expired

		var redirectToLoginUrl = function() {
	    	var sessionExpiredSpagoBIJSFound = false;
	    	try {
	    		var currentWindow = window;
	    		var parentWindow = parent;
	    		function setParentUrl(currentWindow, parentWindow){
	    			if(parentWindow == currentWindow){
	    				parentWindow.parent.postMessage({
	    					'status': 401
	    				     }, "*")
	        		}else{
	        			currentWindow = parentWindow;
	    				parentWindow = currentWindow.parent;
	    				setParentUrl(currentWindow,parentWindow);
	        		}
	    		}
	    		setParentUrl(currentWindow, parentWindow);
	    		
	    	} catch (err) {
	    		console.log(err);
	    	}

	    };
	
	var handleResponse = function(data, status, headers, config, deferred) {
		if(data.data != null){
			if ( data.data.hasOwnProperty("errors")) {
				
				genericErrorHandling(data, status, headers, config, deferred);
			} else {
				deferred.resolve(data, status, headers, config);
			}	
		}else{
			if ( data.status == 201) {
				deferred.resolve(data, status, headers, config);
				
			} else {
				genericErrorHandling(data, status, headers, config, deferred);
			}	
			
		}
		
	};

	// SAMPLE METHOD, this will be the implementation
	this.promiseGet = function(endP_path, req_Path, item, conf) {
		
		var deferred = $q.defer();
		
		// Required for passing JSON on a GET request
		if (item == undefined || item==null) {
			item = "";
		}else {
			item = "?" + 
				encodeURIComponent(item)
				.replace(/'/g,"%27")
				.replace(/"/g,"%22")
				.replace(/%3D/g,"=")
				.replace(/%26/g,"&");
		}
		
		sbiModule_logger.trace("GET: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.get(this.getBaseUrl(endP_path) + "" + req_Path + "" + item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promisePost = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("POST: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.post(this.getBaseUrl(endP_path) + "" + req_Path , item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promisePut = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("PUT: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');

		$http.put(this.getBaseUrl(endP_path) + "" + req_Path , item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.promiseDelete = function(endP_path, req_Path, item, conf) {
		var deferred = $q.defer();
		
		sbiModule_logger.trace("DELETE: " +endP_path+"/"+ req_Path + "" + item, conf);
		
		deferred.notify('About to call async function');
		(item == undefined || item==null) ? item = "" : item = "?" + encodeURIComponent(item).replace(/'/g,"%27").replace(/"/g,"%22").replace(/%3D/g,"=").replace(/%26/g,"&");
		
		if(conf == undefined) conf = {};
		if(conf.data == undefined) conf.data = "";
		
		$http.delete(this.getBaseUrl(endP_path) + "" + req_Path+""+item, conf)
			.then(
					function successCallback(data, status, headers, config) {
						handleResponse(data, status, headers, config, deferred);
				  	}, 
				  	function errorCallback(data, status, headers, config) {
				  		genericErrorHandling(data, status, headers, config, deferred);
				  	}
			);

		return deferred.promise;
	};
	
	this.errorHandler=function(text,title){
		var deferred = $q.defer();
		var titleFin= title ? sbiModule_translate.load(title) : "";
		var textFin=text;
		
		if(angular.isObject(text)){
			if(text.hasOwnProperty("errors") || text.hasOwnProperty("warnings")){
				var messages = text.errors || text.warnings;
				textFin="";
				for(var i=0;i<messages.length;i++){
					textFin+=sbiModule_translate.load(messages[i].message)+" <br> ";
				}
			}else{
				textFin=sbiModule_translate.load(JSON.stringify(text));
			}
		}else{
			textFin=sbiModule_translate.load(text);
		}
		
		
		  var config = {
				    attachTo: angular.element(document.body),
				    locals :{title:titleFin,text:textFin},
				    controller: function($scope,mdPanelRef,sbiModule_translate,title,text){
				    	$scope.title=title;
				    	$scope.text=text;
				    	$scope.ok=sbiModule_translate.load("sbi.general.ok")
				    	
				    	$scope.closeDialog=function(){
				    		mdPanelRef.close();
				    	}
				    },
				    disableParentScroll: true,
				    template: '<md-card class="kn-error-popup">'+
				    	 		'<md-card-title>'+
			            		'	<span class="md-headline">{{title}}</span>'+
			          			'</md-card-title>'+
			          			'<md-card-content><p ng-bind-html="text"></p></md-card-content>'+
			          			'<md-card-actions layout="row" layout-align="end center">'+
			                   	 '<md-button class="md-raised md-primary" ng-click="closeDialog()">{{ok}}</md-button>'+
			                  '</md-card-actions>'+
			          		'</md-card>',
				    hasBackdrop: true,
				    position: $mdPanel.newPanelPosition().absolute().center(),
				    trapFocus: true,
				    zIndex: 150,
				    clickOutsideToClose: true,
				    escapeToClose: true,
				    focusOnOpen: true,
				    onRemoving :function(){
				      deferred.resolve();
				    }
				  };
		  
		$mdPanel.open(config);
		return deferred.promise;
		
	};
});

sbiM.service('multipartForm',['$http', 'sbiModule_config',function($http, sbiModule_config){
	
	function getBaseUrl(endP_path) {

		var url = sbiModule_config.contextName +'/restful-services/'+ endP_path;
		
		return url ;
	};
	
	this.post = function(endP_path,data){
		
		var formData = new FormData();
		
		for(var key in data){			
			formData.append(key,data[key]);
		}

		return $http.post(getBaseUrl(endP_path),formData,{
			transformRequest:angular.identity,
			headers:{'Content-Type': undefined}
		})
	}
	
}]);


sbiM.service('sbiModule_urlDeserializator', function(){

 	var urlSer = {};

 	urlSer.deserializeParameters = function(urlMenuParameters) {
		urlSer.menuParams = {};
		var menuParameters = urlMenuParameters;
		var splittedMenuParams = menuParameters=='null' || menuParameters==''? [] : menuParameters.split("&");

 		for(var i=0;i<splittedMenuParams.length;i++){
			var splittedItem=splittedMenuParams[i].split("=");
			if(splittedItem[1]==undefined){throw true;}
			if(urlSer.menuParams.hasOwnProperty(splittedItem[0])) {
				var arrayOfValues = [];
				if(Array.isArray(urlSer.menuParams[splittedItem[0]])) {
					arrayOfValues = urlSer.menuParams[splittedItem[0]];					
				} else {
					arrayOfValues.push(urlSer.menuParams[splittedItem[0]]);
				}				
				arrayOfValues.push(splittedItem[1]);
				urlSer.menuParams[splittedItem[0]]=arrayOfValues;
			} else {
				urlSer.menuParams[splittedItem[0]]=splittedItem[1];
			}
		}
		return urlSer.menuParams;
	}

 	return urlSer;

 });


sbiM.service('sbiModule_i18n', function(sbiModule_config, sbiModule_restServices, $q) {
	
	var self = this;
	self.i18nMap;

    return {
        
    	loadI18nMap : function(){
    		 return $q(function(resolve, reject) {
    		if(self.i18nMap){
    			resolve(self.i18nMap);
			}else{
				
			var script = angular.copy(sbiModule_config.curr_script);
    		
    		sbiModule_restServices.promiseGet("2.0/i18nMessages",
    				"?currCountry="+sbiModule_config.curr_country+
    				"&currLanguage="+sbiModule_config.curr_language+
    				"&currScript="+script.replaceAll('-','')
    				).then(
	    				function(response){
	    					self.i18nMap = response.data;
	    					resolve(self.i18nMap);
		    			},function(response){
		    				alert("Error: "+response.data.errors[0].message);
		    			}
		    		);
			}
    	});
    	},

        getI18n : function (label) { // return translation of a label if present, otherwise return the label
    		if(label && self.i18nMap && label.startsWith('i18n_') && self.i18nMap[label] != undefined){
    			return self.i18nMap[label];
    		}
    		else return label; 
        },
    	printMsg : function(){
    		alert('test message');
    	}
      };
		
});



sbiM.factory('sbiModule_device',function($window){
	var deviceObj = {};
	var browserObj = {};
	
	var userAgent = $window.navigator.userAgent;
	if (/Firefox[\/\s](\d+\.\d+)/.test(userAgent)){
		//detecting Firefox
		browserObj.name='firefox';
		browserObj.version = RegExp.$1;
	
	}else if(
			/Chrome[\/\s](\d+\.\d+)/.test(userAgent)
			&& !(/Edge(\/)/.test(userAgent))
		){
		//detecting Chrome
		browserObj.name='chrome';
		browserObj.version = RegExp.$1;
	
	} else {
		//detecting IE
		var detectIEregexp = "";
		if (userAgent.indexOf('MSIE') != -1){ // IE 9/10
			detectIEregexp = /MSIE (\d+\.\d+);/ //test for MSIE x.x		
		
		} else if (
				/Trident.*rv[ :]*(\d+\.\d+)/.test(userAgent)
				&& !(/Edge(\/)/.test(userAgent))
		){ // IE 11 // if no "MSIE" string in userAgent
			detectIEregexp = /Trident.*rv[ :]*(\d+\.\d+)/;
		} else { // IE Edge
			detectIEregexp = /Mozilla.*Edge\/(12.\d+)/;
		}
		
		
		if (detectIEregexp.test(userAgent)){ //if some form of IE
			browserObj.name='internet explorer';
			browserObj.version = RegExp.$1;
		 }
	}
	
	if (/iPhone|iPad|iPod|BlackBerry|Opera Mini|IEMobile|Android/i.test(userAgent)){
		deviceObj.isMobile = true;
	}else{
		deviceObj.isMobile = false;
	}
	deviceObj.platform = $window.navigator.platform;	

	return{
		browser : browserObj,
		device : deviceObj
	}
});

sbiM.service('sbiModule_download', function(sbiModule_config,sbiModule_logger, sbiModule_device, $window) {
	var deviceBrowser = sbiModule_device.browser.name;
	/* allows download of Blob files. The files processed as blob are:
			txt -> typeFile = 'text/plain'
			json -> typeFile = 'text/json'
			zip -> typeFile = 'application/zip'
			image -> typeFile = 'image/[png | jpeg | gif |...]'
	 */
	this.getBlob = function(data, nameFile, typeFile, extensionFile, mimeType,fileAndExtension){
		var fileAndExtension = fileAndExtension!=undefined ? fileAndExtension.substring(21) :  nameFile + '.'  + extensionFile;
		var blob = new Blob([data],{type: typeFile}); 
		var urlCreator = window.URL || window.webkitURL || window.mozURL || window.msURL;
		var url = urlCreator !== undefined ? urlCreator.createObjectURL(blob) : JSON.stringify(blob);
		
		if (deviceBrowser == 'internet explorer'){
			window.navigator.msSaveBlob(blob, fileAndExtension); // The user only has the option of clicking the Save button.
		}else{
			var link = document.createElement('a');
			document.body.appendChild(link);
			link.download = fileAndExtension;
			link.href = url;
			link.target = '_blank';
			link.click();
			
			document.body.removeChild(link);
		}
	};
			
	this.getPlain = function(data, nameFile, typeFile, extensionFile){
		this.getBlob(data, nameFile, typeFile, extensionFile);
		
	/*	if (deviceBrowser == 'internet explorer'){
			this.getBlob(data, nameFile, typeFile, extensionFile);
		}else{
			text = JSON.stringify(data);	
			a = document.createElement('a');
			document.body.appendChild(a);
			a.download = nameFile+ '.'  + extensionFile;
			a.href = 'data:'+typeFile+ ';charset=utf-8,' + encodeURI(text);
			a.target = '_blank';
			a.click(); 
		}*/
	};
	
	/* download file from direct link */
	this.getLink = function (endPath){
		var link = sbiModule_config.contextName + endPath;
		console.log(link)
		$window.location = link;
	};
});

sbiM.service('sbiModule_helpOnLine', function(sbiModule_config,$mdDialog,sbiModule_translate,sbiModule_user,sbiModule_restServices) {
	var holServ=this;
	this.isAbleToGlossary=function(){
		return sbiModule_user.isAbleTo("Glossary");
// 		 &&  sbiModule_user.isAbleTo("ManageGlossaryTechnical");
	};
	this.show=function(data){
		if(!this.isAbleToGlossary()){
			sbiModule_restServices.errorHandler(sbiModule_translate.load("sbi.glossary.notEnableToTelpOnline"));
			return
		}
		$mdDialog.show({
			controller: function($scope,$mdDialog,translate){
    	  		$scope.translate=translate;
    	  		$scope.url= sbiModule_config.contextName + '/restful-services/publish?PUBLISHER=glossaryHelpOnline?'+data;
    	  		$scope.close = function() {
   		    		$mdDialog.hide();
   		  		};
	      	},
	      	locals:{ 
	    	  	translate:sbiModule_translate
    		},
	      	templateUrl : sbiModule_config.dynamicResourcesBasePath + '/angular_1.4/tools/documentexecution/templates/helpOnLineDialogTemplate.jsp'
	    });
	};
	
	this.showDocumentHelpOnLine=function(label){
		if(!this.isAbleToGlossary()){
			sbiModule_restServices.errorHandler(sbiModule_translate.load("sbi.glossary.notEnableToTelpOnline"));
			return
		}
		sbiModule_restServices.promiseGet('1.0/documents',label).then(function(response){
		var data='DOCUMENT='+response.data.id+'&LABEL='+response.data.name+''+(response.data.dataSetId!=undefined? "&DATASET="+response.data.dataSetId : '')
			holServ.show(data);
		},function(response){
			alert("Errore "+response.data.errors[0].message);
		});
	};
});
sbiM.service('sbiModule_urlBuilderService',["$httpParamSerializer",function($httpParamSerializer) {

    var parameters = [];
    var httpParamSerializer = $httpParamSerializer;
	var baseUrl = "";
	var getQueryString = function(){
			var queryString = "";
      for(var i = 0;i < parameters.length;i++){
      	var params = getQueryStringFromObj(parameters[i]);
        queryString = queryString + "&" + params;
      }
			return queryString;
	}

    var getQueryStringFromObj = function(obj){
    	return httpParamSerializer(obj)
    }

    var clearParameters = function(){
    	parameters.length = 0;
    }

    var isObject = function(obj){
		return  typeof obj === 'object' && obj.constructor === Object;
	}

    var isEmpty = function(obj){
    	return Object.keys(obj).length === 0;
    }

    var isNull = function(obj){
    	return obj === null || obj === undefined;
    }

    var isValid = function(value){
    	return !isNull(value) && isObject(value) && !isEmpty(value)
    }
	
    var isArrayEmpty = function(array){
    	return array.length === 0;
    }
    var hasUrlParamameters = function(url){   	
    	return url.includes("?")
    }
    
    var buildUrlWithExistingParams = function(){	
    	var url;
    	return url = baseUrl + getQueryString();   	
    }
    
    var buildUrlWithoutExistingParams = function(){
     var url;
    	if(!isArrayEmpty(parameters)){
    		return url = baseUrl + "?" + getQueryString().substr(1);
    	}else
    		return baseUrl;
    }
    
		return {

			setBaseUrl:function(url){
					baseUrl = url;
			},

			addQueryParams:function(paramsObj){
				if(isValid(paramsObj)){
					parameters.push(paramsObj)
				}
			},

			build:function(){				
			
				if(hasUrlParamameters(baseUrl)){
					var url = buildUrlWithExistingParams();
				}else{
					var url = buildUrlWithoutExistingParams();
				}
				
				clearParameters();
				return url;
			}

		}
}] );
sbiM.service('windowCommunicationService',['messageHandlerValidatorService',function(messageHandlerValidatorService){

	
 
	var communicatorUtils = new CommunicatorUtils();
	var listenerManager = new ListenerManager();
	var messageManager = new MessageManager(messageHandlerValidatorService);
	 
	var eventLisneter = function(event){
		 
	 	if(communicatorUtils.isConnectionRequest(event)){
	 		listenerManager.addListener(event.source)	
	 	}else if(communicatorUtils.isConnectionClosing(event)){
	 		listenerManager.removeListener(event.source)
	 	}else{	
	 		messageManager.handleMessage(event)
	 	}
	 	
		
	} 
	
	 var init = function(){
		 
		 if(communicatorUtils.hasParent()){
			 messageManager.sendConnectionRequest();
			 listenerManager.addListener(window.parent);
		 }
		 window.addEventListener("message",eventLisneter, false);
		 window.addEventListener("beforeunload",messageManager.unsubscribe, false);	
	 }
	 
	 init();
	 return {
		 	
		removeMessageHandler:function(messageHandler){messageManager.removeMessageHandler(messageHandler)},
		sendMessage:function(message){messageManager.broadcastMessage(message,listenerManager.listeners)},
	 	addMessageHandler:function(messageHandler){messageManager.addMessageHandler(messageHandler)}
	 }
	 
	
	 

}])

function CommunicatorUtils(){
	
	this.hasParent = function(){
		 return window !== window.parent;
	 }
	
	this.isConnectionRequest = function(event){
		 return event.data === "handshake";
	 }
	
	this.isConnectionClosing = function(event){
		 return event.data === "unsubscribe";
	 }
}

function ListenerManager(){
	
	this.listeners = [];
	
	this.addListener = function(listener){
		 this.listeners.push(listener)
		 this.removeNonExistingListeners();
	 }
	 
	this.removeListener = function(listener){
		 for(var i = 0;i<this.listeners.length;i++){
	 			if(listener === this.listeners[i]){
	 				this.listeners.splice(i,1);
	 			}
		 }
	 }
	 
	this.removeNonExistingListeners = function(){
		 for(var i = 0;i<this.listeners.length;i++){
	 			if(!this.listeners[i].parent){
	 				this.listeners.splice(i,1);
	 			}
		 }
	 }
}

function MessageManager(messageHandlerValidator){
	
	this.messageHandlers = [];
	this.messageHandlerValidator = messageHandlerValidator;
	
	this.sendConnectionRequest = function(){
		 window.parent.postMessage("handshake","*");
	 }
	 
	 this.unsubscribe = function(){
		 window.parent.postMessage("unsubscribe","*");
	 }
	 
	 this.addMessageHandler = function(messageHandler){
			if(this.messageHandlerValidator.isValid(messageHandler)){
				this.messageHandlers.push(messageHandler)
			}else{
				
				console.error("valid messageHandler must have function handleMessage(message)")
				console.error(messageHandler)
			}
			
		}
	 
	 this.handleMessage = function(event){
		 for(var i = 0;i<this.messageHandlers.length;i++){
	 			this.messageHandlers[i].handleMessage(event.data);
		 }
	 }
	 
	this.broadcastMessage = function(message,listeners){
		 for(var i =0;i<listeners.length;i++){
			 listeners[i].postMessage(message,"*");
			}
	 }
	
	this.removeMessageHandler = function(messageHandler){
		 for(var i = 0;i<this.messageHandlers.length;i++){
	 			if(messageHandler === this.messageHandlers[i]){
	 				this.messageHandlers.splice(i,1);
	 			}
		 }
	}
	 
	 
	
}

sbiM.service('messageHandlerValidatorService',function(){
	var isNull = function(value){
		 return value === null || value === undefined;
	 }
	 
	 var isObject = function(obj){
			return  typeof obj === 'object' && obj.constructor === Object;
	}
	 
	 var isFunction = function(func){
			return  typeof func === 'function';
	}
	 
	 var hasHandleMessageFunction = function(messageHandler){
		 return !isNull(messageHandler.handleMessage) && isFunction(messageHandler.handleMessage);
	 }
	 
	 var isValidMessageHandler = function(messageHandler){
		 return !isNull(messageHandler) && isObject(messageHandler) && hasHandleMessageFunction(messageHandler)
	 }
	 
	 return{
		 isValid:isValidMessageHandler
	 }

	})

</script>


<script type="text/javascript" src="<%=KnowageSystemConfiguration.getKnowageContext()%><%= LocalePropertiesUtilities.getAngularPropertiesFileName(curr_language,curr_script,curr_country,"-")%>"></script>
	 