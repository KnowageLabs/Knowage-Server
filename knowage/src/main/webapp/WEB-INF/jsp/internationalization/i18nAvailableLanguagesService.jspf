<%-- Knowage, Open Source Business Intelligence suite
Copyright (C) 2016 Engineering Ingegneria Informatica S.p.A.

Knowage is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

Knowage is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
--%>

<%--------- Java Imports  --------%>
  <%@page import="org.apache.log4j.Logger"%>
  <%@page import="it.eng.spagobi.commons.bo.Config"%>
  <%@page import="it.eng.spagobi.commons.dao.IConfigDAO"%>
  <%@page import="it.eng.spagobi.commons.dao.IDomainDAO"%>
  <%@page import="it.eng.spagobi.commons.bo.Domain"%>
  <%@page import="it.eng.spagobi.commons.dao.DAOFactory"%>
  <%@page import="java.util.ArrayList"%>	
  <%@page import="java.util.Locale"%>
  <%@page import="java.util.List"%>
  <%@page import="java.util.Iterator"%>
  <%@page import="org.json.JSONObject"%>
  <%@page import="org.json.JSONArray"%>
  <%@page import="org.json.JSONException"%>
  
 <%--------- Declarations  --------%>
  <%	
  	Logger logg = Logger.getLogger(this.getClass().getName());
  	JSONObject i18nAvailableLanguages = new JSONObject();
 	JSONArray langs = new JSONArray();
 	
	IConfigDAO configsDao = DAOFactory.getSbiConfigDAO();
  	Config defaultLangConfig = configsDao.loadConfigParametersByLabel("SPAGOBI.LANGUAGE_SUPPORTED.LANGUAGE.default");
  	String defaultLangLocale = defaultLangConfig.getValueCheck();
  	Locale defaultLocaleObj = Locale.forLanguageTag(defaultLangLocale); 
  	
	Config availableLangConfig = configsDao.loadConfigParametersByLabel("SPAGOBI.LANGUAGE_SUPPORTED.LANGUAGES");
	String availableLangLocale = availableLangConfig.getValueCheck();
	String[] langArray = availableLangLocale.split(",");
	
  	for(String language : langArray) {
  		JSONObject json = new JSONObject();
  		try {

  			Locale tempLocaleObj = Locale.forLanguageTag(language);
  			String tempLang = tempLocaleObj.getISO3Language();
  			json.put("language", String.format("%s(%s)", tempLocaleObj.getDisplayLanguage(locale), tempLocaleObj.getISO3Country() ));
  			json.put("iso3code", tempLang);
  			json.put("languageTag", tempLocaleObj.toLanguageTag());
  			if(tempLocaleObj.toLanguageTag().equals(defaultLangLocale)) {
  				json.put("defaultLanguage", true);
  			}
  			langs.put(json);
  		} catch (JSONException e) {
  			logg.error(e.getMessage(), e);
			throw new RuntimeException(e);
  		}
  	}
  	  	
  	i18nAvailableLanguages.put("languages", langs);
  %>
  
 <script type="text/javascript" nonce="<%= request.getAttribute("cspNonce") %>">
	(function () {
		angular.module('i18nAvailableLanguagesModule')
				.factory('i18nAvailableLanguagesService', function(){
					return {
						getAvailableLanguages: function() {
							return <%= i18nAvailableLanguages.toString() %>
						}
					}
				});	
	})();
 </script>
 