{
    "dataPreparation": {
        "abs": "Returns the absolute value of the numeric value.",
        "acos": "Returns the inverse cosine (a.k.a. arc cosine) of expr, as if computed by java.lang.Math.acos.",
        "add_months": "Returns the date that is num_months after start_date.",
        "approx_percentile": "Returns the approximate percentile of the numeric column col which is the smallest value in the ordered col values (sorted from least to greatest) such that no more than percentage of col values is less than the value or equal to that value. The value of percentage must be between 0.0 and 1.0. The accuracy parameter (default: 10000) is a positive numeric literal which controls approximation accuracy at the cost of memory. Higher value of accuracy yields better accuracy, 1.0/accuracy is the relative error of the approximation. When percentage is an array, each value of the percentage array must be between 0.0 and 1.0. In this case, returns the approximate percentile array of column col at the given percentage array.",
        "asin": "Returns the inverse sine (a.k.a. arc sine) the arc sin of expr, as if computed by java.lang.Math.asin.",
        "atan": "Returns the inverse tangent (a.k.a. arc tangent) of expr, as if computed by java.lang.Math.atan",
        "avg": "Returns the mean calculated from values of a group.",
        "casewhen": "When expr1 = true, returns expr2; else when expr3 = true, returns expr4; else returns expr5. Arguments: <br> expr1, expr3 - the branch condition expressions should all be boolean type. <br> expr2, expr4, expr5 - the branch value expressions and else value expression should all be same type or coercible to a common type.",
        "char_length": "Returns the character length of string data or number of bytes of binary data. The length of string data includes the trailing spaces. The length of binary data includes binary zeros.",
        "coalesce": "Returns the first non-null argument if exists. Otherwise, null.",
        "concat": "Returns the concatenation of col1, col2, ..., colN.",
        "cos": "Returns the cosine of expr, as if computed by java.lang.Math.cos.",
        "current_date": "Returns the current date at the start of query evaluation.",
        "current_timestamp": "Returns the current timestamp at the start of query evaluation.",
        "date_add": "Returns the date that is num_days after start_date.",
        "date_sub": "Returns the date that is num_days before start_date.",
        "date_trunc": "Returns timestamp ts truncated to the unit specified by the format model fmt. fmt should be one of [\"YEAR\", \"YYYY\", \"YY\", \"MON\", \"MONTH\", \"MM\", \"DAY\", \"DD\", \"HOUR\", \"MINUTE\", \"SECOND\", \"WEEK\", \"QUARTER\"]",
        "datediff": "Returns the number of days from startDate to endDate.",
        "day": "Returns the day of month of the date/timestamp.",
        "dayofmonth": "Returns the day of month of the date/timestamp.",
        "dayofweek": "Returns the day of the week for date/timestamp (1 = Sunday, 2 = Monday, ..., 7 = Saturday).",
        "dayofyear": "Returns the day of year of the date/timestamp.",
        "dense_rank": "Computes the rank of a value in a group of values. The result is one plus the previously assigned rank value. Unlike the function rank, dense_rank will not produce gaps in the ranking sequence.",
        "element_at": "Returns element of array at given (1-based) index. If index < 0, accesses elements from the last to the first. Returns NULL if the index exceeds the length of the array.",
        "element_at2": "Returns value for given key, or NULL if the key is not contained in the map",
        "exists": "Tests whether a predicate holds for one or more elements in the array.",
        "exp": "Returns e to the power of expr.",
        "factorial": "Returns the factorial of expr. expr is [0..20]. Otherwise, null.",
        "floor": "Returns the largest integer not greater than expr.",
        "format_string": "Returns a formatted string from printf-style format strings.",
        "hint": "Click on one of the listed functions to get more information about it",
        "hour": "Returns the hour component of the string/timestamp.",
        "if": "If expr1 evaluates to true, then returns expr2; otherwise returns expr3.",
        "last_day": "Returns the last day of the month which the date belongs to.",
        "lcase": "Returns str with all characters changed to lowercase.",
        "left": "Returns the leftmost len(len can be string type) characters from the string str,if len is less or equal than 0 the result is an empty string.",
        "length": "Returns the character length of string data or number of bytes of binary data. The length of string data includes the trailing spaces. The length of binary data includes binary zeros.",
        "ln": "Returns the natural logarithm (base e) of expr.",
        "locate": "Returns the position of the first occurrence of substr in str after position pos. The given pos and return value are 1-based.",
        "log": "Returns the logarithm of expr with base.",
        "lower": "Returns str with all characters changed to lowercase.",
        "lpad": "Returns str, left-padded with pad to a length of len. If str is longer than len, the return value is shortened to len characters.",
        "ltrim1": "Removes the leading space characters from str.",
        "ltrim2": "Removes the leading string contains the characters from the trim string",
        "max": "Returns the maximum value of expr",
        "mean": "Returns the mean calculated from values of a group.",
        "min": "Returns the minimum value of expr",
        "minute": "Returns the minute component of the string/timestamp.",
        "mod": "Returns the remainder after expr1/expr2.",
        "month": "Returns the month component of the date/timestamp.",
        "months_between": "If timestamp1 is later than timestamp2, then the result is positive. If timestamp1 and timestamp2 are on the same day of month, or both are the last day of month, time of day will be ignored. Otherwise, the difference is calculated based on 31 days per month, and rounded to 8 digits unless roundOff=false.",
        "next_day": "Returns the first date which is later than start_date and named as indicated.",
        "not": "Logical not.",
        "nullif": "Returns null if expr1 equals to expr2, or expr1 otherwise.",
        "nvl": "Returns expr2 if expr1 is null, or expr1 otherwise.",
        "percent_rank": "Computes the percentage ranking of a value in a group of values.",
        "percentile1": "Returns the exact percentile value of numeric column col at the given percentage. The value of percentage must be between 0.0 and 1.0. The value of frequency should be positive integral",
        "percentile2": "Returns the exact percentile value array of numeric column col at the given percentage(s). Each value of the percentage array must be between 0.0 and 1.0. The value of frequency should be positive integral",
        "pow": "Raises expr1 to the power of expr2.",
        "quarter1": "Returns the quarter of the year for date, in the range 1 to 4.",
        "quarter2": "Returns the quarter of the year for date, in the range 1 to 4.",
        "replace": "Replaces all occurrences of search with replace.",
        "round": "Returns expr rounded to d decimal places using HALF_UP rounding mode.",
        "rtrim1": "Removes the trailing space characters from str.",
        "rtrim2": "Removes the trailing string which contains the characters from the trim string from the str",
        "second": "Returns the second component of the string/timestamp.",
        "sha": "Returns a sha1 hash value as a hex string of the expr.",
        "sin": "Returns the sine of expr, as if computed by java.lang.Math.sin.",
        "skewness": "Returns the skewness value calculated from values of a group.",
        "stddev": "Returns the sample standard deviation calculated from values of a group.",
        "stddev_pop": "Returns the population standard deviation calculated from values of a group.",
        "stddev_samp": "Returns the sample standard deviation calculated from values of a group.",
        "substr": "Returns the substring of str that starts at pos and is of length len, or the slice of byte array that starts at pos and is of length len.",
        "tan": "Returns the tangent of expr, as if computed by java.lang.Math.tan.",
        "timestamp": "Casts the value expr to the target data type timestamp.",
        "to_date": "Parses the date_str expression with the fmt expression to a date. Returns null with invalid input. By default, it follows casting rules to a date if the fmt is omitted.",
        "to_timestamp": "Parses the timestamp_str expression with the fmt expression to a timestamp. Returns null with invalid input. By default, it follows casting rules to a timestamp if the fmt is omitted.",
        "trim": "trim(str) - Removes the leading and trailing space characters from str. <br>        trim(BOTH trimStr FROM str) - Remove the leading and trailing trimStr characters from str <br>        trim(LEADING trimStr FROM str) - Remove the leading trimStr characters from str <br>        trim(TRAILING trimStr FROM str) - Remove the trailing trimStr characters from str <br>        Arguments: <br>        str - a string expression <br>        trimStr - the trim string characters to trim, the default value is a single space <br>        BOTH, FROM - these are keywords to specify trimming string characters from both ends of the string <br>        LEADING, FROM - these are keywords to specify trimming string characters from the left end of the string <br>        TRAILING, FROM - these are keywords to specify trimming string characters from the right end of the string",
        "ucase": "Returns str with all characters changed to uppercase.",
        "upper": "Returns str with all characters changed to uppercase.",
        "variance": "Returns the sample variance calculated from values of a group.",
        "weekday": "Returns the day of the week for date/timestamp (0 = Monday, 1 = Tuesday, ..., 6 = Sunday).",
        "weekofyear": "Returns the week of the year of the given date. A week is considered to start on a Monday and week 1 is the first week with >3 days.",
        "year": "Returns the year component of the date/timestamp."
    }
}
