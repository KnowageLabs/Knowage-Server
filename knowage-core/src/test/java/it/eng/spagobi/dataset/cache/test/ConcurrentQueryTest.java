/*
 * Knowage, Open Source Business Intelligence suite
 * Copyright (C) 2016 Engineering Ingegneria Informatica S.p.A.
 * 
 * Knowage is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Knowage is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package it.eng.spagobi.dataset.cache.test;

import static org.junit.Assert.assertNotNull;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.apache.commons.dbcp2.BasicDataSource;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class ConcurrentQueryTest {

	private static BasicDataSource dataSource = null;
	private static ExecutorService executor = null;
	private static Collection<ConcurrentQuery> tasks = null;
	private static Set<String> results = null;
	private static List<String> values = null;

	private static final String SQL_QUERY = "SELECT DISTINCT state_province FROM example_customer where (lname, fname
	private static final int NUM_QUERY = 20;
	private static final int SCALE_FACTOR = 4;

	@SuppressWarnings({ "resource", "unused", "rawtypes" })
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {

		dataSource = new BasicDataSource();
		assertNotNull("Connection correctly established", dataSource);
		dataSource.setDriverClassName("com.mysql.jdbc.Driver");
		dataSource.setUrl("jdbc:mysql://localhost/foodmart_key");
		dataSource.setUsername("root");
		dataSource.setPassword("lancer");
		dataSource.setDefaultAutoCommit(false);
		dataSource.setDefaultTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
		// dataSource.setInitialSize(100);

		tasks = new ArrayList<ConcurrentQuery>();
		executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * SCALE_FACTOR);

		values = getPlainValues(null);

		results = new HashSet<String>();
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		if (dataSource != null) {
			dataSource.close();
		}
		dataSource = null;
		executor = null;
		values = null;

		results = null;
	}

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	@SuppressWarnings("unchecked")
	@Test
	public void test() throws Exception {

		int count = 0;
		for (int i = 0; i < NUM_QUERY; i++) {
			tasks.add(new ConcurrentQuery(dataSource, values.subList(count, count + 1000)));

			count = count + 1000;
		}
		List<Future<Set<String>>> futures = executor.invokeAll(tasks);
		executor.shutdown();
		executor.awaitTermination(60, TimeUnit.SECONDS);

		count = 0;
		for (Future<Set<String>> f : futures) {
			if (f.isDone() && !f.isCancelled()) {
				Set<String> s = f.get();
				if (s != null) {
					results.addAll(s);
					count++;
				}
			}
		}
		dataSource.close();
		System.out.println("Total thread completed [" + count + "].\nTotal results [" + results.size() + "].");
	}

	private class ConcurrentQuery implements Callable<Set<String>> {

		private final BasicDataSource dataSource;
		private final List<String> data;

		public ConcurrentQuery(BasicDataSource dataSource, List<String> data) {
			this.dataSource = dataSource;
			this.data = data;
		}

		@Override
		public Set<String> call() throws Exception {

			Connection conn = dataSource.getConnection();
			PreparedStatement statement = conn.prepareStatement(SQL_QUERY);
			for (int i = 0; i < data.size(); i++) {
				statement.setString(i + 1, data.get(i));
			}

			ResultSet rs = statement.executeQuery();
			Set<String> results = new HashSet<String>();
			while (rs.next()) {
				results.add(rs.getString(1));
			}

			rs.close();
			statement.close();
			conn.close();

			return results;
		}

	}

	private static List<String> getPlainValues(List<String[]> data) {
		List<String> values = new ArrayList<>();
		for (String[] s : data) {
			for (int i = 0; i < s.length; i++) {
				values.add(s[i]);
			}
		}
		return values;
	}
}
