#set($dataFields = $data.metaData.fields) ## columns of data table
#set($dataColumnsMapper = {})

#foreach ($dataField in $dataFields) ## conversion column name to internal column name
	#if($dataField.class.name == 'java.util.LinkedHashMap')
		#set($dataFieldHeader = $datasettransformer.setGroupingFunctionToLowerCase($dataField.header))
    	#set($workAroundNoPrint = $dataColumnsMapper.put($dataFieldHeader , $dataField.name))
	#end
#end

#set($rows = $data.rows) ## data in table rows

#set($categorieColumns = $chart.VALUES.CATEGORY) ## metadata related to categories
#if($categorieColumns.name=="")
#set($categorieColumns.name = $categorieColumns.column)
#end
#if($chart.isCockpitEngine=="true")
#set($categorieColumnsMapped = $dataColumnsMapper.get($categorieColumns.name)) ## "product" -> "column_3"
#end
#if($chart.isCockpitEngine!="true")
#set($categorieColumnsMapped = $dataColumnsMapper.get($categorieColumns.column)) ## "product" -> "column_3"
#end

#set($series = $chart.VALUES.SERIE) ## metadata related to series

#set($seriesMap = {}) ## conversion series metadata to map object

#if($series.class.name == 'java.util.LinkedHashMap')
	#set($workAroundNoPrint = $seriesMap.put($series.name , $series))
#else
	#set($serieKeyFeed = 0)
	#foreach($serie in $series)
		#set($serieMapKey = $serie.column + '_' + $serieKeyFeed)
		#set($workAroundNoPrint = $seriesMap.put($serieMapKey , $serie))
		
		#set($serieKeyFeed = $serieKeyFeed + 1)
	#end
#end

## Axes selection
#set($axisList = $chart.AXES_LIST.AXIS)

#set($xAxis = false) ## X axis
#set($yAxis = false) ## Y axis

#foreach($axis in $axisList)
 	#if($axis.type == 'Category' && $xAxis == false)
 		#set($xAxis = $axis)
 	#end
 	
 	#if($axis.type == 'Serie' && $yAxis == false)
 		#set($yAxis = $axis)
 	#end
#end

#set($colorPalette = $chart.COLORPALETTE.COLOR)
#set($colorPaletteLength = $chart.COLORPALETTE.COLOR.size())

{
	chart: {
		type: '$chartType',
		
		isCockpitEngine: $chart.isCockpitEngine,
	
		additionalData: {
			categoryColumn: '$categorieColumns.column',
			categoryName: '$categorieColumns.name.replace("'","\'")'
		},
	#if($chart.height != '')
		height: $chart.height,
	#end
	#if($chart.width != '')
		width: $chart.width,
	#end
	
	#*
		Dimension type (pixels or percentage) parameter for height of the chart
		is provided.     		
		NOTE: The same goes for the width of the chart (parameter 'widthDimType').    				
		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
	*#
 	#if($chart.heightDimType)
   	 	heightDimType: '$chart.heightDimType',
   	 	
   	 	#if ($chart.height!='')
   	 		heightInPerc: $chart.height,
   	 	#end
    #end
	
	#if($chart.widthDimType)
    	widthDimType: '$chart.widthDimType',
    	
    	#if ($chart.width!='')
   	 		widthInPerc: $chart.width,
   	 	#end
    #end
	
	#set($showLegend = false)
	#if($chart.LEGEND.show != '')
		#set($showLegend = $chart.LEGEND.show)
	#end
		showLegend: $showLegend ,

	#set($legendPosition = 'top')
	#if($chart.LEGEND.position != '')
		#set($legendPosition = $chart.LEGEND.position)
	#end
		legendPosition: '$legendPosition' ,
		
	#if($chart.style != '' && $chart.style.backgroundColor != '' )
		backgroundColor: '$chart.style.backgroundColor',
	#end
	
	#if(!($chart.TITLE.text.equals("")))
		title : {
			text : "$chart.TITLE.text",
			style: {
    		#foreach($titleStyleName in $chart.TITLE.style.keySet())
    			#set ($titleStyleValue = $chart.TITLE.style[$titleStyleName])
    			#if ($titleStyleName == 'fontWeight' && ($titleStyleValue == 'italic' || $titleStyleValue == 'normal')) 
        			fontStyle: '$titleStyleValue',
				#elseif($titleStyleName == 'fontWeight' && $titleStyleValue == 'underline')
        			textDecoration: 'underline',
				#else		        			
        			$titleStyleName: '$titleStyleValue',
        		#end
    		#end
    		},
		},
	#end
	
	#if(!($chart.SUBTITLE.text.equals("")))
		subtitle : {
			text : "$chart.SUBTITLE.text",
			style: {
    		#foreach($subtitleStyleName in $chart.SUBTITLE.style.keySet())
    			#set ($subtitleStyleValue = $chart.SUBTITLE.style[$subtitleStyleName])
    			#if ($subtitleStyleName == 'fontWeight' && ($subtitleStyleValue == 'italic' || $subtitleStyleValue == 'normal')) 
        			fontStyle: '$subtitleStyleValue',
				#elseif($subtitleStyleName == 'fontWeight' && $subtitleStyleValue == 'underline')
        			textDecoration: 'underline',
				#else		        			
        			$subtitleStyleName: '$subtitleStyleValue',
        		#end
    		#end
    		},
		},
	#end
	
	#if(!($chart.EMPTYMESSAGE.text.equals("")))
		emptyMessage : {
			text : "$chart.EMPTYMESSAGE.text",
			style: {
    		#foreach($emptyMessageStyleName in $chart.EMPTYMESSAGE.style.keySet())
    			#set ($emptyMessageStyleValue = $chart.EMPTYMESSAGE.style[$emptyMessageStyleName])
    			#if ($emptyMessageStyleName == 'fontWeight' && ($emptyMessageStyleValue == 'italic' || $emptyMessageStyleValue == 'normal')) 
        			fontStyle: '$emptyMessageStyleValue',
				#elseif($emptyMessageStyleName == 'fontWeight' && $emptyMessageStyleValue == 'underline')
        			textDecoration: 'underline',
				#else		        			
        			$emptyMessageStyleName: '$emptyMessageStyleValue',
        		#end
    		#end
    		},
		},
	#end
	},
	
	data: {
	    labels: [

	    #foreach($row in $data.rows)
	    	#set ($categoryName = $row.get($categorieColumnsMapped))
	    	#*
	    	#set( $categoryName = $categoryName.replace("\", "\\") )
	    	#set( $categoryName = $categoryName.replace("""", "\""") )
	    	*#
	    	#set( $categoryName = $escapeTool.javascript($categoryName))
	    	
	    	"$categoryName",
	    #end
    	],
    	
	    datasets: [
	    
		#set($seriesIndex = 0)
    	#foreach($valueKey in $seriesMap.keySet())
    		#set($relatedSerie = $seriesMap.get($valueKey))
    		
    		{
    			label: '$relatedSerie.name',
    			
			#set($relatedSerieColor = false)
			#set($relatedSerieColor = $relatedSerie.color)
			#if($relatedSerieColor.equals(""))
				#set($colorIndex = $seriesIndex % $colorPaletteLength)
				#set($colorPaletteItem = $colorPalette.get($colorIndex))
				#set($relatedSerieColor = $colorPaletteItem.value)
		    #end

			#if($relatedSerieColor!="")
				fillColor: '$ChartEngineUtil.hex2Rgb($relatedSerieColor, "0")',
	            strokeColor: '$ChartEngineUtil.hex2Rgb($relatedSerieColor)',
	            pointColor: '$ChartEngineUtil.hex2Rgb($relatedSerieColor)',
	            pointStrokeColor: "#fff",
	            pointHighlightFill: "#fff",
	            pointHighlightStroke: '$ChartEngineUtil.hex2Rgb($relatedSerieColor)',
    		#end
    		#if($relatedSerieColor=="")
    		#set($relatedSerieColor = "#7cb5ec")
				strokeColor: '$ChartEngineUtil.hex2Rgb($relatedSerieColor)',
				pointColor: '$ChartEngineUtil.hex2Rgb($relatedSerieColor)',
    			fillColor: '$ChartEngineUtil.hex2Rgb($relatedSerieColor, "0")',
    			pointStrokeColor: "#fff",
    			pointHighlightFill: "#fff",
	            pointHighlightStroke: '$ChartEngineUtil.hex2Rgb($relatedSerieColor)',
    		#end	
			#set($relatedSerieColName = "$relatedSerie.column"+"_#if($relatedSerie.groupingFunction)$relatedSerie.groupingFunction.toLowerCase()#{else}sum#end")
    	    #set($serieColumnsMapped = $dataColumnsMapper.get($relatedSerieColName))
	            data: [

			#set($relatedSeriePrecision = false)
			#if($relatedSerie.precision && !($relatedSerie.precision.equals("")))
				#set($relatedSeriePrecision = $relatedSerie.precision)
		    #end

            #foreach($row in $data.rows)
		    	#set ($serieValue = $row.get($serieColumnsMapped)) 
		    	#if($relatedSeriePrecision)
		    	#if($serieValue.class.name !="java.lang.String")
		    		'$ChartEngineUtil.roundTo($serieValue.toString(), $relatedSeriePrecision)',
					#else
		    		'$ChartEngineUtil.roundTo($serieValue, $relatedSeriePrecision)',
		    		#end
		    	#else
		    		'$serieValue' ,
		    	#end
		    #end
	            ],
    		},
    		
			#set($seriesIndex = ($seriesIndex + 1))
    	#end
	    ]
	},
	
	#set($genericStyle = {})
	#if($chart.style != '')
		#set($genericStyle = $chart.style)
	#end
	
	options: {   //GLOBAL OPTIONS
	    animation: true,
	
	    // Number - Number of animation steps
	    animationSteps: 60,
	
	    // String - Animation easing effect
	    // Possible effects are:
	    // [easeInOutQuart, linear, easeOutBounce, easeInBack, easeInOutQuad, easeOutQuart, easeOutQuad, easeInOutBounce, easeOutSine, easeInOutCubic,
	    //  easeInExpo, easeInOutBack, easeInCirc, easeInOutElastic, easeOutBack, easeInQuad, easeInOutExpo, easeInQuart, easeOutQuint, easeInOutCirc,
	    //  easeInSine, easeOutExpo, easeOutCirc, easeOutCubic, easeInQuint, easeInElastic, easeInOutSine, easeInOutQuint, easeInBounce, easeOutElastic, easeInCubic]
	    animationEasing: "easeInOutQuad",
	
	    // Boolean - If we should show the scale at all
	    showScale: true,
	
	    // Boolean - If we want to override with a hard coded scale
	    scaleOverride: false,
	
	    // ** Required if scaleOverride is true **
	    // Number - The number of steps in a hard coded scale
	    scaleSteps: null,
	    // Number - The value jump in the hard coded scale
	    scaleStepWidth: null,
	    // Number - The scale starting value
	    scaleStartValue: null,
	
	    // Vertical and horizontal axis base lines
	    scaleLineColor: "rgba(0, 0, 0, 0.8)",
	    scaleLineWidth: 1,
	
	    // Boolean - Whether to show labels on the scale
	    scaleShowLabels: true,
	
	    // Interpolated JS string - can access value
	    scaleLabel: "<%=value%>",
	
	    // Boolean - Whether the scale should stick to integers, not floats even if drawing space is there
	    scaleIntegersOnly: false,
	
	    #set($scaleFontFamily = $genericStyle.fontFamily)
	    #if($scaleFontFamily == "")
		    #set($scaleFontFamily = "Arial")
	    #end
	    // String - Scale label font declaration for the scale label
	    scaleFontFamily: "$scaleFontFamily",
	
	    #set($scaleFontSize = $genericStyle.fontSize.replace("px", ""))
		#if("$scaleFontSize" == "")
		    #set($scaleFontSize = 12)
	    #end
	    
	    ## This creates problem with the position of the chart (without this it is stretched - what we need)!
		## @author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
	    // Number - Scale label font size in pixels
	    scaleFontSize: $scaleFontSize,

	    #set($scaleFontStyle = $genericStyle.fontWeight)
		
		#if($scaleFontStyle == "")
		    #set($scaleFontStyle = "normal")
	    #end
	    
	    // String - Scale label font weight style
	    scaleFontStyle: "$scaleFontStyle",
	
	    #set($scaleFontColor = "#000000")
	    scaleFontColor: "$scaleFontColor",
	
	    ## Before, this value was set to TRUE, but in that case, the width is making problems
	    ## @author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
	    // Boolean - whether or not the chart should be responsive and resize when the browser does.
	    responsive: false,
	
		## Before, this value was set to TRUE, but in that case, the height is making problems
		## @author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
	    // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
	    maintainAspectRatio: false,	    
	
	    // Boolean - Determines whether to draw tooltips on the canvas or not
	    showTooltips: true,
	
	    // Function - Determines whether to execute the customTooltips function instead of drawing the built in tooltips (See [Advanced - External Tooltips](#advanced-usage-custom-tooltips))
	    customTooltips: false,
	
	    // Array - Array of string names to attach tooltip events
	    tooltipEvents: ["mousemove", "touchstart", "touchmove"],
	
	    // String - Tooltip background colour
	    tooltipFillColor: "rgba(0,0,0,0.8)",
	
	    // String - Tooltip label font declaration for the scale label
	    tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
	
	    // Number - Tooltip label font size in pixels
	    tooltipFontSize: 14,
	
	    // String - Tooltip font weight style
	    tooltipFontStyle: "normal",
	
	    // String - Tooltip label font colour
	    tooltipFontColor: "#fff",
	
	    // String - Tooltip title font declaration for the scale label
	    tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
	
	    // Number - Tooltip title font size in pixels
	    tooltipTitleFontSize: 14,
	
	    // String - Tooltip title font weight style
	    tooltipTitleFontStyle: "bold",
	
	    // String - Tooltip title font colour
	    tooltipTitleFontColor: "#fff",
	
	    // Number - pixel width of padding around tooltip text
	    tooltipYPadding: 6,
	
	    // Number - pixel width of padding around tooltip text
	    tooltipXPadding: 6,
	
	    // Number - Size of the caret on the tooltip
	    tooltipCaretSize: 8,
	
	    // Number - Pixel radius of the tooltip border
	    tooltipCornerRadius: 6,
	
	    // Number - Pixel offset from point x to tooltip edge
	    tooltipXOffset: 10,
	
	    // String - Template string for single tooltips
	    ##tooltipTemplate: "<%if (label){%><%=label%>: <%}%><%= value %>",
	    tooltipTemplate: "<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>",
	
	    // String - Template string for multiple tooltips
		multiTooltipTemplate: "<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>" ,
	    ##multiTooltipTemplate: "<%= value %>",
	
	    // Function - Will fire on animation progression.
	    onAnimationProgress: function(){},
	
	    // Function - Will fire on animation completion.
	    onAnimationComplete: function(){},
	    
	    // SPECIFIC OPTIONS (LINE)
	    ///Boolean - Whether grid lines are shown across the chart
	    scaleShowGridLines : true,
	
	    //String - Colour of the grid lines
	    scaleGridLineColor : "rgba(0,0,0,.05)",
	
	    //Number - Width of the grid lines
	    scaleGridLineWidth : 1,
	
	    //Boolean - Whether to show horizontal lines (except X axis)
	    scaleShowHorizontalLines: true,
	
	    //Boolean - Whether to show vertical lines (except Y axis)
	    scaleShowVerticalLines: true,
	
	    //Boolean - Whether the line is curved between points
	    bezierCurve : true,
	
	    //Number - Tension of the bezier curve between points
	    bezierCurveTension : 0.4,
	
	    //Boolean - Whether to show a dot for each point
	    pointDot : true,
	
	    //Number - Radius of each point dot in pixels
	    pointDotRadius : 2,
	
	    //Number - Pixel width of point dot stroke
	    pointDotStrokeWidth : 1,
	
	    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
	    pointHitDetectionRadius : 20,
	
	    //Boolean - Whether to show a stroke for datasets
	    datasetStroke : true,
	
	    //Number - Pixel width of dataset stroke
	    datasetStrokeWidth : 2,
	
	    //Boolean - Whether to fill the dataset with a colour
	    datasetFill : true,
	
	    //String - A legend template
		#set($legendCssStyle = "padding: 6px;opacity: 0.8;")
		#if($chart.LEGEND != "" && $chart.LEGEND.style)
			#if($chart.LEGEND.style.color != '')
				#set($legendCssStyle = $legendCssStyle + "color: " + $chart.LEGEND.style.color + ";")
				#set($legendCssStyle = $legendCssStyle + "border-color: " + $chart.LEGEND.style.color + ";")
			#end
			#if($chart.LEGEND.style.backgroundColor != '')
				#set($legendCssStyle = $legendCssStyle + "background-color: " + $chart.LEGEND.style.backgroundColor + ";")
			#else
				#set($legendCssStyle = $legendCssStyle + "background-color: transparent;")
			#end
			#if($chart.LEGEND.style.fontFamily != '')
				#set($legendCssStyle = $legendCssStyle + "font-family: " + $chart.LEGEND.style.fontFamily + ";")
			#end
			#if($chart.LEGEND.style.fontSize != '')
				#set($legendCssStyle = $legendCssStyle + "font-size: " + $chart.LEGEND.style.fontSize + ";")
			#end
			
			#set($chartLegendFontWeight = $chart.LEGEND.style.fontWeight)
			#if($chartLegendFontWeight != '')
				#if($chartLegendFontWeight == 'normal' || $chartLegendFontWeight == 'bold')
					#set($legendCssStyle = $legendCssStyle + "font-weight: " + $chartLegendFontWeight + ";")
				#elseif($chartLegendFontWeight == 'italic')
					#set($legendCssStyle = $legendCssStyle + "font-style: italic;")
				#elseif($chartLegendFontWeight == 'underline')
					#set($legendCssStyle = $legendCssStyle + "text-decoration: underline;")
				#end
			#end
			
			#if($chart.LEGEND.style.borderWidth != '')
				#set($legendCssStyle = $legendCssStyle + "border-style: solid; border-width: " + $chart.LEGEND.style.borderWidth + "px;")
			#end
		#end
	    
		#set($legendTitle = "")
		
	    legendTemplate : "<div style=\"$legendCssStyle\"> "
    	
    	#if($chart.LEGEND && $chart.LEGEND.TITLE && $chart.LEGEND.TITLE.text)
    			+ "<label "
    		#if($chart.LEGEND.TITLE.style)
				#set($legendTitleCssStyle = "")
				#if($chart.LEGEND.TITLE.style.color != '')
					#set($legendTitleCssStyle = $legendTitleCssStyle + "color: " + $chart.LEGEND.TITLE.style.color + ";")
				#end
				#if($chart.LEGEND.TITLE.style.fontFamily != '')
					#set($legendTitleCssStyle = $legendTitleCssStyle + "font-family: " + $chart.LEGEND.TITLE.style.fontFamily + ";")
				#end
				#if($chart.LEGEND.TITLE.style.fontSize != '')
					#set($legendTitleCssStyle = $legendTitleCssStyle + "font-size: " + $chart.LEGEND.TITLE.style.fontSize + ";")
				#end
				
				#set($chartLegendTitleFontWeight = $chart.LEGEND.TITLE.style.fontWeight)
				#if($chartLegendTitleFontWeight != '')
					#if($chartLegendTitleFontWeight == 'normal' || $chartLegendTitleFontWeight == 'bold')
						#set($legendTitleCssStyle = $legendTitleCssStyle + "font-weight: " + $chartLegendTitleFontWeight + ";")
					#elseif($chartLegendTitleFontWeight == 'italic')
						#set($legendTitleCssStyle = $legendTitleCssStyle + "font-style: italic;")
					#elseif($chartLegendTitleFontWeight == 'underline')
						#set($legendTitleCssStyle = $legendTitleCssStyle + "text-decoration: underline;")
					#end
				#end
				
					+ "style=\"$legendTitleCssStyle\""
	    	#end
				+ " >${chart.LEGEND.TITLE.text}</label>"
    	#end
	    
	    		+ "<ul class=\"<%=name.toLowerCase()%>-legend\">"
	    		+ "<% for (var i=0; i<datasets.length; i++){%>"
	    			+ "<li><span style=\"background-color:<%=datasets[i].pointColor%>\">"
	    				+ "<%if(datasets[i].label){%><%=datasets[i].label%><%}%>"
	    			+ "</span></li>"
	    		+ "<%}%>"
	    		+ "</ul>"
	    	+ "</div>"
	}
}