#set($category = $chart.VALUES.CATEGORY)

#set($dataRows = $data.rows)
#set($dataFields = $data.metaData.fields) ## columns of data table
#set($dataColumnsMapper = {})
#foreach ($dataField in $dataFields) ## conversion column name to internal column name
	#if($dataField.class.name == 'java.util.LinkedHashMap')
		#set($dataFieldHeader = $datasettransformer.setGroupingFunctionToLowerCase($dataField.header))
    	#set($workAroundNoPrint = $dataColumnsMapper.put($dataFieldHeader , $dataField.name))
	#end
#end

#* 	
	For Java class of dataset transformer we need '$dataRows' (raw JSON dataset),
	'$columnsNeeded' (name of the columns for sequence) and $$dataColumnsMapper (metadata)
*#

#set($columnsNeeded = {})

#set($columnCounter = 0)
		
#foreach($value in $category)	
	#set($columnsNeeded[$columnCounter] = $value.name)
	#set($columnCounter = $columnCounter + 1)
#end

#* 
	Convert an array list with the single element into the HashMap so we can 
	use it in a general way, even if we are calling the VM for purpose of
	previewing the SUNBURST chart.
	@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)	
*#
#if($chart.VALUES.SERIE.class.name == 'java.util.ArrayList')
	#set($chart.VALUES.SERIE = $chart.VALUES.SERIE[0])
#end

#set($serieName = $chart.VALUES.SERIE.name)
#set($serie = $chart.VALUES.SERIE)
#set($groupingFunction = $chart.VALUES.SERIE.groupingFunction)

#set($result = $datasettransformer.createTreeChart($columnsNeeded,$serieName,$dataColumnsMapper,$dataRows,$groupingFunction.toLowerCase()))

#set($crossNavigation = '')
#set($crossNavigation = $chart.DRILL)

#set($seriesMap = {}) ## conversion series metadata to map object
#if($serie.class.name == 'java.util.LinkedHashMap')
	#set($workAroundNoPrint = $seriesMap.put($series.name , $serie))
#else
	#foreach($s in $series)
		#set($workAroundNoPrint = $seriesMap.put($serie.name , $s))
	#end
#end

#set($range = $datasettransformer.getRange($dataRows, $dataColumnsMapper, $seriesMap))

#set($categoriesCardinality = $datasettransformer.getCategoriesCardinality($dataRows, $chart.VALUES.CATEGORY, $dataColumnsMapper))

{
	chart: 
	{
    
    	## Additional data needed for cross navigation paramteres	
			
		additionalData:
		{
			categoriesCardinality: $categoriesCardinality,
			range: $range
		},
		
		type: '$chart.type',
		opacMouseOver: '$chart.opacMouseOver',	
		#if($chart.scale)
		scale: $chart.scale,
		#else
		scale: 1,
		#end
		#*
		  Percentage/absolute value type for displaying tooltip and breadcrumb values for slices that are covered with mouse cursor.
		  This parameter contains one of two possible values: percentage or absolute.
		  @author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
	 	*#
		percAbsolSliceValue: '$chart.percAbsolSliceValue',
			
		isCockpit: $chart.isCockpitEngine, 
		
		#*
  			If we are previewing a chart inside a Designer widget in the Cockpit, the 'chart.outcomingEventsEnabled' will be NULL, so we need to check if this is the case.
  			If not providing this check, we will experience rendering problem within the Highcharts Export (value for 'outcomingEventsEnabled' template property will be 
  			'$chart.outcomingEventsEnabled'.
  			@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
  		*#
  		#if($chart.isCockpitEngine=='true' && "$!chart.outcomingEventsEnabled" != "")
  			outcomingEventsEnabled: $chart.outcomingEventsEnabled,
  		#end
		
         #if($chart.height != '' && $chart.isCockpitEngine!="true")
        	height: $chart.height,
        #end
        #*
    		Dimension type (pixels or percentage) parameter for height of the chart
    		is provided. 
    		
    		NOTE: The same goes for the width of the chart (parameter 'widthDimType').
    				
    		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
    	*#
    	
    	
    	#if($chart.heightDimType && $chart.isCockpitEngine!="true")
       	 	heightDimType: '$chart.heightDimType',
       	#else 
      	 	heightDimType: 'pixels',
        #end
        
        #if($chart.width != '' && $chart.isCockpitEngine!="true")
    		width: $chart.width,
    	#end
    	
    	#if($chart.widthDimType && $chart.isCockpitEngine!="true")
        	widthDimType: '$chart.widthDimType',
  	   	#else 
	  	   	widthDimType: 'pixels',
        #end
        
		style:
		{			
			fontFamily: '$chart.style.fontFamily',
			fontSize: '$chart.style.fontSize',				
			backgroundColor: '$chart.style.backgroundColor',	
					
			#if($chart.style.fontWeight == 'italic' || $chart.style.fontWeight == 'normal')
    			fontStyle: '$chart.style.fontWeight',
			#elseif($chart.style.fontWeight == 'underline')
    			textDecoration: '$chart.style.fontWeight',
			#elseif($chart.style.fontWeight == 'bold')		        			
    			fontWeight: '$chart.style.fontWeight',
    		#end
		}
	},
	
	categories: $datasettransformer.getColumnNames($columnsNeeded),
	
	colors: [
    	    
			#*
	 			If user specified more than one color from the color palette
	 			on the Designer when creating the chart, then we have an array
	 			list of elements. Otherwise, we are dealing with a hashmap.
	 			
	 			In the first case, create an array of colors. In the second 
	 			case take the only color user specified and put it as the only
	 			element of the array that we are now creating.
	 			
	 			@modifiedBy: danristo (danilo.ristovski@mht.net)
	 		*#	
			
			#*
				If user specifies at least 2 colors (class name of the structure that hold data
				about colors picked in the color palette of the Designer will in this case be
				LinkedList, instead of LinkedHashMap as in other case - just one element) go 
				into the if-statement. If there are no picked color or there is just one, go
				into the else-statement.
				@author: danristo (danilo.ristovski@mht.net)
			*#
	 		
	 		#if ($chart.COLORPALETTE.COLOR && $chart.COLORPALETTE.COLOR.class.name != 'java.util.LinkedHashMap') 
				
				#foreach($color in $chart.COLORPALETTE.COLOR)
					'$color.value', 
				#end	
						
			#else		
				
				#*
					If user does not specify any color inside the color palette the chart
					will take predefined value for the color (#000000) (else-case).	Otherwise, 
					we will take the single value specified in the palette (if-case).
					@author: danristo (danilo.ristovski@mht.net)
				*#
				
				#if ($chart.COLORPALETTE.COLOR)
					'$chart.COLORPALETTE.COLOR.value'
				#end
				
			#end
    ],
	
	emptymessage:
	{
		text: "$chart.EMPTYMESSAGE.text",		
		
		style:
		{
			align: '$chart.EMPTYMESSAGE.style.align',
			fontFamily: '$chart.EMPTYMESSAGE.style.fontFamily',	
			fontSize: '$chart.EMPTYMESSAGE.style.fontSize',
			color: '$chart.EMPTYMESSAGE.style.color',
					
			#if($chart.EMPTYMESSAGE.style.fontWeight == 'italic' || $chart.EMPTYMESSAGE.style.fontWeight == 'normal')
    			fontStyle: '$chart.EMPTYMESSAGE.style.fontWeight',
			#elseif($chart.EMPTYMESSAGE.style.fontWeight == 'underline')
    			textDecoration: '$chart.EMPTYMESSAGE.style.fontWeight',
			#elseif($chart.EMPTYMESSAGE.style.fontWeight == 'bold')		        			
    			fontWeight: '$chart.EMPTYMESSAGE.style.fontWeight',
    		#end	
		}
	},
	tooltip: {
		#if($chart.TOOLTIP)
		    #if($chart.TOOLTIP.borderWidth)
		    	borderWidth: $chart.TOOLTIP.borderWidth,
		    #end
		    
		    #if($chart.TOOLTIP.borderRadius)
		    	borderRadius: $chart.TOOLTIP.borderRadius,
		    #end
		   
		  	#if ($serie.TOOLTIP.backgroundColor!="")
		        backgroundColor: '$serie.TOOLTIP.backgroundColor',
		    #else
		    	backgroundColor: '#FCFFC5',	## default background color for the serie tooltip
			#end
				
			#if ($serie.TOOLTIP.style.color != '')
				color: '$serie.TOOLTIP.style.color' ,
			#end
				
			#if ($serie.TOOLTIP.style.align != '')
				align: '$serie.TOOLTIP.style.align' ,
			#end
				
			#if ($serie.TOOLTIP.style.fontFamily && $serie.TOOLTIP.style.fontFamily != '')
				fontFamily: '$serie.TOOLTIP.style.fontFamily' ,
			#end
				
			#if ($serie.TOOLTIP.style.fontWeight != '')
				fontWeight: '$serie.TOOLTIP.style.fontWeight' ,
			#end
				
			#if ($serie.TOOLTIP.style.fontSize != '')
				fontSize: '$serie.TOOLTIP.style.fontSize' ,
			#end
		#end	
	},
	
	title:
	{
		text: "$chart.TITLE.text",		
		
		style:
		{
			fontFamily: '$chart.TITLE.style.fontFamily',
			fontSize: '$chart.TITLE.style.fontSize',
			color: '$chart.TITLE.style.color',
			align: '$chart.TITLE.style.align',
					
			#if($chart.TITLE.style.fontWeight == 'italic' || $chart.TITLE.style.fontWeight == 'normal')
    			fontStyle: '$chart.TITLE.style.fontWeight',
			#elseif($chart.TITLE.style.fontWeight == 'underline')
    			textDecoration: '$chart.TITLE.style.fontWeight',
			#elseif($chart.TITLE.style.fontWeight == 'bold')		        			
    			fontWeight: '$chart.TITLE.style.fontWeight',
    		#end
		}
	},
	
	subtitle:
	{	
		text: "$chart.SUBTITLE.text",		
		
		style:
		{
			fontFamily: '$chart.SUBTITLE.style.fontFamily',
			fontSize: '$chart.SUBTITLE.style.fontSize',
			color: '$chart.SUBTITLE.style.color',
			align: '$chart.SUBTITLE.style.align',
					
			#if($chart.SUBTITLE.style.fontWeight == 'italic' || $chart.SUBTITLE.style.fontWeight == 'normal')
    			fontStyle: '$chart.SUBTITLE.style.fontWeight',
			#elseif($chart.SUBTITLE.style.fontWeight == 'underline')
    			textDecoration: '$chart.SUBTITLE.style.fontWeight',
			#elseif($chart.SUBTITLE.style.fontWeight == 'bold')		        			
    			fontWeight: '$chart.SUBTITLE.style.fontWeight',
    		#end	
			
		}
	},
	
	#* 	Something completely new that define through XML template
		that we would like to have for the SUNBURST chart.  *# 	
	tip:
	{
		text: "$chart.TIP.text",				
				
		style:
		{	
			#foreach($styleName in $chart.TIP.style.keySet())
				#set ($styleValue = $chart.TIP.style[$styleName])
    			#if ($styleName == 'fontWeight' && ($styleValue == 'italic' || $styleValue == 'normal')) 
        			fontStyle: '$styleValue',
				#elseif($styleName == 'fontWeight' && $styleValue == 'underline')
        			textDecoration: 'underline',
				#else		        			
        			$styleName: '$styleValue',
        		#end
			#end
			
		},
		
	},
	labels: {
			#if($chart.LABELS && $chart.LABELS.showLabels)
			showLabels: $chart.LABELS.showLabels,
			style: {
				color: '$chart.LABELS.style.color',
				fontSize: '$chart.LABELS.style.fontSize',
				fontFamily: '$chart.LABELS.style.fontFamily',
				
				#if($chart.LABELS.style.fontWeight == 'italic' || $chart.LABELS.style.fontWeight == 'normal')
    			fontStyle: '$chart.LABELS.style.fontWeight',
				#elseif($chart.LABELS.style.fontWeight == 'underline')
    			textDecoration: '$chart.LABELS.style.fontWeight',
				#elseif($chart.LABELS.style.fontWeight == 'bold')		        			
    			fontWeight: '$chart.LABELS.style.fontWeight',
    			#end
				fontSize: '$chart.LABELS.style.fontSize',
			}
			#else
			showLabels: false,
			style: {
				color: '#FFF',
				fontSize: '8px',
				fontWeight: 'normal',
				fontFamily: 'Arial',
			}
			#end
		},
		
	legend: {
			#if($chart.LEGEND && $chart.LEGEND.showLegend)
			showLegend: $chart.LEGEND.showLegend,
			#else
			showLegend: false,
			#end
		},
		
	#*
		Remove credits from the TREEMAP chart (the "Highcharts.com" link at the 
		bottom right side of the chart).
		@author: danristo (danilo.ristovski@mht.net)
	 *# 
	credits: 
	{ 
    	enabled: false
    },
	
	#* 	Something completely new that define through XML template
		that we would like to have for the SUNBURST chart.  *# 	
	toolbar:
	{			
		style:
		{	
			position: '$chart.TOOLBAR.style.position',
			##height: '$chart.TOOLBAR.style.height',
			##width: '$chart.TOOLBAR.style.width',
			spacing: '$chart.TOOLBAR.style.spacing',
			tail: '$chart.TOOLBAR.style.tail',				
			percFontColor: '$chart.TOOLBAR.style.percFontColor',		
			fontFamily: '$chart.TOOLBAR.style.fontFamily',		
			fontSize: '$chart.TOOLBAR.style.fontSize',
			
			#if($chart.TOOLBAR.style.fontWeight == 'italic' || $chart.TOOLBAR.style.fontWeight == 'normal')
    			fontStyle: '$chart.TOOLBAR.style.fontWeight',
			#elseif($chart.TOOLBAR.style.fontWeight == 'underline')
    			textDecoration: '$chart.TOOLBAR.style.fontWeight',
			#elseif($chart.TOOLBAR.style.fontWeight == 'bold')		        			
    			fontWeight: '$chart.TOOLBAR.style.fontWeight',
    		#end
		}
	},
	
	#*
	 TODO: Cross Navigation for Sunburst Highcharts
	*#
	crossNavigation:
	{	
	    #if($crossNavigation != '') 
						crossNavigationDocumentName: '$crossNavigation.document',
						crossNavigationDocumentParams: [
							## if single PARAM node, not array
							#if($crossNavigation.PARAM_LIST.PARAM.class.name == "java.util.LinkedHashMap")
								#set($param = $crossNavigation.PARAM_LIST.PARAM)
								{ name: '$param.name', urlName:'$param.parameterUrlName', type: '$param.type', value: '$param.value' }
							#else
								##Array of parameters
								
								#foreach($param in $crossNavigation.PARAM_LIST.PARAM)
								{ name: '$param.name', urlName:'$param.parameterUrlName', type: '$param.type', value: '$param.value' },
								#end
							#end
						],
						#end
	},	
	
	#*
		Since we cannot have more than one series items for the SUNBURST chart, we can specify a single parameter customization 
		(for only one series item). [JIRA 1060 and 1061]
		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
	*#
	series: {
	
		## Added property for the cross-navigation output parameters managing on the front-end. (author: danristo)
		name: '$serieName',
	
		#*
			The scaling factor of the current series item can be empty (no scaling - pure (original) value) or "k" (kilo), "M" (mega), 
			"G" (giga), "T" (tera), "P" (peta), "E" (exa). That means we will scale our values according to this factor and display 
			these abbreviations (number suffix) along with the scaled number. [JIRA 1060 and 1061]
			@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
		*#
		#if($chart.VALUES.SERIE.scaleFactor && "$!chart.VALUES.SERIE.scaleFactor" != "")
			scaleFactor: '$chart.VALUES.SERIE.scaleFactor',
		#else
			scaleFactor: 'empty',
		#end
		
		precision: '$chart.VALUES.SERIE.precision',
		prefixChar: '$chart.VALUES.SERIE.prefixChar',
		postfixChar: '$chart.VALUES.SERIE.postfixChar'
	
	},
	
	data:
	[
	 	$result
	 	
	]
	
}