#set($dataFields = $data.metaData.fields) ## columns of data table
#set($dataColumnsMapper = {}) 
#foreach ($dataField in $dataFields) ## conversion column name to internal column name
	#if($dataField.class.name == 'java.util.LinkedHashMap')
		#set($dataFieldHeader = $datasettransformer.setGroupingFunctionToLowerCase($dataField.header))
		#if(!$dataColumnsMapper.get($dataFieldHeader.toLowerCase()))
    	#set($workAroundNoPrint = $dataColumnsMapper.put($dataFieldHeader.toLowerCase() , $dataField.name))
    	#end
	#end
#end
#set($rows = $data.rows) ## data in table rows
#if(($chart.groupCategories =='true' || $chart.groupSeriesCateg =='true') && $chart.isCockpitEngine == 'false')
#set($categorieColumns = $chart.VALUES.CATEGORY.get(0))
#else
#set($categorieColumns = $chart.VALUES.CATEGORY) ## metadata related to categories
#end
#if($categorieColumns.get("drillOrder"))
#set($drillOrder = $categorieColumns.get("drillOrder")) ## metadata related to categories
	#if($drillOrder[$categorieColumns.groupby].orderColumn && $categorieColumns.groupby && $drillOrder[$categorieColumns.groupby].orderColumn != $categorieColumns.groupby)	
	#set($orderColumnDataValues = $datasettransformer.prepareDataForOrderingColumnForBar($rows,$dataFields,$drillOrder,$categorieColumns.groupby))
	#end
	#if($orderColumnDataValues)
	#set($orderColumnDataValuesEscaped = $datasettransformer.escapeStringForJavascript($orderColumnDataValues))
	#end
	
#end
#if($categorieColumns.name=="")
#set($categorieColumns.name = $categorieColumns.column)
#end
#if($chart.isCockpitEngine=="true")
#set($categorieColumnsMapped = $dataColumnsMapper.get($categorieColumns.name.toLowerCase())) ## "product" -> "column_3"
#end
#if($chart.isCockpitEngine!="true")
#set($categorieColumnsMapped = $dataColumnsMapper.get($categorieColumns.column.toLowerCase())) ## "product" -> "column_3"
#end
#set($isDateTime = false)
#if($chart.dateTime && $chart.dateTime=="true")
	#if($chart.categoryDate)
		#set($categoryDate = $chart.categoryDate)
		#if($chart.categoryDate==$categorieColumns.name)
			#set($isDateTime = true)
		#end
	#else
		#set($categoryDate = $categorieColumns.name)
		#set($isDateTime = true)
	#end
#end 
#set($datetype = "string")
#foreach ($dataField in $dataFields)
	#if($dataField.class.name == 'java.util.LinkedHashMap')
		#if($dataField.header==$categoryDate && $dataField.type == "date")
			#if($dataField.subtype)
				#set($datetype = "timestamp")
			#else
				#set($datetype = "simpledate")
			#end	
		#end
	#end
#end
#set($xAxisMap = $datasettransformer.getXAxisMap($categorieColumns, $categoryDate))
#set($enableDrilldown = false)
#set($drillable = "false")
#set($cliccable = "false")
#if($chart.drillable)
	#set($drillable = $chart.drillable)
#end
#if($chart.cliccable)
	#set($cliccable = $chart.cliccable)
#end
#if($chart.groupCategories)
	#if($categorieColumns.groupby != ''  && $chart.groupCategories =='false')
		#set($enableDrilldown = true)
	#end
#end
#if(!$chart.groupCategories)
#set($chart.groupCategories ='false')
	#if($categorieColumns.groupby != ''  && $chart.groupCategories =='false')
		#set($enableDrilldown = true)
	#end
#end
#set($series = $chart.VALUES.SERIE) ## metadata related to series
#if($series.size()==1)
#set($yaxisName= $series.get(0).name)
#else
#set($yaxisName= "")
#end
#set($seriesMap = {}) ## conversion series metadata to map object
#if($chart.groupSeriesCateg && $chart.groupSeriesCateg == 'true')
#if($chart.groupedSerie)
#set($groupedSerie = $chart.groupedSerie)
#else
#if($series.get(0))
#set($groupedSerie = $series.get(0).column)
#else
#set($groupedSerie = $series.column)
#end
#end
#end
#if($series.class.name == 'java.util.LinkedHashMap')
	#set($workAroundNoPrint = $seriesMap.put($series.name , $series))
	#if($series.column == $groupedSerie)
		#set($groupedSerie = "$series.name.toLowerCase()"+"_"+"$series.groupingFunction.toLowerCase()")
	#end
#else
	#set($serieKeyFeed = 0)
	#foreach($serie in $series)	
		#set($serieMapKey = $serie.column + '_' + $serieKeyFeed)
		#set($workAroundNoPrint = $seriesMap.put($serieMapKey , $serie))
		
		#set($serieKeyFeed = $serieKeyFeed + 1)
		
		#if($serie.column == $groupedSerie)
		
		#set($groupedSerie = "$serie.name.toLowerCase()"+"_"+"$serie.groupingFunction.toLowerCase()")
		
		#end
		
	#end
#end

#set($range = $datasettransformer.getRange($rows, $dataColumnsMapper, $seriesMap))
#set($categoriesCardinality = $datasettransformer.getCategoriesCardinality($rows, $chart.VALUES.CATEGORY, $dataColumnsMapper))

#set($seriesMapGroupingFunction = {}) 
#foreach($serie in $series)
	
		#set($withgroup = "$serie.name"+"_"+"$serie.groupingFunction.toLowerCase()")
		#set($workAroundNoPrint = $seriesMapGroupingFunction.put($withgroup, $serie))
		
		
	#end
#if($chart.isCockpitEngine && $chart.isCockpitEngine!="")
	#set($isCockpit = $chart.isCockpitEngine)
#else
	#set($isCockpit = false)
#end
{
	#set($drilldownEnabledFlag = false)
	
	#if($enableDrilldown || $crossNavigation != '')
		#set($drilldownEnabledFlag = true)
	#end
	
	meta: {
		drilldownEnabled: $drilldownEnabledFlag,
	},

	#*
		Spread the chart over almost entire free space of the RADAR chart.
		[KNOWAGE-1112 JIRA ISSUE]
		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
	*#	
	#if ($chartType == "radar")	
		pane: {
	    	size: '90%',
	    },	    
    #end

    chart: {
   
    
    	## Additional data needed for cross navigation paramteres	
			 
		additionalData:
		{
			dateTime: $isDateTime,
			datetype: '$datetype',
			cliccable: $cliccable,
			drillable: $drillable,
			drillableChart: $enableDrilldown,
			isCockpit: $isCockpit,
			categoryColumn: '$categorieColumns.column',
			categoryGroupBy: '$categorieColumns.groupby',
			categoryGroupByNamens: '$categorieColumns.groupbyNames',
			categoryName: '$categorieColumns.name',  
			#if( $categorieColumns.orderColumn && $categorieColumns.orderColumn != '' ) 
         			categoryOrderColumn: '$categorieColumns.orderColumn',
         	#end
				#if( $categorieColumns.orderType && $categorieColumns.orderType != '' ) 
         			categoryOrderType: '$categorieColumns.orderType',
         	#end		
			
			#if($orderColumnDataValues && $orderColumnDataValuesEscaped)
			orderColumnDataValues: '$orderColumnDataValuesEscaped',
			#end
			
			categoriesCardinality: $categoriesCardinality,
			range: $range
			 
		},
    
    	#*
    		The zoom in option for BAR and LINE charts. User will be able to zoom in on either of those two chart types
    		by both axes ('x' and 'y'). [KNOWAGE-1110 JIRA ISSUE]
    		
    		NOTE: This property will work only for BAR and LINE, since for the polar charts, the Highchart disabled it
    		(reference: http://stackoverflow.com/questions/25320940/highcharts-spider-web-chart-questions).
    		
    		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
    	*#
    	#if ($chartType != "radar")
    		zoomType: 'xy',
    	#end 
    	panning: true,
    	#set($chartTypeToPrint = 'column')
    	
    	#if($chartType == 'line' || $chartType == 'radar')
    		#set($chartTypeToPrint = 'line')
    	#end
    	
    	##marginRight:40,
    	
    	#*
    		Commented on 19.12: KNOWAGE-327 ISSUE
    	
	    	## I think this could be useful (danristo) !!!
	    	#if ($chartType != 'radar')
	    		marginRight: 110,
			#end
		*#
    
        type: '$chartTypeToPrint',
        
    	#if($chartType == 'radar')
    		polar: true,
    	#end
    	
    	##  @author: radmila.selakovic@mht.net
		##  adding options for 3D
		#if($chart.show3D)
	    		options3d: {
	                enabled: $chart.show3D,
	                alpha:  $chart.alpha,
	                beta:  $chart.beta,
	                depth:  $chart.depth,
	                viewDistance:  $chart.viewDistance
	            },
    	
    	#end
    	#if(!$chart.show3D)
	    	#if($chartType == 'column' || $chartType == 'bar')
	    		options3d: {
	                enabled: false,
	                alpha:  0,
	                beta:  0,
	                depth:  0,
	                viewDistance:  0
	            },
	    	#end
    	
    	#end
        backgroundColor: '$chart.style.backgroundColor', ##outer chart background
        
        #if($chart.orientation == 'horizontal' && $chartTypeToPrint != 'radar')
        	inverted: true,
        #end
          #if(!$exportWebApp)
        #if($chart.height != '' && $chart.isCockpitEngine!="true")
        	height: $chart.height,
        #end
        
        #*
    		Dimension type (pixels or percentage) parameter for height of the chart
    		is provided.     		
    		NOTE: The same goes for the width of the chart (parameter 'widthDimType').    				
    		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
    	*#
     	#if($chart.heightDimType && $chart.isCockpitEngine!="true")
       	 	heightDimType: '$chart.heightDimType',
       	#else 
      	 	heightDimType: 'pixels',
        #end
        
        #if($chart.width != '' && $chart.isCockpitEngine!="true")
    		width: $chart.width,
    	#end
    	
    	#if($chart.widthDimType && $chart.isCockpitEngine!="true")
        	widthDimType: '$chart.widthDimType',
  	   	#else 
	  	   	widthDimType: 'pixels',
        #end
    	#end
    	#*
        	Remove border around the chart if this property is set to true.
        	@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
        *#
        #if ($chart.borderVisible == false)
	        plotBackgroundColor: null,
	        plotBorderWidth: null,
	        plotShadow: false,
        #end
        
        borderColor: '$chart.style.backgroundColor',
        
    	style:{
    		#foreach($styleName in $chart.style.keySet())
    			#set ($chartStyleValue = $chart.style[$styleName])
    			#if ($styleName == 'fontWeight' && ($chartStyleValue == 'italic' || $chartStyleValue == 'normal')) 
        			fontStyle: '$chartStyleValue',
				#elseif($styleName == 'fontWeight' && $chartStyleValue == 'underline')
        			textDecoration: 'underline',
				#else		        			
        			$styleName: '$chartStyleValue',
        		#end
    		#end
    	},
    	
    	#*
    		If the web application that calls the VM is Highcharts Export
    		we should not provide this information (property 'events').
    		
    		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
    	*#
    	#if($chart.type.toUpperCase() != 'RADAR' && ($chart.isCockpitEngine=="true" || ($drilldownEnabledFlag && $exportWebApp==false)))
	    	#if($chart.isCockpitEngine=="true" || $enableDrilldown) 
		    events: {
				drilldown: scope.chartInitializer.handleDrilldown,
				drillup: scope.chartInitializer.handleDrillup
		    },
		    #end
	    #end
	    
	    ## NOTE (TOOLTIP PROBLEM)
	    #*events: {
        load: function() {
          chart = this;
          this.myTooltip = new Highcharts.Tooltip(this, this.options.tooltip);
          //this.tooltip.label.element.remove();
        }
      }*#
    },
    
    #*
    	Handle the situation in which there are no colors inside the color palette as
    	the Highcharts library expects.    		
    	@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
    *#
   	#if("$!chart.COLORPALETTE"!="" && (($chart.COLORPALETTE!="" && $chart.COLORPALETTE.class.name == 'java.lang.String') || 
   		($chart.COLORPALETTE.class.name == 'java.util.LinkedHashMap' && "$!chart.COLORPALETTE.COLOR"!="" && $chart.COLORPALETTE.COLOR.size()>0)))
    colors: [
    	
    	## @modifiedBy: danristo (danilo.ristovski@mht.net)
    	
    	#if ($chart.type.toUpperCase() != 'RADAR')
    		#if ($chart.COLORPALETTE.COLOR && $chart.COLORPALETTE.COLOR.class.name != 'java.util.LinkedHashMap') 
				
			#foreach($color in $chart.COLORPALETTE.COLOR)
				'$color.value', 
			#end
						
			#else		
				
				#if ($chart.COLORPALETTE.COLOR)
					'$chart.COLORPALETTE.COLOR.value',
				#else
					'#518BC6',
				#end
				
			#end
		#else
			#*
	 			If user specified more than one color from the color palette
	 			on the Designer when creating the chart, then we have an array
	 			list of elements. Otherwise, we are dealing with a hashmap.
	 			
	 			In the first case, create an array of colors. In the second 
	 			case take the only color user specified and put it as the only
	 			element of the array that we are now creating.
	 			
	 			@modifiedBy: danristo (danilo.ristovski@mht.net)
	 		*#	
	 			
			#*#if ($chart.COLORPALETTE.COLOR.class.name == 'java.util.ArrayList')
				#foreach($color in $chart.COLORPALETTE.COLOR)
					'$color.get('value')',			
				#end			
			#else
				'$chart.COLORPALETTE.COLOR.value',
			#end	*#
			
			#*
				If user specifies at least 2 colors (class name of the structure that hold data
				about colors picked in the color palette of the Designer will in this case be
				LinkedList, instead of LinkedHashMap as in other case - just one element) go 
				into the if-statement. If there are no picked color or there is just one, go
				into the else-statement.
				@author: danristo (danilo.ristovski@mht.net)
			*#
	 		
	 		#if ($chart.COLORPALETTE.COLOR && $chart.COLORPALETTE.COLOR.class.name != 'java.util.LinkedHashMap') 
				
				#foreach($color in $chart.COLORPALETTE.COLOR)
					'$color.value', 
				#end	
						
			#else		
				
				#*
					If user does not specify any color inside the color palette the chart
					will take predefined value for the color (#000000) (else-case).	Otherwise, 
					we will take the single value specified in the palette (if-case).
					@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
				*#
				
				#if ($chart.COLORPALETTE.COLOR)
					'$chart.COLORPALETTE.COLOR.value',
				#else
					'#518BC6'
				#end
				
			#end
		#end
			
		"#7cb5ec", "#434348", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"
		
    ],
    #else
    	colors: ["#7cb5ec", "#434348", "#90ed7d", "#f7a35c", "#8085e9", "#f15c80", "#e4d354", "#2b908f", "#f45b5b", "#91e8e1"],
	#end
    title: {
       
        text: "$chart.TITLE.text",
       
        #set ($titleAlign = $chart.TITLE.style.align)
        #if ($titleAlign != '' )
        
        	#if ($titleAlign == 'left')
        	x: 70,
        	#elseif ($titleAlign == 'right')
        	x: -70,
        	#end
        
        align: '$titleAlign',
        #end
        
        style:{
        #foreach($styleName in $chart.TITLE.style.keySet())
        	#set ($axisTitleStyle = $chart.TITLE.style[$styleName])
    		#if ($styleName == 'fontWeight' && ($axisTitleStyle == 'italic' || $axisTitleStyle == 'normal'))
    			fontStyle: '$axisTitleStyle',
			#elseif($styleName == 'fontWeight' && $axisTitleStyle == 'underline')
    			textDecoration: 'underline',
			#else		        			
    			$styleName: '$axisTitleStyle',
    		#end
		#end
	    }
    },
    
    #if($chart.SUBTITLE.text != '')
    subtitle: {
        text: "$chart.SUBTITLE.text",
        
        #set ($subtitleAlign = $chart.SUBTITLE.style.align)
        #if ($subtitleAlign != '' )
        
        	#if ($subtitleAlign == 'left')
        	x: 70,
        	#elseif ($subtitleAlign == 'right')
        	x: -70,
        	#end
        
        align: '$subtitleAlign',
        #end
        
        style:{
        #foreach($styleName in $chart.SUBTITLE.style.keySet())
        	#set ($axisSubtitleStyle = $chart.SUBTITLE.style[$styleName])
    		#if ($styleName == 'fontWeight' && ($axisSubtitleStyle == 'italic' || $axisSubtitleStyle == 'normal'))
    			fontStyle: '$axisSubtitleStyle',
			#elseif($styleName == 'fontWeight' && $axisSubtitleStyle == 'underline')
    			textDecoration: 'underline',
			#else		        			
    			$styleName: '$axisSubtitleStyle',
    		#end
		#end
		}
    },
    #end
	 
	#if($chart.LEGEND.style.borderWidth != '')
    	#set($borderWidth = $chart.LEGEND.style.borderWidth)
    #end
	 
    #*
    	The logic for handling data needed for rendering of the chart.    	
    	@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
    *#
    #if ($chart.LEGEND.show != '' && ($chart.LEGEND.show == 'true' || $chart.LEGEND.show == true))
	     
	    #if ($chart.LEGEND.position == "")      
		 	
		 	legend: 
		 	{
			#if($chart.LEGEND.showCheckboxes && $chart.LEGEND.showCheckboxes==true )
			itemDistance: 0,
    			symbolPadding: 0,
			#end
		        enabled: true,
		        align: 'center', 
		        verticalAlign: 'bottom',
		        layout: 'horizontal',
		    
	    #end
	    
	    #if ($chart.LEGEND.position == "bottom")
	  
		    legend: 
		    {
			#if($chart.LEGEND.showCheckboxes && $chart.LEGEND.showCheckboxes==true )
			itemDistance: 0,
    			symbolPadding: 0,
			#end
	            enabled: true,
	            align: 'center',
	            verticalAlign: '$chart.LEGEND.position', 
	            layout: 'horizontal',
		    
	 	#end
	 	
	 	#if ($chart.LEGEND.position == "top")
	 	
	 		#*
		    	Take the size of the font that is used for the chart's title 
		    	and subtitle. We will use this for determining how much we
		    	should move the top legend downwards (towards the chart itself).
		    *#
		    #set($titleFontSize = $chart.TITLE.style.fontSize)
		    #set($subtitleFontSize = $chart.SUBTITLE.style.fontSize)
		    #set($titleText = $chart.TITLE.text)
		    #set($subtitleText = $chart.SUBTITLE.text)
		    
		    #set($totalDistanceLegend = 0)
		    
		    #if ($titleText != "")
		    
			    #*
					Take only numeric value from the font size parameter (that is 
					actually the string in this moment. 					
					@author Danilo Ristovski (danristo, danilo.ristovski@mht.net) 
				*#
			    #if ($titleFontSize != "")
				    #foreach ($element in $titleFontSize.split("px"))  
				    	#set($titleFontSize = $element)
					#end				
				#else
					#set($titleFontSize = "15")
				#end
				
			#else 		
				
		    	#set($titleFontSize = "0")
		    					
			#end
			
			#if ($subtitleText != "")
		    
			    #*
					Take only numeric value from the font size parameter (that is 
					actually the string in this moment. 					
					@author Danilo Ristovski (danristo, danilo.ristovski@mht.net) 
				*#
			    #if ($subtitleFontSize != "")
				    #foreach ($element in $subtitleFontSize.split("px"))  
				    	#set($subtitleFontSize = $element)
					#end				
				#else
					#set($subtitleFontSize = "15")
				#end
				
			#else 
				
				#set($subtitleFontSize = "0")
				
			#end
		   
		 	#*
				Convert chart's title and subtitle heights to Integer.				
				@author Danilo Ristovski (danristo, danilo.ristovski@mht.net) 
			*#
		    #set($intTitleFontSize = 0)
		    #set($intSubtitleFontSize = 0)
		    #set($intBorderWidth = 0)
			#set($Integer1 = 0)
			#set($Integer2 = 0)
			#set($Integer3 = 0)
			#set($intTitleFontSize = $Integer1.parseInt($titleFontSize))		
			#set($intSubtitleFontSize = $Integer2.parseInt($subtitleFontSize))
			
			## If the parameter is NOT NULL
			#if ("$!borderWidth" != "")
				#set($intBorderWidth = $Integer3.parseInt($chart.LEGEND.style.borderWidth))
			#end
		
			#if ($titleText == "" && $subtitleText == "")
				#set($offsetFromTitleSubtitle = 0)
			#else
				#set($offsetFromTitleSubtitle = 15)
			#end		
		
			#*
				Append the offset to the total height of the chart's title and subtitle
				so it can have always the same distance from those two chart elements
				(no matter what is the size of title and subtitle).				
				@author Danilo Ristovski (danristo, danilo.ristovski@mht.net) 
			*#
			#set($totalDistanceLegend  = ($intTitleFontSize + $intSubtitleFontSize + $intBorderWidth) + $offsetFromTitleSubtitle)
				 	
	 		legend: 
		    {
			#if($chart.LEGEND.showCheckboxes && $chart.LEGEND.showCheckboxes==true )
			itemDistance: 0,
    			symbolPadding: 0,
			#end
	          	enabled: true,
	            align: 'center',
	            verticalAlign: '$chart.LEGEND.position', 
	            layout: 'horizontal',
	          	y: $totalDistanceLegend,
		    
	 	#end
	        
	 	#if ($chart.LEGEND.position == "right" || $chart.LEGEND.position == "left")      
		 	
		 	legend: 
		 	{
			#if($chart.LEGEND.showCheckboxes && $chart.LEGEND.showCheckboxes==true )
			itemDistance: 0,
    			symbolPadding: 0,
			#end
		 		enabled: true,
		        align: '$chart.LEGEND.position', 
		        verticalAlign: 'middle',
		        layout: 'vertical',
		    
	    #end
	    		
			    #if($chart.LEGEND.style.backgroundColor != '')
		        	backgroundColor: '$chart.LEGEND.style.backgroundColor',
			    #end
			    
		        #if($chart.LEGEND.style.borderWidth != '')
		        	borderWidth: $chart.LEGEND.style.borderWidth,
			    #end
			    
		        #if($chart.LEGEND.style.disabledColor)
		        itemHiddenStyle:
		        {
		        	color: '$chart.LEGEND.style.disabledColor', 
		        },
		        #end
		        itemStyle: 
		        { 
		        	color: '$chart.LEGEND.style.color', 
		        	
		        	fontSize: '$chart.LEGEND.style.fontSize', 
		        	
		        	#if ($chart.LEGEND.style.fontFamily != '')
		        		fontFamily: '$chart.LEGEND.style.fontFamily',
		        	#end
		        	
		        	#if ($chart.LEGEND.style.fontWeight == 'italic')
		        		fontStyle: 'italic',
		        	#elseif ($chart.LEGEND.style.fontWeight == 'underline')
		        		textDecoration: 'underline',
		        	#else
		        		fontWeight: '$chart.LEGEND.style.fontWeight',
		        	#end
		        },
		        #if('$!chart.LEGEND.TITLE' != "" && '$chart.LEGEND.TITLE'!='')
		        title:
		        {   
		            #if('$chart.LEGEND.TITLE.text'!='')
		        		text:"$chart.LEGEND.TITLE.text",
		        	#end
		        	style:
		        	{	
		            #if ($chart.LEGEND.TITLE.style.color != '')
		        		color: '$chart.LEGEND.TITLE.style.color',
		            #end
		        	##if ($chart.LEGEND.TITLE.style.align != '')
		        	##	align: '$chart.LEGEND.TITLE.style.align',
		            ##end
		            #if ($chart.LEGEND.TITLE.style.fontSize != '')	
		        		fontSize: '$chart.LEGEND.TITLE.style.fontSize', 
		        	#end
		        	#if ($chart.LEGEND.TITLE.style.fontFamily != '')
		        		fontFamily: '$chart.LEGEND.TITLE.style.fontFamily',
		        	#end
		        	
		        	#if ($chart.LEGEND.TITLE.style.fontWeight == 'italic')
		        		fontStyle: 'italic',
		        	#elseif ($chart.LEGEND.TITLE.style.fontWeight == 'underline')
		        		textDecoration: 'underline',
		        	#else
		        		fontWeight: '$chart.LEGEND.TITLE.style.fontWeight',
		        	#end
		        	}	
		        }
		      #end  
		        
        	},
	    
	#else
		
		#* 
			If legend is disabled this JSON property ('enabled') should be false.			
			@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)			
		*#
		legend:
		{
		
			enabled: false,
		},
	    
    #end
    
    #*
    legend: {
	    #if ($chart.LEGEND.show != '' && $chart.LEGEND.show == 'false')
	    enabled: false,
	    #end
	    
        #if ($chart.LEGEND.layout != '' )
        layout: '$chart.LEGEND.layout',
        #end
        
        #if ($chart.LEGEND.position != '' )
        verticalAlign: '$chart.LEGEND.position',
        #end
        
        #if ($chart.LEGEND.position != '' )
        align: '$chart.LEGEND.style.align',
        #end
        
        #if ($chart.LEGEND.floating != '')
        floating: $chart.LEGEND.floating,
        #end
        
    	#if($chart.LEGEND.floating == 'true')
    	
	        #if($chart.LEGEND.x != '')
	        x: $chart.LEGEND.x,
		    #end
	        
	        #if($chart.LEGEND.y != '')
	        y: $chart.LEGEND.y,
	    	#end
    	
    	#end
        
        #if($chart.LEGEND.style.backgroundColor != '')
        backgroundColor: '$chart.LEGEND.style.backgroundColor',
	    #end
	    
        #if($chart.LEGEND.style.borderWidth != '')
        borderWidth: $chart.LEGEND.style.borderWidth,
	    #end
	    
        itemStyle: { 
        	color: '$chart.LEGEND.style.color', 
        	fontSize: '$chart.LEGEND.style.fontSize', 
        	#if ($chart.LEGEND.style.fontWeight == 'italic')
        	fontStyle: 'italic',
        	#elseif ($chart.LEGEND.style.fontWeight == 'underline')
        	textDecoration: 'underline',
        	#else
        	fontWeight: '$chart.LEGEND.style.fontWeight',
        	#end
        }
    },*#

    ## Axes selection
    #set($axisList = $chart.AXES_LIST.AXIS)
	
    #set($xAxisList = {}) ## X Axises list container
    #set($yAxisList = {}) ## Y Axises list container
    #set($xAxisPositions = {}) ## X Axises integer positions list, for series references
    #set($yAxisPositions = {}) ## Y Axises integer positions list, for series references
    #set($xAxisCounter = 0) 
    #set($yAxisCounter = 0) 
    #set($axisFactorScale = $axisList.get(0).scaleFactor)
  
    #foreach($axis in $axisList)
	 	#if($axis.type == 'Category')
	 		#set($workAroundNoPrint = $xAxisList.put($axis.alias , $axis))
	 		#set($workAroundNoPrint = $xAxisPositions.put($axis.alias , $xAxisCounter))
	 		
	 		#set($xAxisCounter = $xAxisCounter + 1)
	 	#end
	 	
	 	#if($axis.type == 'Serie')
	 		#if(($chartType == 'radar' && $yAxisCounter < 1) || $chartType != 'radar')
		 		#set($workAroundNoPrint = $yAxisList.put($axis.alias , $axis))
		 		#set($workAroundNoPrint = $yAxisPositions.put($axis.alias , $yAxisCounter))
	 		
		 		#set($yAxisCounter = $yAxisCounter + 1)
	 		#end
	 	#end
	#end
	
    xAxis:[
    
 
    #foreach($a in $xAxisMap)
    	#foreach($xAxisKey in $xAxisList.keySet())
	 	#set ($xAxis = $xAxisList[$xAxisKey])

	{
		#if($xAxis.plotBands)
		plotBands: [
    	{
    		label:
    		{
	    		text:"",
				#if($xAxis.plotBands.get(0).label)
				text :"$xAxis.plotBands.get(0).label.text",
				#end
	    		align :"$xAxis.plotBands.get(0).label.align",
    		},
    		color: "$xAxis.plotBands.get(0).color",
    		#if($xAxis.plotBands.get(0).from=="")
    			from :0,
    		#else
    			from : '$xAxis.plotBands.get(0).from',
    		#end
    		#if($xAxis.plotBands.get(0).to=="")
    			to :0,
    		#else
    			to : '$xAxis.plotBands.get(0).to',
    		#end
    	},			
    	],
   		plotLines : [
   		{
   			label:
   			{
   				text:"",
				#if($xAxis.plotLines.get(0).label)
				text :"$xAxis.plotLines.get(0).label.text",
				#end
   				align :"$xAxis.plotLines.get(0).label.align", 
   			},
   			color: "$xAxis.plotLines.get(0).color",
   			dashStyle: "$xAxis.plotLines.get(0).dashStyle",
   			#if($xAxis.plotLines.get(0).value=="")
    			value :0,
    		#else
    			value: '$xAxis.plotLines.get(0).value',
    		#end
   			width: $xAxis.plotLines.get(0).width,
   		},			
   		],
		#end
			type: "$a.type",
			#if(!$exportWebApp) 
			id: $a.id,
			#end
			#if($a.name == $categorieColumns.name && $categorieColumns.orderType=="desc" && $isDateTime)
				reversed: true,
			#end
	 	title: {
	 	    #if($xAxis.TITLE.text != '')
				customTitle: true,
				#if($a.id==0)
				text: "$xAxis.TITLE.text",
				#else
				text: "",
				#end
			#elseif($categorieColumns.name != '')
				customTitle: false,
				#if($a.id==0)
				text: "$a.name",
				#else
				text: "",				
				#end
			#end
			#if($chart.hideAxisTitleCategory)
				#if($chart.hideAxisTitleCategory=="true")
					text: "",
					customTitle: false,
				#end
			#end
			##y:-150, 
			#set ($xTitleAlign = $xAxis.TITLE.style.align)
			#if( $xTitleAlign != '' )
				#if ($xTitleAlign == 'center' )
				align: 'middle',
				#elseif ($xTitleAlign == 'left' )
				align: 'low',
				#elseif ($xTitleAlign == 'right' )
				align: 'high',
				#end
			#end
			 #if ($chartType == 'radar' )
				align: 'high',
				#end
			style:{
	        	#foreach($styleName in $xAxis.TITLE.style.keySet())
		        	#set ($axisTitleStyle = $xAxis.TITLE.style[$styleName])
		        	#if ($styleName == 'fontWeight' && ($axisTitleStyle == 'italic' || $axisTitleStyle == 'normal'))
	        			fontStyle: '$axisTitleStyle',
					#elseif($styleName == 'fontWeight' && $axisTitleStyle == 'underline')
	        			textDecoration: 'underline',
	        		#elseif($styleName == 'align')
		        			#set($labelAlign=$axisTitleStyle)
					#elseif($axisTitleStyle != '')
	        			$styleName: '$axisTitleStyle',
	        		#end
	        	#end
		    },
		},
		
		 
		labels:{
		#if($xAxis.step)
			#if($xAxis.step!="")
			step: $xAxis.step,
			#end
		#end
		#if($chart.groupSeries =='true')
		formatter: function () {
			                    var value = this.value;	
			                    var newValue = "";	
		                      	var scaleFactor =  '${axisFactorScale}';	                    
			                  
		                      	var prefixValue = '';
		                      	var sufixValue = '';
		                      	
		                      	
		                      	var decimalPoints = Highcharts.getOptions().lang.decimalPoint;
		                      	var thousandsSep = Highcharts.getOptions().lang.thousandsSep;
		                      	
		                      	var precision = '0';
		                      	
		                      	switch(scaleFactor.toUpperCase()) {
		                      	
		                      		case "EMPTY":
		                      			newValue = Highcharts.numberFormat(value,precision,decimalPoints,thousandsSep);		                      			
		                      			break;
		                      		case "K":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,3),precision,decimalPoints,thousandsSep) + "k";	
		                      			break;
		                      		case "M":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,6),precision,decimalPoints,thousandsSep) + "M";	
		                      			break;
		                      		case "G":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,9),precision,decimalPoints,thousandsSep) + "G";
		                      			break;
	                      			case "T":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,12),precision,decimalPoints,thousandsSep) + "T";
		                      			break;
		                      		case "P":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,15),precision,decimalPoints,thousandsSep) + "P";
		                      			break;
	                      			case "E":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,18),precision,decimalPoints,thousandsSep) + "E";
		                      			break;
	                      			default:
	                      				newValue = Highcharts.numberFormat(value,precision,decimalPoints,thousandsSep);	
		                      			break;
		                      	
		                      	}						
	                        		                       
	                          	return  newValue ;
			            	}	,	
		#end
		#if( $xAxis.style != '' )
        	style:{
	        	#foreach($styleName in $xAxis.style.keySet())
	        		#set ($axisStyle = $xAxis.style[$styleName])
	        		#if ($styleName == 'fontWeight' && ($axisStyle == 'italic' || $axisStyle == 'normal'))
	        			fontStyle: '$axisStyle',
					#elseif($styleName == 'fontWeight' && $axisStyle == 'underline')
	        			textDecoration: 'underline',
					#elseif($styleName == 'align')
	        			#set($labelAlign=$axisStyle)
	        		#elseif($styleName == 'rotate')
	        			#set($rotation=$axisStyle)		        			
					#elseif($styleName == 'color')
	        			#set($axisLabelColor=$axisStyle)
	        			color: "$axisLabelColor",	        			
					#else	        			
	        			$styleName: '$axisStyle',
	        		#end
	        	#end
        		},
        		
        		#*
        			If chart's orientation is horizontal, then skip axis label alignment (it will be 
        			predefined one - defined by the Highcharts library), since the label aligned left will 
        			overlap with the title (characteristic of this library). Hence, the value inside 
        			of the combo for alignment of labels on the axis inside of the X-axis panel's Axis 
        			style configuration popup will not be taken into account.      
        			
        			NOTE: We should disable the 'align' property for the X-axis labels for RADAR chart, since 
        			it causes a weird alignment	on the edge of the chart (categories values are strangely aligned)
        			for this chart type. Without this property, those will be aligned perfectly, so the axis line 
        			comes right in the middle of the category value.
        			  			
        			@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
        		*# 

        		#if($labelAlign && $chartType != "radar")
        			align: "$labelAlign", 
        		#end
        		
        		#if($rotation!="" &&  $rotation!="null" && ($rotation.class.name == "java.lang.Integer" || $rotation.class.name == "java.lang.String"))        		 	
        			rotation: $rotation,
    			#end
        	#end
        	#if($chart.dateFormat=="year")
				#set($dateFormat = "%Y")
			#elseif($chart.dateFormat=="month")
				#set($dateFormat = "%B %Y")
			#elseif($chart.dateFormat=="week")
				#set($dateFormat = "Week from %A, %b %e, %Y")
			#elseif($chart.dateFormat=="day")
				#set($dateFormat = "%A, %b %e, %Y")
			#elseif($chart.dateFormat=="hour")
				#set($dateFormat = "%A, %b %e, %H")
			#elseif($chart.dateFormat=="minute")
				#set($dateFormat = "%A, %b %e, %H:%M")
			#elseif($chart.dateFormat=="second")
				#set($dateFormat = "%A, %b %e, %H:%M:%S")
				
			#elseif($chart.dateFormat=="slash")
				#set($dateFormat = "%d/%m/%Y")
			#elseif($chart.dateFormat=="minus")
				#set($dateFormat = "%d-%m-%Y")
				
			#else
				#set($dateFormat = "%A, %b %e, %H:%M:%S.%L")
			#end
			#if($a.type == "datetime")
            formatter: function() {
                return '' + Highcharts.dateFormat('$dateFormat', this.value);
            },  
            #end
        	
		},

		#if($xAxis.position == 'top')
		 	opposite: true,
		#end
		
		#*			
			Place the points of chart onto the axes (lines), instead of inside the slices for RADAR.
			[KNOWAGE-1109 JIRA ISSUE]
			@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
		*#
		#if ($chartType == "radar")
			tickmarkPlacement: 'on'
		#end
		
		## author: rselakov, radmila.selakovic@mht.net
		## Calling the method for reconfiguring the original data about the ordering column and its category values		
		#if($chart.groupCategories && $chart.groupCategories =='true' && $isDateTime==false)
		#set($map = $datasettransformer.prepareDataForGroupingForBar($rows,$chart.isCockpitEngine,$categorieColumnsMapped))
            categories: [
            	#foreach($element in $map.entrySet())
            		{ 

						name: "$escapeTool.javascript($element.key)",

						categories: [
							#foreach($element in $element.value)

							"$escapeTool.javascript($element)",
							#end
						]
					},
				#end
            ]
		#end
		#if(($chart.groupSeries && $chart.groupSeries =='true') || ($chart.groupSeriesCateg && $chart.groupSeriesCateg =='true'))
		
		#set($enableValues = $chart.VALUES.SERIE.showValue)
		
			#if($chart.VALUES.SERIE.get(0))
			#set($relatedSerie = $chart.VALUES.SERIE.get(0))
				#if($chart.type.toUpperCase() == 'RADAR' && $chart.groupSeriesCateg && $chart.groupSeriesCateg =='true')
		 
				#if($chart.VALUES.SERIE.get(0).serieTypeRadar && $chart.VALUES.SERIE.get(0).serieTypeRadar!="")
				#set($relatedSerieTypes = $chart.VALUES.SERIE.get(0).serieTypeRadar.split(", "))
				#set($count = $chart.VALUES.SERIE.get(0).serieTypeRadar.length() - $chart.VALUES.SERIE.get(0).serieTypeRadar.replace(",", "").length())
			 	#else
			 	#set($relatedSerieTypes = $chart.VALUES.SERIE.get(0).type.split(", "))
			 	#set($count = $chart.VALUES.SERIE.get(0).type.length() - $chart.VALUES.SERIE.get(0).type.replace(",", "").length())
			 	#end
				
				#end
			#set($enableValues = $chart.VALUES.SERIE.get(0).showValue)
			#end

		#set($map = $datasettransformer.prepareDataForGrouping($rows,$chart.isCockpitEngine, $chart.groupSeries, $chart.groupSeriesCateg, $dataColumnsMapper, $categorieColumns, $groupedSerie,$drillOrder))
     
		#end

	},
	#end
    #end
    ],
	
    
    #set ($axisCounter = 0)
    yAxis: [
        ## Serie add
        #foreach($yAxisKey in $yAxisList.keySet())
        	#set ($yAxis = $yAxisList[$yAxisKey] )
        {
        #if($yAxis.plotBands)
	        #set($plotBands = true)
		plotBands: [
    	{	
    		label:
    		{
    			text:"",
   				#if($yAxis.plotBands.get(0).label)
   				text :"$yAxis.plotBands.get(0).label.text",
   				#end
    			align :"$yAxis.plotBands.get(0).label.align",
    		},
    		color: "$yAxis.plotBands.get(0).color",
    		#if($yAxis.plotBands.get(0).from=="")
    			from :0,
    		#else
    			from : '$yAxis.plotBands.get(0).from',
    		#end
    		#if($yAxis.plotBands.get(0).to=="")
    			to :0,
    		#else
    			to : '$yAxis.plotBands.get(0).to',
    		#end
    	},			
    	],
   		plotLines : [
   		{
   			label:
   			{
   				text:"",
   				#if($yAxis.plotLines.get(0).label)
   				text :"$yAxis.plotLines.get(0).label.text",
   				#end
   				align :"$yAxis.plotLines.get(0).label.align",
   			},
   			color: "$yAxis.plotLines.get(0).color",
   			dashStyle: "$yAxis.plotLines.get(0).dashStyle",
   			#if($yAxis.plotLines.get(0).value=="")
    			value :0,
    		#else
    			value: '$yAxis.plotLines.get(0).value',
    		#end
   			
   			width: $yAxis.plotLines.get(0).width,
            	zIndex: 1
   		},			
   		],
	   		
	   		
			#end
			#set($Integer1 = 0)
			#if($yAxis.min==$yAxis.max)
			#set ($minAndMaxAreSame= true)
			#end
			#if($yAxis.min)
				#if($yAxis.min != "auto"  && $yAxis.min!='')
					#set ($min = $yAxis.min)
						min: $yAxis.min,
						startOnTick:false,
				#elseif($yAxis.min == "auto" || $yAxis.min=='')
					min: "$yAxis.min",
				#end
			#end
			#if($yAxis.max)
				#if($yAxis.max!='auto'  && $yAxis.max!='' && $chartType != "radar")
					#set ($max = $yAxis.max)
					#if($min)
						#if($Integer1.parseInt($min)<$Integer1.parseInt($max))
							max:$yAxis.max,
							endOnTick: false,
						#end
					#else 
						max:$yAxis.max,
						endOnTick: false,
					#end
		       	#elseif(($yAxis.max == "auto" || $yAxis.max=='') && $chartType != "radar")
					max: "$yAxis.max",
				#end
	        #end
			#if( $chartType == "radar")
			min:0,
			#end
			
			
        	#if($chart.alignAxis && $chart.alignAxis =="true" && $axisCounter!=0)
        	#*
        	linkedTo:0, property was removed in order to provide different values on axis, see example for better understanding on link http://jsfiddle.net/JeLrb/515/
        	*#
        	#end
        	#set ($axisCounter = 1)
        	#*
        		Provide possibility for BAR chart to show also negative values.
        		@modifiedBy Danilo Ristovski (danristo, danilo.ristovski@mht.net)
        	*#
        	##min: 0,
        	title: {
        	    #if($yAxis.TITLE.text != '')
        			text: "$yAxis.TITLE.text",
        			custom: true,
        		#else
        			text: '$yaxisName',
					customTitle: false,
        		#end
        		#if($chart.hideAxisTitleSerie)
					#if($chart.hideAxisTitleSerie=="true")
						text: "",
						customTitle: false,
					#end
                #end
        		##x:50,
        		
        		#if( $yAxis.style.rotate && $yAxis.style.rotate != '' ) 
        			rotation: $yAxis.style.rotate,
        		#end
        		
        		
        		#if( $chartType != "radar" && $yAxis.TITLE.style.align != '' )
        			#if ($yAxis.TITLE.style.align == 'center' || $yAxis.TITLE.style.align=="")
					align: 'middle',
					#elseif($yAxis.TITLE.style.align=="left")
	    				align: "low",
	    			#elseif($yAxis.TITLE.style.align=="right")
	    				align: "high",
	    			#end 
				#end
			 
        		style:{
		        	#foreach($styleName in $yAxis.TITLE.style.keySet())
		        		#set ($axisTitleStyle = $yAxis.TITLE.style[$styleName])
		        		#if ($styleName == 'fontWeight' && ($axisTitleStyle == 'italic' || $axisTitleStyle == 'normal'))
		        			fontStyle: '$axisTitleStyle',
						#elseif($styleName == 'fontWeight' && $axisTitleStyle == 'underline')
		        			textDecoration: 'underline',
		        		#elseif($styleName == 'align')
		        			#set($labelAlign=$axisTitleStyle)
						#else		        			
		        			$styleName: '$axisTitleStyle',
		        		#end
		        	#end
        		},
        		
        		#if ($chartType == "radar")
	    			#if($labelAlign=="center" || $labelAlign=="")
	    				align: "middle",
	    			#elseif($labelAlign=="left")
	    				align: "low",
	    			#elseif($labelAlign=="right")
	    				align: "high",
	    			#end   
    			#end   
        	},
        	
        	labels: {
        		
        		formatter: function () {
			                    var value = this.value;	
			                    var newValue = "";	
		                      	var scaleFactor =  $isCockpit ? '${yAxis.labels.scaleFactor}' : '${yAxis.LABELS.scaleFactor}'
		                      	if(scaleFactor.indexOf("yAxis")!=-1){
		                      		scaleFactor = "empty"
		                      	}
		                      	var prefixValue = '';
		                      	var sufixValue = '';
		                      	
		                      	
		                      	var decimalPoints = Highcharts.getOptions().lang.decimalPoint;
		                      	var thousandsSep = Highcharts.getOptions().lang.thousandsSep;
		                      	
		                      	var precision =  $isCockpit ? '${yAxis.labels.precision}' : '${yAxis.LABELS.precision}'
		                      	if(precision.indexOf("yAxis")!=-1){
		                      		precision = 0
		                      	}
		                      	
		                      	switch(scaleFactor.toUpperCase()) {
		                      	
		                      		case "EMPTY":
		                      			newValue = Highcharts.numberFormat(value,precision,decimalPoints,thousandsSep);		                      			
		                      			break;
		                      		case "K":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,3),precision,decimalPoints,thousandsSep) + "k";	
		                      			break;
		                      		case "M":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,6),precision,decimalPoints,thousandsSep) + "M";	
		                      			break;
		                      		case "G":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,9),precision,decimalPoints,thousandsSep) + "G";
		                      			break;
	                      			case "T":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,12),precision,decimalPoints,thousandsSep) + "T";
		                      			break;
		                      		case "P":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,15),precision,decimalPoints,thousandsSep) + "P";
		                      			break;
	                      			case "E":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,18),precision,decimalPoints,thousandsSep) + "E";
		                      			break;
	                      			default:
	                      				newValue = Highcharts.numberFormat(value,precision,decimalPoints,thousandsSep);	
		                      			break;
		                      	
		                      	}						
	                        		                       
	                          	return  newValue ;
			            	}	,
        		
        		## If this parameter is not commented Y-axes labels will be glued to each other when there are no axis titles
        		##x:0,
        	
	    		#if( $yAxis.style != '' ) 
	        		style:{
		        	#foreach($styleName in $yAxis.style.keySet())
		        		#set ($axisStyle = $yAxis.style[$styleName])
		        		
		        		#if ($styleName == 'fontWeight' && ($axisStyle == 'italic' || $axisStyle == 'normal'))
		        			fontStyle: '$axisStyle',
						#elseif($styleName == 'fontWeight' && $axisStyle == 'underline')
		        			textDecoration: 'underline',
		        		#elseif($styleName == 'align')
		        			#set($labelAlign=$axisStyle)
		        		#elseif($styleName == 'rotate')
		        			#set($rotation=$axisStyle)
						#else		        			
		        			$styleName: '$axisStyle',
		        		#end
		        	#end
	        		},
	        		
	        		#*
	        			If chart's orientation is vertical, then skip axis label alignment (it will be 
	        			predefined one - defined by the Highcharts library), since the label aligned left 
	        			will overlap with the title (characteristic of this library). Hence, the value inside 
	        			of the combo for alignment of labels on the axis inside of the Y-axis panel's Axis 
	        			style configuration popup will not be taken into account.
	        			@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
	        		*# 	        		       		
	        		#if($labelAlign && $chartType != "radar")
	        			align: "$labelAlign",	        		     			
	        		#end
	        		
	        		
	        		#if($rotation!="" &&  $rotation!="null" &&  $rotation.class.name == "java.lang.Integer" )
	        			rotation: $rotation,	        			
	    			#end
	    			
	        	#end     		
            },
        	
	        #if($yAxis.MAJORGRID.interval != '')
        	tickInterval: $yAxis.MAJORGRID.interval,
		    #end
		    
	        #if($yAxis.MAJORGRID.style.color != '')
        	gridLineColor: '$yAxis.MAJORGRID.style.color',
		    #end
        	
        	#set($typeline = $yAxis.MAJORGRID.style.typeline)
        	#if($yAxis.MAJORGRID.style.typeline != '')
	        	#if($typeline == 'dashed')
	        		#set($convertedTypeline = 'Dash')
	        	#elseif($typeline == 'dotted')
	        		#set($convertedTypeline = 'Dot')
	    		#elseif($typeline == 'solid')
	        		#set($convertedTypeline = 'Solid')
				#else
	        		#set($convertedTypeline = $typeline)
	        	#end
	        	gridLineDashStyle: '$convertedTypeline',
        	#end
        	
	        #if($yAxis.MINORGRID.interval != '')
        	minorTickInterval: $yAxis.MINORGRID.interval,
		    #end
		    
	        #if($yAxis.MINORGRID.style.color != '')
        	minorGridLineColor: '$yAxis.MINORGRID.style.color',
		    #end
        	
        	#set($typeline = $yAxis.MINORGRID.style.typeline)
        	#if($typeline == 'dashed')
        		#set($convertedMinorTpeline = 'Dash')
    		#elseif($typeline == 'dotted')
        		#set($convertedMinorTpeline = 'Dot')
    		#elseif($typeline == 'solid')
        		#set($convertedMinorTpeline = 'Solid')
        	#end
        	minorGridLineDashStyle: '$convertedMinorTpeline',
        	
        	#if($yAxis.position == 'right')
        	opposite: true,
        	#end
        	
        },
        #end
        ## FINE Serie add
            
    ],
    
    #foreach($valueKey in $seriesMap.keySet())
	    #set($relatedSerie = $seriesMap.get($valueKey))
	    
	    #set($relatedSerieColName = "$relatedSerie.name"+"_#if($relatedSerie.groupingFunction)$relatedSerie.groupingFunction.toLowerCase()#{else}sum#end")
	   	#if($chart.isCockpitEngine != 'true')
	      	#set($relatedSerieColName = "$relatedSerie.column"+"_#if($relatedSerie.groupingFunction)$relatedSerie.groupingFunction.toLowerCase()#{else}sum#end")
	    #end
	   	#set($serieColumnsMapped = $dataColumnsMapper.get($relatedSerieColName.toLowerCase())) ## "Vendite_AVG" -> "column_5" ## "Ricavi_sum" -> "column_6"
	   	
		#if( $relatedSerie.type == 'arearangelow' )		
    	#set($serieColumnsMappedLow =$serieColumnsMapped)
    	#end
    	#if( $relatedSerie.type == 'arearangehigh' )		
    	#set($serieColumnsMappedhigh =$serieColumnsMapped)   
    	#end		
	#end
	
    #foreach($element in $seriesMap)
 	   #set($relatedSerieColName = "$element.name"+"_#if($element.groupingFunction)$element.groupingFunction.toLowerCase()#{else}sum#end")
	    #set($serieColumnsMapped = $dataColumnsMapper.get($relatedSerieColName.toLowerCase())) ## "Vendite_AVG" -> "column_5" ## "Ricavi_sum" -> "column_6"
		#if($chart.isCockpitEngine != 'true')
	    	#set($relatedSerieColName = "$element.column"+"_#if($element.groupingFunction)$element.groupingFunction.toLowerCase()#{else}sum#end")
	   	#end	
        
    	#if( $element.type == 'arearangelow' || $element.type == 'arearangehigh')
    		 #set($seriesMap = $datasettransformer.seriesMapTransformedMethod($seriesMap))
           	 #break
    	#end

    #end
  	#set ($counter = 0)
	#set ($count = $count+1)
	#set ($customColors = $chart.CUSTOMCOLORS.COLOR)
	series: [
	#if($chart.groupSeries !='true' && $chart.groupSeriesCateg !='true')
	#foreach($valueKey in $seriesMap.keySet())
	    #set($relatedSerie = $seriesMap.get($valueKey))
		#foreach($yAxisKey in $yAxisList.keySet())
        	#set ($yAxis = $yAxisList[$yAxisKey] )
			#if($yAxis.LABELS)
				#if($relatedSerie.axis == $yAxis.alias)
				#set ($relatedSerie.scaleFactor = $yAxis.LABELS.scaleFactor)
				#end
			#elseif($yAxis.labels)
				#if($relatedSerie.axis == $yAxis.alias)
				#set ($relatedSerie.scaleFactor = $yAxis.labels.scaleFactor)
				#end
			#end
		#end
		{	
			label: {
		      enabled: false
		    },
			#set($relatedSerieColor = false)
			#set($relatedSerieColor = $relatedSerie.color)
			#if($relatedSerieColor && $relatedSerieColor != '')
				color: '$relatedSerieColor',
		    #end

			name: "$escapeTool.javascript($relatedSerie.name)",

			#foreach($customColor in $customColors)
			#if($escapeTool.javascript($customColor.customName).equalsIgnoreCase($relatedSerie.name))
				color:'$customColor.customValue',
			#end
			#end

			#*
				Move series values from the middle of the chart (in the middle of the top slice) to the axis for RADAR.
				[KNOWAGE-1111 JIRA ISSUE]
				@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
			*#	
			#if($chartType == "radar")
				pointPlacement: 'on',
			#end
		
			#set($relatedSerieType = '')
			
			#if($relatedSerie.type)
				#set($relatedSerieType = $relatedSerie.type)
			#end
			
			#if($relatedSerieType != '')		
				#if($relatedSerieType == 'bar')
					#set($relatedSerieType = 'column')
				#end		
				#if($relatedSerieType == 'radar')
					#set($relatedSerieType = 'line')
				#end
				#if($relatedSerieType == 'arearangelow' ||$relatedSerieType == 'arearangehigh' )
					#set($relatedSerieType = 'arearange')
				#end		
		    	type: '$relatedSerieType',
		    #end
		    
		    #if($chartType == 'radar')
			    #if($relatedSerieType == '')
			    	#if($relatedSerie.serieTypeRadar!='')
				    	#set($relatedSerieType = $relatedSerie.serieTypeRadar)
				    	type: '$relatedSerieType',
			    	#end
			    #else
			    	type: '$relatedSerieType',
			    #end
			#end
				
	       	#set($styleOfDataLabels = $relatedSerie.dataLabels.style)
	    	## makes the datalabels overlapping
	    	
	    	dataLabels: {
	    		allowOverlap: true,
	    	},
	    	#set ($countXvalues = 0)
	    	connectNulls:true,
	   
	    	legendIndex: $velocityCount,
	    	data: [
	    		#set($relatedSerieColName = "$relatedSerie.name"+"_#if($relatedSerie.groupingFunction)$relatedSerie.groupingFunction.toLowerCase()#{else}sum#end")
	    	  	#if($chart.isCockpitEngine != 'true')
	    	  	#set($relatedSerieColName = "$relatedSerie.column"+"_#if($relatedSerie.groupingFunction)$relatedSerie.groupingFunction.toLowerCase()#{else}sum#end")
	    	  	#end
	    	  	
	    	
	    	    #set($serieColumnsMapped = $dataColumnsMapper.get($relatedSerieColName.toLowerCase())) ## "Vendite_AVG" -> "column_5" ## "Ricavi_sum" -> "column_6"

	    		#foreach($row in $rows)
					#if( $row.get($serieColumnsMapped))
						#set ($serieValue = $row.get($serieColumnsMapped))
						#set ($serieCategoryName =  $row.get($categorieColumnsMapped))
				
						#set( $serieCategoryName = $escapeTool.javascript($serieCategoryName))

						{
							##drilldown: $enableDrilldown,
							drilldown: $drilldownEnabledFlag,
							#if($relatedSerieType == 'arearange')
								#if($chart.isCockpitEngine != 'false')
									low: $row.get($serieColumnsMappedLow),
									high: $row.get($serieColumnsMappedhigh),
								#end
								#if($chart.isCockpitEngine == 'false')
									low: $row.get($serieColumnsMappedLow),
									high: $row.get($serieColumnsMappedhigh),
								#end 
							#end	
							#if($relatedSerieType != 'arearange' && $serieValue!="")
							y: $serieValue,
							#end
							#if($relatedSerieType=="line")
							x: $countXvalues,
							#end							
							name: "$serieCategoryName",
							
							datetype:"$datetype",
							#if($isDateTime==true)
							#if($datetype=="string")
							x: Date.parse("$serieCategoryName"),
							#end
							#end
           					#foreach($customColor in $customColors)
							#if($escapeTool.javascript($customColor.customName).equalsIgnoreCase($serieCategoryName))
								color:'$customColor.customValue',
							#end
							#end
							
							#if($customColors.containsKey($serieCategoryName))
           					color:'$customColors.get($serieCategoryName)',
           					#end
						},
						#set ($countXvalues = $countXvalues+1)
					#end
				#end
	    	],    	
	    	#set($relatedSerieShowValue = $relatedSerie.showValue)
			
						
						#*
							If inside the style template the value of the "Show value"
							parameter for particular serie is not specified, consider 
							it as a false.
							@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
						*#
						#if ($relatedSerieShowValue == "" || $relatedSerieShowValue == "false")
							#set($relatedSerieShowValue = false)
						#else
							#set($relatedSerieShowValue = true)
						#end
						selected:$relatedSerieShowValue,
						initiallySelected: $relatedSerieShowValue,
						dataLabels: 
						{
							style:{
				    			color:"$styleOfDataLabels.color",
			                	fontFamily:"$styleOfDataLabels.fontFamily",
			                	fontWeight:"$styleOfDataLabels.fontWeight",
			                	fontSize:"$styleOfDataLabels.fontSize",
			                	fontStyle:"$styleOfDataLabels.fontStyle",
	    					},
		                    enabled: $relatedSerieShowValue,
		                   
		                    #set ($postfixValueAsString = '')
		                     
		                    #if ($relatedSerie.postfixChar != '')
			                    #set ($postfixValueAsString = ' ' + $relatedSerie.postfixChar)
							#end
							
		                    #set ($prefixValueAsString = '')

		                    #if ($relatedSerie.prefixChar != '')
			                    #set ($prefixValueAsString = $relatedSerie.prefixChar + ' ')
							#end
		                   
		                    #set ($precisionValueAsString = '')
		                    
		                    #if ($relatedSerie.precision != '')
			                    #set ($precisionValueAsString = ':,.' + $relatedSerie.precision + 'f')
		                   	#else
		                   		#set ($precisionValueAsString = ':,.0f')
							#end
		                   
		                   labelFormat: '${prefixValueAsString}{y$precisionValueAsString}${postfixValueAsString}',			                  
                            		             
			               	formatter: function() {
			                    var value = this.y;
			                    var newValue = "";		                    
			                    
		                      	var scaleFactor = '${relatedSerie.scaleFactor}';
		                      	
		                      	var prefixValue = '${prefixValueAsString}';
		                      	var sufixValue = '${postfixValueAsString}';
		                      	
		                      	
		                      	var decimalPoints = Highcharts.getOptions().lang.decimalPoint;
		                      	var thousandsSep = Highcharts.getOptions().lang.thousandsSep;
		                      	
		                      	var precision = '${relatedSerie.precision}';
		                      	var showPercentage = ${relatedSerie.showPercentage};
		                      	
		                      	switch(scaleFactor.toUpperCase()) {
		                      	
		                      		case "EMPTY":
		                      			newValue = Highcharts.numberFormat(value,precision,decimalPoints,thousandsSep);		                      			
		                      			break;
		                      		case "K":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,3),precision,decimalPoints,thousandsSep) + "k";	
		                      			break;
		                      		case "M":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,6),precision,decimalPoints,thousandsSep) + "M";	
		                      			break;
		                      		case "G":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,9),precision,decimalPoints,thousandsSep) + "G";
		                      			break;
	                      			case "T":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,12),precision,decimalPoints,thousandsSep) + "T";
		                      			break;
		                      		case "P":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,15),precision,decimalPoints,thousandsSep) + "P";
		                      			break;
	                      			case "E":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,18),precision,decimalPoints,thousandsSep) + "E";
		                      			break;
	                      			default:
	                      				newValue = Highcharts.numberFormat(value,precision,decimalPoints,thousandsSep);	
		                      			break;
		                      	
		                      	}		

		             					   var groupTotal = this.series.data.map(function (x) {
														  return x.y;
														}).reduce(function (a, b) {
														  return a + b;
														}, 0);
		                 				
		                 				   percentage = 100 * value/groupTotal;	
		                 				     
		                 				   var precisePercentage = percentage.toFixed(precision);		
		                 				   
		                 					if(showPercentage){
												return prefixValue + ' ' + precisePercentage + '%' + sufixValue;										
											} else {
												return prefixValue + ' ' + newValue + ' ' + sufixValue;
											}	                       
	                   
			            	},
		                      
	                    
	                	},
			tooltip: { 
			#set($seriePrefix = $relatedSerie.prefixChar)
			#if($seriePrefix != '')
				valuePrefix: '$seriePrefix',
			#end
				 
			#set($seriePostfix = $relatedSerie.postfixChar)
			#if($seriePostfix != '')
				valueSuffix: '$seriePostfix',
			#end
				
			#if ($relatedSerie.precision != '')
				valueDecimals: $relatedSerie.precision,
			#end
				scaleFactor: '$relatedSerie.scaleFactor',
				
			#*
				If background color for the serie tooltip is not defined (empty)
				take the default value (#FCFFC5) so the tooltip can be readable 
				over the chart that stays behind it. Otherwise, take the value 
				of the background color specified by the user.				
				@author: danristo (danilo.ristovski@mht.net)
			*#
			#if ($relatedSerie.TOOLTIP.backgroundColor!="")
                ttBackColor: '$relatedSerie.TOOLTIP.backgroundColor',
            #else
            	ttBackColor: '#FCFFC5',	## default background color for the serie tooltip
			#end
				
			#if ($relatedSerie.TOOLTIP.style.color != '')
				ttColor: '$relatedSerie.TOOLTIP.style.color' ,
			#end
				
			#if ($relatedSerie.TOOLTIP.style.align != '')
				ttAlign: '$relatedSerie.TOOLTIP.style.align' ,
			#end
				
			#if ($relatedSerie.TOOLTIP.style.fontFamily && $relatedSerie.TOOLTIP.style.fontFamily != '')
				ttFont: '$relatedSerie.TOOLTIP.style.fontFamily' ,
			#end
				
			#if ($relatedSerie.TOOLTIP.style.fontWeight != '')
				ttFontWeight: '$relatedSerie.TOOLTIP.style.fontWeight' ,
			#end
				
			#if ($relatedSerie.TOOLTIP.style.fontSize != '')
				ttFontSize: '$relatedSerie.TOOLTIP.style.fontSize' ,
			#end
			},
			cropThreshold:$countXvalues,
		#if($chartType != 'radar') 	
    		#set($referencedAxis = $relatedSerie.axis)
    		#if ($yAxisPositions[$referencedAxis])
    		yAxis: $yAxisPositions[$referencedAxis]
    		#end
    		
    	#end
	    }, 
	#end
	#end
	
	#if(($chart.groupSeries && $chart.groupSeries =='true') || ($chart.groupSeriesCateg && $chart.groupSeriesCateg =='true'))
	
		#if($counter==0 && $relatedSerie.showValue =='true')
		#set($selectedValue = true)
		#else
		#set($selectedValue = false)
		#end
		#foreach($valueKey in $map.keySet())
		#if($valueKey!="null")
		
		

    	
    	
    	
		{	
			 label: {
			      enabled: false
			    },
			selected: $selectedValue,
			initiallySelected: $selectedValue,
			name: "$escapeTool.javascript($valueKey)",
			#if($seriesMapGroupingFunction.get($valueKey))
			
				type:"$seriesMapGroupingFunction.get($valueKey).type",
				#if($chartType != 'radar') 	
    				#set($referencedAxis = $seriesMapGroupingFunction.get($valueKey).axis)
    					yAxis: $yAxisPositions[$referencedAxis],
    			#end
			#elseif($seriesMapGroupingFunction.get($groupedSerie))
				type:"$seriesMapGroupingFunction.get($groupedSerie).type",
				#if($chartType != 'radar') 	
    				#set($referencedAxis = $seriesMapGroupingFunction.get($groupedSerie).axis)
    					yAxis: $yAxisPositions[$referencedAxis],
    			#end
    		#else
    		
    			#if($chartType != 'radar') 	
	    		#set($referencedAxis = $relatedSerie.axis)
	    		yAxis: $yAxisPositions[$referencedAxis],
    			#end
			#end
			
			#if($relatedSerieTypes && $count!=$counter && $relatedSerieTypes[$counter])
		    	type: '$relatedSerieTypes[$counter]',
		    	 #set ($counter = $counter+1)
		    #end
				 #* #set ($counter = $counter+1) *#
				#foreach($customColor in $customColors)
           		#if($escapeTool.javascript($customColor.customName).equalsIgnoreCase($escapeTool.javascript($valueKey)))
                color:'$customColor.customValue',
	            #end
	            #end
	        connectNulls:true,
			data: [
				#foreach($el in  $map.get($valueKey))
							
				{
				
					#if($el.y!="")	
						y: $el.y,
					#end

					name: "$escapeTool.javascript($el.name)",
					datetype:"$datetype",
					#if($isDateTime==true)
					#if($datetype=="string")
					x: Date.parse("$el.name"),
					#end
					#end
					#foreach($customColor in $customColors)
					#if($escapeTool.javascript($customColor.customName).equalsIgnoreCase($el.name))
						color:'$customColor.customValue',
					#end
					#end
					
				},
				#end	
			], 
					
						dataLabels: 
						{
		                   
							enabled: $selectedValue,
		                    
		                    #set ($postfixValueAsString = '')
		                    
		                    #if ($relatedSerie.postfixChar != '')
			                    #set ($postfixValueAsString = ' ' + $relatedSerie.postfixChar)
							#end
		                    
		                    #set ($prefixValueAsString = '')
		                    
		                    #if ($relatedSerie.prefixChar != '')
			                    #set ($prefixValueAsString = $relatedSerie.prefixChar + ' ')
							#end
		                    
		                    #set ($precisionValueAsString = '')
		                    
		                    #if ($relatedSerie.precision != '')
			                    #set ($precisionValueAsString = ':,.' + $relatedSerie.precision + 'f')
		                   	#else
		                   		#set ($precisionValueAsString = ':,.0f')
							#end
		                   
		                   labelFormat: '${prefixValueAsString}{y$precisionValueAsString}${postfixValueAsString}',			                  
                            		             
			               	formatter: function() {
			                     
			                    var value = this.y;	
			                    var newValue = "";		                    
			                    
		                      	var scaleFactor = '${relatedSerie.scaleFactor}';
		                      	
		                      	var prefixValue = '${prefixValueAsString}';
		                      	var sufixValue = '${postfixValueAsString}';
		                      	
		                      	var decimalPoints = Highcharts.getOptions().lang.decimalPoint;
		                      	var thousandsSep = Highcharts.getOptions().lang.thousandsSep;
		                      	
		                      	var precision = '${relatedSerie.precision}';
		                      	
		                      	switch(scaleFactor.toUpperCase()) {
		                      	
		                      		case "EMPTY":
		                      			newValue = Highcharts.numberFormat(value,precision,decimalPoints,thousandsSep);		                      			
		                      			break;
		                      		case "K":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,3),precision,decimalPoints,thousandsSep) + "k";	
		                      			break;
		                      		case "M":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,6),precision,decimalPoints,thousandsSep) + "M";	
		                      			break;
		                      		case "G":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,9),precision,decimalPoints,thousandsSep) + "G";
		                      			break;
	                      			case "T":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,12),precision,decimalPoints,thousandsSep) + "T";
		                      			break;
		                      		case "P":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,15),precision,decimalPoints,thousandsSep) + "P";
		                      			break;
	                      			case "E":
		                      			newValue = Highcharts.numberFormat(value/Math.pow(10,18),precision,decimalPoints,thousandsSep) + "E";
		                      			break;
	                      			default:
	                      				newValue = Highcharts.numberFormat(value,precision,decimalPoints,thousandsSep);	
		                      			break;
		                      	
		                      	}						
	                        		                       
	                          	return prefixValue + ' ' + newValue + ' ' + sufixValue;
			            	},
		                      
	                    
	                	},
	                	
	                	tooltip: { 
			#set($seriePrefix = $relatedSerie.prefixChar)
			#if($seriePrefix != '')
				valuePrefix: '$seriePrefix',
			#end
				 
			#set($seriePostfix = $relatedSerie.postfixChar)
			#if($seriePostfix != '')
				valueSuffix: '$seriePostfix',
			#end
				
			#if ($relatedSerie.precision != '')
				valueDecimals: $relatedSerie.precision,
			#end
				scaleFactor: '$relatedSerie.scaleFactor',			
			#*
				If background color for the serie tooltip is not defined (empty)
				take the default value (#FCFFC5) so the tooltip can be readable 
				over the chart that stays behind it. Otherwise, take the value 
				of the background color specified by the user.				
				@author: danristo (danilo.ristovski@mht.net)
			*#
			#if ($relatedSerie.TOOLTIP.backgroundColor!="")
                ttBackColor: '$relatedSerie.TOOLTIP.backgroundColor',
            #else
            	ttBackColor: '#FCFFC5',	## default background color for the serie tooltip
			#end
				
			#if ($relatedSerie.TOOLTIP.style.color != '')
				ttColor: '$relatedSerie.TOOLTIP.style.color' ,
			#end
				
			#if ($relatedSerie.TOOLTIP.style.align != '')
				ttAlign: '$relatedSerie.TOOLTIP.style.align' ,
			#end
				
			#if ($relatedSerie.TOOLTIP.style.fontFamily && $relatedSerie.TOOLTIP.style.fontFamily != '')
				ttFont: '$relatedSerie.TOOLTIP.style.fontFamily' ,
			#end
				
			#if ($relatedSerie.TOOLTIP.style.fontWeight != '')
				ttFontWeight: '$relatedSerie.TOOLTIP.style.fontWeight' ,
			#end
				
			#if ($relatedSerie.TOOLTIP.style.fontSize != '')
				ttFontSize: '$relatedSerie.TOOLTIP.style.fontSize' ,
			#end
			},

		
		},
		#end
	#end
	#end
    ],
    tooltip: {

    #if($chart.TOOLTIP.borderWidth)
    	borderWidth: $chart.TOOLTIP.borderWidth,
    #end
    
    #if($chart.TOOLTIP.borderRadius)
    	borderRadius: $chart.TOOLTIP.borderRadius,
    #end

    followTouchMove:false,
    followPointer:true,
    	## NOTE (TOOLTIP PROBLEM): disable the tooltip in order to provide possibility to hide the tooltip after set amount of time after hover 
		## enabled:false,
		
        useHTML: true,
        backgroundColor: null,
        style: {
            padding: 0
        },
        formatter: function() { 
        	var prepareResult = function(point, result,key, xvalue){
       			var ttColor = point.series.tooltipOptions.ttColor ? point.series.tooltipOptions.ttColor : '';
				var ttBackColor = point.series.tooltipOptions.ttBackColor ? point.series.tooltipOptions.ttBackColor : '';
					
				var ttAlign = point.series.tooltipOptions.ttAlign ? point.series.tooltipOptions.ttAlign : '';
				var ttFont = point.series.tooltipOptions.ttFont ? ' ' + point.series.tooltipOptions.ttFont : '';
				var ttFontSize = point.series.tooltipOptions.ttFontSize ? ' ' + point.series.tooltipOptions.ttFontSize : '';
				var ttFontWeight = point.series.tooltipOptions.ttFontWeight ? ' ' + point.series.tooltipOptions.ttFontWeight : '';
				var tooltipFontStyle = "";
					
				if (ttFontWeight == " underline")
				{
					tooltipFontStyle = " text-decoration: underline;";
				}
				else if (ttFontWeight == " italic")
				{
					tooltipFontStyle = "font-style: italic;";
				}
				else if (ttFontWeight == " bold")
				{
					tooltipFontStyle = "font-weight: bold;";
				}
				else
				{
					tooltipFontStyle = "font-weight: normal;";
				}
				
				var valueDecimals = point.series.tooltipOptions.valueDecimals ? point.series.tooltipOptions.valueDecimals : 0;
				var valuePrefix = point.series.tooltipOptions.valuePrefix ? point.series.tooltipOptions.valuePrefix + ' ' : '';
				var valueSuffix = point.series.tooltipOptions.valueSuffix ? ' ' + point.series.tooltipOptions.valueSuffix : '';
				var scaleFactor = point.series.tooltipOptions.scaleFactor ? point.series.tooltipOptions.scaleFactor : 'empty';
						
				var thisValue = point.y;

				var decimalPoint = Highcharts.getOptions().lang.decimalPoint,
				thousandsSep = Highcharts.getOptions().lang.thousandsSep;
				switch(scaleFactor.toUpperCase()) {
										
					case "EMPTY":
					   thisValue = Highcharts.numberFormat(thisValue,valueDecimals,decimalPoint,thousandsSep);		                      			
					   break;
					case "K":
					   thisValue = Highcharts.numberFormat(thisValue/Math.pow(10,3),valueDecimals,decimalPoint,thousandsSep) + "k";	
					   break;
					case "M":
					   thisValue = Highcharts.numberFormat(thisValue/Math.pow(10,6),valueDecimals,decimalPoint,thousandsSep) + "M";	
					   break;
					case "G":
					   thisValue = Highcharts.numberFormat(thisValue/Math.pow(10,9),valueDecimals,decimalPoint,thousandsSep) + "G";
					   break;
					case "T":
					   thisValue = Highcharts.numberFormat(thisValue/Math.pow(10,12),valueDecimals,decimalPoint,thousandsSep) + "T";
					   break;
					case "P":
					   thisValue = Highcharts.numberFormat(thisValue/Math.pow(10,15),valueDecimals,decimalPoint,thousandsSep) + "P";
					   break;
					case "E":
					   thisValue = Highcharts.numberFormat(thisValue/Math.pow(10,18),valueDecimals,decimalPoint,thousandsSep) + "E";
					   break;
					default:
					   thisValue = Highcharts.numberFormat(thisValue,valueDecimals,decimalPoint,thousandsSep);	
					   break;
										
				}
				thisValue = valuePrefix + thisValue + valueSuffix;  
					
				var format = "";
				var drilling = false;
				  
				if (point.series.chart.drilldownLevels && point.series.chart.drilldownLevels.length > 0)
				{        		
					var allMainCategories = point.series.chart.drilldownLevels[0].seriesOptions.data;
					var root = undefined;
						
					if (point.series.chart.drilldownLevels.length == 1 || point.series.chart.drilldownLevels.length == 2)
					{
						root = point.series.chart.drilldownLevels[0].lowerSeriesOptions.name;    	
					}
					else if (point.series.chart.drilldownLevels.length > 2)
					{
						root = point.series.chart.drilldownLevels[1].seriesOptions.name;
					}
						
					var ttCustomPlaceholder = point.series.chart.drilldownLevels[0].series.tooltip;
						
					ttCustomPlaceholder.ttColor ? 
										(ttColor = ttCustomPlaceholder.ttColor) : null;
							
					ttCustomPlaceholder.ttBackColor ? 
										(ttBackColor = ttCustomPlaceholder.ttBackColor) : null;
							
					ttCustomPlaceholder.ttAlign ? 
										(ttAlign = ttCustomPlaceholder.ttAlign) : null;
										
					ttCustomPlaceholder.ttFont ? 
										(ttFont = ttCustomPlaceholder.ttFont) : null;
										
					ttCustomPlaceholder.ttFontSize ? 
										(ttFontSize = ttCustomPlaceholder.ttFontSize) : null;
										
					ttCustomPlaceholder.ttFontWeight ? 
										(ttFontWeight = ttCustomPlaceholder.ttFontWeight) : null; 
						
					var resultY = allMainCategories.filter
					(
						function(obj) 
						{
							 return obj.name == root;
						}
					 );
						
					if (resultY)
					{
						drilling = true;
					}
				}    
					
				var prefix = "";
				var postfix = "";
			
				if (drilling)
				{
					var formatIntro = "{y:";
					var formatOutro = "f}";
					
					var yValueOnlyIndexStart = format.indexOf(formatIntro);
					var yValueOnlyIndexEnd = format.indexOf(formatOutro);
					
					prefix = point.series.options.tooltip.valuePrefix + " ";
				
					var thousandsSep = Highcharts.getOptions().lang.thousandsSep;
						
					var decimalPoint = Highcharts.getOptions().lang.decimalPoint;
																
					var valueDecimals = point.series.options.tooltip.valueDecimals;
					var scaleFactor = point.series.options.tooltip.scaleFactor;
									
					postfix = " " + point.series.options.tooltip.valueSuffix;
						
					switch(scaleFactor.toUpperCase()) {
									
						case "EMPTY":
							   
						   thisValue = Highcharts.numberFormat(point.y,valueDecimals,decimalPoint,thousandsSep);		                      			
						   break;
						case "K":
						   thisValue = Highcharts.numberFormat(point.y/Math.pow(10,3),valueDecimals,decimalPoint,thousandsSep) + "k";	
						   break;
						case "M":
						   thisValue = Highcharts.numberFormat(point.y/Math.pow(10,6),valueDecimals,decimalPoint,thousandsSep) + "M";	
						   break;
						case "G":
						   thisValue = Highcharts.numberFormat(point.y/Math.pow(10,9),valueDecimals,decimalPoint,thousandsSep) + "G";
						   break;
						case "T":
						   thisValue = Highcharts.numberFormat(point.y/Math.pow(10,12),valueDecimals,decimalPoint,thousandsSep) + "T";
						   break;
						case "P":
						   thisValue = Highcharts.numberFormat(point.y/Math.pow(10,15),valueDecimals,decimalPoint,thousandsSep) + "P";
						   break;
						case "E":
						   thisValue = Highcharts.numberFormat(point.y/Math.pow(10,18),valueDecimals,decimalPoint,thousandsSep) + "E";
						   break;
						default:
						   thisValue = Highcharts.numberFormat(point.y,valueDecimals,decimalPoint,thousandsSep);	
						   break;
										
					}
				}
					
				var fontStyle = "";
					
				if (ttFontWeight == "normal" || ttFontWeight == "" ||
							ttFontWeight == "italic")
				{
					fontStyle = 'font-style: ' + ttFontWeight;
					tooltipFontStyle = "";
				}
				else if (ttFontWeight == "underline")
				{
					fontStyle = 'text-decoration: ' + ttFontWeight;
					tooltipFontStyle = "";
				}    
				else if (ttFontWeight == "bold")   
				{
					fontStyle = 'font-weight: ' + ttFontWeight;
					tooltipFontStyle = "";
				} 			
				
				result += 
					'<div style="padding:10px;color:' + ttColor + '; opacity: 0.9; background:' + ttBackColor + ';' + fontStyle + "; font-family: " + ttFont + "; "
						+ tooltipFontStyle + " font-size: " + ttFontSize + ';text-align:' + ttAlign + ';">'; 
			   if  (point.series.userOptions.category && point.series.userOptions.category =='$categoryDate'){
					result += '<span>' + Highcharts.dateFormat('$dateFormat', point.x) + '</span><br/>' + point.series.name + ': ' + prefix + thisValue + postfix + '</div>';
				  
				} else {
						if($chart.groupCategories && xvalue && xvalue.parent) {			
						result += '<span>' + xvalue.name + '</span><span style = "margin-left:4px">' + xvalue.parent.name + '</span><br/>' + point.series.name + ': ' + prefix + thisValue + postfix + '</div>';			
						}
				        else {				        
				        result += '<span>' + key + '</span><br/>' + point.series.name + ': ' + prefix + thisValue + postfix + '</div>';
				        }
					
				}
           		return result
        	}
        
			var result = "";
       
       		if(this.points){
       			this.points.forEach(function(point) {
					result = prepareResult(point, result, point.key)
				})
           	} else {
      			result = prepareResult(this.point, result,this.key,this.x)
			}

			return result;
		}
    },
       
    #if($enableDrilldown)
    drilldown: {
        series: [],
       
         #*
        	Customize the value of the category on the X-axis of the chart,
        	the one that previously was in a form of hyperlink. The hyperlink
        	will be removed in order to skip confusion.
        	@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
        *#
        activeAxisLabelStyle: 
        {
			cursor: '',
			#if($axisLabelColor!='')
			color: '$axisLabelColor',
			#else
			color: '#0d233a',			
			#end
			fontWeight: 'bold',
			textDecoration: 'none'			
		},
		
		#*
        	Customize the value of the category on the X-axis of the chart,
        	the one that previously was in a form of hyperlink. The hyperlink
        	will be removed in order to skip confusion.
        	
        	@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
        *#
        #*
	        activeDataLabelStyle: 
	        {
				cursor: 'pointer',
				#if($axisLabelColor!='')
				color: '$axisLabelColor',
				#else
				color: '#0d233a',			
				#end
				fontWeight: 'bold',
				textDecoration: 'none'			
			}
		*#
    },
    #end
    
    lang: {
        noData: '$chart.EMPTYMESSAGE.text',
    },

    noData: {
    	style:{
    	 	fontFamily: '$chart.EMPTYMESSAGE.style.fontFamily',		
			fontSize: '$chart.EMPTYMESSAGE.style.fontSize',
			color: '$chart.EMPTYMESSAGE.style.color',
					
			#if($chart.EMPTYMESSAGE.style.fontWeight == 'italic' || $chart.EMPTYMESSAGE.style.fontWeight == 'normal')
    			fontStyle: '$chart.EMPTYMESSAGE.style.fontWeight',
    			fontWeight: '$chart.EMPTYMESSAGE.style.fontWeight',
			#elseif($chart.EMPTYMESSAGE.style.fontWeight == 'underline')
    			textDecoration: '$chart.EMPTYMESSAGE.style.fontWeight',
    			fontWeight: '$chart.EMPTYMESSAGE.style.fontWeight',
			#elseif($chart.EMPTYMESSAGE.style.fontWeight == 'bold')		        			
    			fontWeight: '$chart.EMPTYMESSAGE.style.fontWeight',
    		#end
		},
		position: {
			#set ($positionAlign = $chart.EMPTYMESSAGE.position.align)
			#set ($positionVerticalAlign = $chart.EMPTYMESSAGE.position.verticalAlign)
			#if ($positionAlign == "")      
			 	
			 	align: "center",
			#else		        			
        		align: '$positionAlign' ,  
		    #end
		    #if ($positionVerticalAlign == "")      
			 	
			 	verticalAlign: "middle"
			 #else		        			
        		verticalAlign: '$positionVerticalAlign'    
		    #end
			

		}
    },
    
    credits: { ##remove bottom credits text
    	enabled: false
    },
    
    plotOptions: {
        
        ## NOTE (TOOLTIP PROBLEM) the tooltip must be disabled previously (on line 1129 here) in order to provide effect of hidding the tooltip after some time 
        ## Also, uncomment this block of code, since it implements the logic for this operation.
        #* series: {
        
	        point: {
	        
	          events: {
	          
	            mouseOver: function(e) {
	            
	              var i = this.x;
	              
	              points = [];
	              
	              Highcharts.each(this.series.chart.series, function(s) {
	                Highcharts.each(s.data, function(p) {
	                  if (p.x === i) {
	                    points.push(p)
	                  }
	                })
	              });
	              
	              myTooltip = chart.myTooltip;
	              
	              setTimeout(function() {
	                myTooltip.refresh(chart.series[0].points[i])
	              }, 0)
	              
	              // Hides the 
	              setTimeout(function() {
	                myTooltip.hide()
	              }, 1000)
	
	            }
	          }
	        }
      	},*#
        
       line: {
        
	        #if ($chart.seriesStacking=="true")
	        	stacking: "normal",
	    	#end
        
	        marker: {
                symbol: 'circle',
                lineWidth: 2
            }
        },
        #if ($enableDrilldown)
        column: {
			dataLabels: {
                enabled: true
            }
	            
		},
		#end
        ## (danristo)
	    column: {
	        #if ($chart.seriesStacking=="true")
	        	stacking: "normal",
	    	 #end 
	        },
	     	## (danristo)
	    bar: {
	        #if ($chart.seriesStacking=="true")
				stacking: "normal",
			#end
	    	 	 
	        },
        series: {
        #if($chart.LEGEND.showCheckboxes && $chart.LEGEND.showCheckboxes==true )
        	events: {
	        	 checkboxClick: function(event) {
	             	var updateObj = {};
		            updateObj.dataLabels = {
		              enabled: event.checked
		            }
		            this.update(updateObj, true);
		            if (this.options.initiallySelected) {
		            	return !event.checked;
		            } else {
		            	return event.checked;
		            }
         		}
        	},
        	
			showCheckbox: true,
        	#end
            cursor: 'pointer', 
            #if(!$exportWebApp)
            point: {
               #if($chart.isCockpitEngine=="false" && !$enableDrilldown)
					events:{
						click: scope.chartInitializer.handleCrossNavigationTo,
					}
		         #elseif($chart.isCockpitEngine=="true")
		              	events:{
		                	click: handleCockpitSelection
		            	}
		         #end
            }, 
            #end
            dataLabels: {
                   allowOverlap: true,
            },
            #* 
            	From Highcharts API: When a series contains a data array that is longer than this, 
            	only one dimensional arrays of numbers, or two dimensional arrays with x and y values 
            	are allowed. Also, only the first point is tested, and the rest are assumed to be the 
            	same format. This saves expensive data checking and indexing in long series. Set it to 
            	0 disable. Defaults to 1000.
            	
            	URL: http://api.highcharts.com/highcharts#plotOptions.series.turboThreshold
            	
            	We will increase this value in order to display series that contain a data array bigger
            	than 1000 (default), because it is most likely that we will have this situation very 
            	often. 
            	
            	@author: danristo (danilo.ristovski@mht.net)
            *#
            turboThreshold: 200000
        }
       
    }
}
