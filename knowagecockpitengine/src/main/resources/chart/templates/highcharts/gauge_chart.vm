#set($dataFields = $data.metaData.fields) ## columns of data table
#set($dataColumnsMapper = {})

#foreach ($dataField in $dataFields) ## conversion column name to internal column name
	#if($dataField.class.name == 'java.util.LinkedHashMap')
		#set($dataFieldHeader = $datasettransformer.setGroupingFunctionToLowerCase($dataField.header))
    	#set($workAroundNoPrint = $dataColumnsMapper.put($dataFieldHeader , $dataField.name))
	#end
#end

#*
	Take all colors from the color palette.
	@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
*#
#set($seriesColorsMap = $chart.COLORPALETTE.COLOR)

#*
	If the color palette is not empty and if the data structure of the palette is HashMap, 
	which means that it contains a single color, take that map and put it inside the list
	so we can proceed equally in this case as it (palette) contains more than one color.
	
	@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
*#
#if("$!seriesColorsMap"!="" && $seriesColorsMap.class.name == "java.util.LinkedHashMap")

	#set($seriesColorsMapTemp = [])
	#set($workAroundNoPrint = $seriesColorsMapTemp.add($seriesColorsMap))	
	#set($seriesColorsMap = $seriesColorsMapTemp)
	
#end

#set($rows = $data.rows) ## data in table rows

#set($series = $chart.VALUES.SERIE) ## metadata related to series

#set($seriesMap = {}) ## conversion series metadata to map object
#if($series.class.name == 'java.util.LinkedHashMap')
	#set($workAroundNoPrint = $seriesMap.put($series.name , $series))
#else
	#foreach($serie in $series)
		#set($workAroundNoPrint = $seriesMap.put($serie.name , $serie))
	#end
#end

#set($range = $datasettransformer.getRange($rows, $dataColumnsMapper, $seriesMap))
#set($categoriesCardinality = $datasettransformer.getCategoriesCardinality($rows, $chart.VALUES.CATEGORY, $dataColumnsMapper))

#set($type = 'gauge')
#set($subtype = 'simple')
#if($chart.subtype && $chart.subtype=="vumetar")
	#set($subtype = 'vumetar')
#elseif($chart.subtype && $chart.subtype=="solid")
	#set($subtype = 'solid')
	#set($type = 'solidgauge')
#elseif($chart.subtype && $chart.subtype=="activity")
	#set($type= 'solidgauge')
	#set($subtype = 'activity')
#end

#*
	If the number of series is grater then number of colors in Color Pallete, 
	set the color of remaining series to default one. Otherwise, use colors 
	from Color Pallete, defained by user. 
*#
#set($seriesNum = $series.size())
#set($seriesColorsMapNum = $seriesColorsMap.size())

#if($subtype == 'activity' && $seriesNum > $seriesColorsMapNum)
	
	#foreach($colorObj in $series)
		#set($counter = $foreach.index)	
		#if($counter >= $seriesColorsMapNum)	
			#set($color = $datasettransformer.getColorObject($counter))	
			#set($temp = $seriesColorsMap)	
			#set($new = $temp.add($color))	
			#set($seriesColorsMap = $temp)			
		#end			
	#end	
#end


{
    chart: {
    
    	## Additional data needed for cross navigation paramteres	
			 
		additionalData:
		{
			categoriesCardinality: $categoriesCardinality,
			range: $range
    	},
    
    	type: '$type',
    	subtype: "$subtype",
		#*
			This parameter must be set to false, since if not defined
			in the case where we have more than one Y-axis ticks on lines 
			will have wrong values.
			
			@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
		*#
		alignTicks: false,

   		#if($chart.style.backgroundColor != '')
   		backgroundColor: '$chart.style.backgroundColor', ##outer chart background
    	#end
   		#if(!$exportWebApp)
   		 #if($chart.height != '' && $chart.isCockpitEngine!="true")
        	height: $chart.height,
        #end
        
        #*
    		Dimension type (pixels or percentage) parameter for height of the chart
    		is provided.     		
    		NOTE: The same goes for the width of the chart (parameter 'widthDimType').    				
    		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
    	*#
     	#if($chart.heightDimType && $chart.isCockpitEngine!="true")
     	heightDimType: '$chart.heightDimType',
       	#else 
      	 	heightDimType: 'pixels',
        #end
        
        #if($chart.width != '' && $chart.isCockpitEngine!="true")
          width: $chart.width,
    	#end
    	
    	#if($chart.widthDimType && $chart.isCockpitEngine!="true")
    	 widthDimType: '$chart.widthDimType',
  	   	#else 
	  	   	widthDimType: 'pixels',
        #end
		#end
        plotBackgroundColor: null,
        plotBorderWidth: 0,
        plotShadow: false
    },
    
    title: {
        text: "$chart.TITLE.text",
        
        #set ($titleAlign = $chart.TITLE.style.align)
        #if ($titleAlign != '' )
        
        	#if ($titleAlign == 'left')
        	x: 70,
        	#elseif ($titleAlign == 'right')
        	x: -70,
        	#end
        
        align: '$titleAlign',
        #end
        
        style:{
        #foreach($styleName in $chart.TITLE.style.keySet())
        	#set ($axisTytleStyle = $chart.TITLE.style[$styleName])
    		#if ($styleName == 'fontWeight' && ($axisTitleStyle == 'italic' || $axisTitleStyle == 'normal'))
    			fontStyle: '$axisTitleStyle',
			#elseif($styleName == 'fontWeight' && $axisTytleStyle == 'underline')
    			textDecoration: 'underline',
			#else		        			
    			$styleName: '$axisTytleStyle',
    		#end
		#end
	    }
    },
    
    #if($chart.SUBTITLE.text != '')
    subtitle: {
        text: "$chart.SUBTITLE.text",
        
        #set ($subtitleAlign = $chart.SUBTITLE.style.align)
        #if ($subtitleAlign != '' )
        
        	#if ($subtitleAlign == 'left')
        	x: 70,
        	#elseif ($subtitleAlign == 'right')
        	x: -70,
        	#end
        
        align: '$subtitleAlign',
        #end
        
        style:{
        #foreach($styleName in $chart.SUBTITLE.style.keySet())
        	#set ($axisSubtitleStyle = $chart.SUBTITLE.style[$styleName])
    		#if ($styleName == 'fontWeight' && ($axisSubtitleStyle == 'italic' || $axisSubtitleStyle == 'normal'))
    			fontStyle: '$axisSubtitleStyle',
			#elseif($styleName == 'fontWeight' && $axisSubtitleStyle == 'underline')
    			textDecoration: 'underline',
			#else		        			
    			$styleName: '$axisSubtitleStyle',
    		#end
		#end
		}
    },
    #end

    pane: {    
        
    	#if($chart.PANE.startAngle)
        	startAngle: $chart.PANE.startAngle,
        #end
        #if($chart.PANE.endAngle)
        	endAngle: $chart.PANE.endAngle,
        #end
        
        background: [
        #if($subtype=="simple")
        {
            backgroundColor: {
                linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                stops: [[0, '#FFF'],[1, '#333']]
            },
            borderWidth: 0,
            outerRadius: '109%'
        }, {
            backgroundColor: {
                linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                stops: [
                    [0, '#333'],
                    [1, '#FFF']
                ]
            },
            borderWidth: 1,
            outerRadius: '107%'
        }, {
            // default background
        }, {
            backgroundColor: '#DDD',
            borderWidth: 0,
            outerRadius: '105%',
            innerRadius: '103%'
        }
        #elseif($subtype=='solid')
        {
            innerRadius: '60%',
            outerRadius: '100%',
            shape: 'arc'
        }
        #elseif($subtype == 'activity')        	
        	#set($offset = 0)
        	#set($centerRadius = 25)
        	#set($outer = 101)
        	        
        	#foreach($serie in $series)
        		{	 
        			#set($opacityColor = $seriesColorsMap[$foreach.index].value)
        			       			
        			#set($outerRadius = $outer - 1)
        			outerRadius: $outerRadius+"%",        			
        			#set($offset = (100 - $centerRadius) / $seriesNum)        		
        			#set($innerRadius = $outerRadius - $offset)
        			#set($outer = $innerRadius)
        			innerRadius: $innerRadius +"%",
        			backgroundColor: Highcharts.Color("$opacityColor")
               				  .setOpacity(0.3)
              				  .get()
        		},
        	#end
        #end
        ]
    },
    
    #set($axisList = {})
    #if($chart.AXES_LIST.AXIS.class.name == 'java.util.ArrayList')
    	#set($axisList = $chart.AXES_LIST.AXIS)
    #else
    	#set($axis = $axisList.put($axis.id , $chart.AXES_LIST.AXIS))
    #end
    
 	#set($counterYAxis = 0) 
 	#set($counterYAxisNames={})
     
    yAxis:[
        ## Serie add
              
        #foreach ($yAxis in $axisList)   
                
        	#if ($yAxis.position != "bottom")
        	{            	        	
        		#if ($yAxis.min && $yAxis.min!="")	
					min: $yAxis.min,
    			#elseif ($yAxis.min && $yAxis.min=="")
    				min: 0,
    			#end
    			
		        #if ($yAxis.max && $yAxis.max!="")   
					max: $yAxis.max,	
    			#elseif ($yAxis.max && $yAxis.max=="")
    				max: 0,
    			#end
		        
		        #set($counterYAxisNames["$yAxis.alias"] = $counterYAxis)
		        
	        	title: {
		        	#if($yAxis.TITLE.enabled)
				 	 	enabled: $yAxis.TITLE.enabled
				 	#end
			 	 	
			 	 	#if($chart.hideAxisTitleSerie)
				 	#if($chart.hideAxisTitleSerie=="true")
				 	 	text: "",	
				 
				 	#else
				 	 	text: "$yAxis.TITLE.text",		
				 	#end   
				 	#else
				  		text: "$yAxis.TITLE.text",		
					#end 
	        		
				 	#if( $yAxis.TITLE.style )
		        		style:{
		        		
				        	#foreach($styleName in $yAxis.TITLE.style.keySet())
				        	
				        		#set ($axisTitleStyle = $yAxis.TITLE.style[$styleName])
				        		
				        		#if ($styleName == 'fontWeight' && ($axisTitleStyle == 'italic' || $axisTitleStyle == 'normal'))
				        			fontStyle: '$axisTitleStyle',
								#elseif($styleName == 'fontWeight' && $axisTitleStyle == 'underline')
				        			textDecoration: 'underline',
				        		#elseif($styleName == 'align')
				        			#set($alignTitle = $axisTitleStyle)
								#else		        			
				        			$styleName: '$axisTitleStyle',
				        		#end
				        		
				        	#end			        	
		        		},
		        		
		        		#*
			        		Mapping between alignment types provided by the alignment combo of the Y-axis Title
			        		and the alignment types provided for this item by the Highcharts library
			        		
			        		@author: danristo (danilo.ristovski@mht.net)
			        	*#				        	
			        	#if($alignTitle!="" && $alignTitle!="null")			        	
			        		#if($alignTitle == "left")
			        			align: "high",
			        		#elseif($alignTitle == "right")
			        			align: "low",
			        		#else
			        			align: "middle",
			        		#end				        		
			        	#end
		        	#end
	        	},
	        	
	        	#if($yAxis.lineColor && $yAxis.lineColor!="")
	        		lineColor: '$yAxis.lineColor', ##'#339',
	            #else
		            lineColor: '#000000',
	            #end
	            
	        	#if($yAxis.tickPosition && $yAxis.tickPosition!="")
	        		tickPosition: '$yAxis.tickPosition',
	        	#end
	        	
	            #if($yAxis.tickColor && $yAxis.tickColor!="")
	            	tickColor: '$yAxis.tickColor',
	            #end
	            
	            #if($yAxis.minorTickColor  && $yAxis.minorTickColor!="")
	            	minorTickColor: '$yAxis.minorTickColor',
	            #end
	            	        	
	         	#*#if ($yAxis.offset && $yAxis.offset!="")    	
					offset: $yAxis.offset,    			   				
    			#end*#
    			
    			#set($offsetValue = $counterYAxis*(-30))
    			
    			offset: $offsetValue, 
    			
    			#if ($yAxis.lineWidth && $yAxis.lineWidth!="" && $yAxis.lineWidth!=0)  
    				lineWidth: $yAxis.lineWidth, 				
    			#else
	    			lineWidth: 1, 
    			#end
    			
    			 #if ($yAxis.minorTickLength && $yAxis.minorTickLength!="") 
    					minorTickLength: $yAxis.minorTickLength,				
    			#end
    			
    			 #if ($yAxis.minorTickWidth && $yAxis.minorTickWidth!="")
    					minorTickWidth: $yAxis.minorTickWidth,    				
    			#end
    			
    			 #if ($yAxis.tickWidth && $yAxis.tickWidth!="")
    					tickWidth: $yAxis.tickWidth,
    			#end
	            
			 	#if ($yAxis.tickLength && $yAxis.tickLength!="")
    					tickLength: $yAxis.tickLength,
    			#end
	        	
	            #if($yAxis.endOnTickGauge)
	            	endOnTick: $yAxis.endOnTickGauge,
	            #end
	            
	        	#if(!$yAxis.minorTickEnabled || !$yAxis.minorTickInterval)
	        		minorTickInterval: 'auto',
        		#else
        			minorTickInterval: $yAxis.minorTickInterval,
	        	#end
	            
	            #if($yAxis.minorTickPosition)
	            	minorTickPosition: '$yAxis.minorTickPosition',
	            #end
				
				#if($yAxis.tickPixelInterval && $yAxis.tickPixelInterval!="")
	            	tickPixelInterval: $yAxis.tickPixelInterval,
	            #end
	        	
	        	#if($yAxis.LABELS)
	        	labels: {
	        		
	        			#if ($yAxis.LABELS.distance && $yAxis.LABELS.distance!="")
	    						distance: $yAxis.LABELS.distance,
    					#end 
    			
	    			 	#if ($yAxis.LABELS.rotationEnabled && $yAxis.LABELS.rotation)    	
	    						rotation: $yAxis.LABELS.rotation,
	    				#else
	    						rotation: 0,
    					#end
	                
		    		#if($yAxis.style)
		        		style:{
			        	#foreach($styleName in $yAxis.style.keySet())			        	
			        		#set ($axisStyle = $yAxis.style[$styleName])
			        					        		
			        		#if ($styleName == 'fontWeight' && ($axisStyle == 'italic' || $axisStyle == 'normal'))
			        			fontStyle: '$axisStyle',
							#elseif($styleName == 'fontWeight' && $axisStyle == 'underline')
			        			textDecoration: 'underline',			        					        		
							#elseif($styleName == 'align')
			        			#set($alignLabels = $axisStyle)
							#else
			        			$styleName: '$axisStyle',
			        		#end
			        	#end
		        		},
		        		
		        		#*			        				        		
			        		Alignment for Y-axis labels.
			        		
			        		@author: danristo (danilo.ristovski@mht.net)
			        	*#				        	
			        	#if($alignLabels!="" && $alignLabels!="null")	
			        		align: "$alignLabels"		        					        				        		
			        	#end
		        		
		        	#end
	            },
	        	#end
	        	#if($yAxis.PLOTBANDS!="")
		        	#if($yAxis.PLOTBANDS)
			        	plotBands: [        	
			        	
			        	#set($plots = $yAxis.PLOTBANDS.PLOT) 
			        	   #if($subtype !="solid")    	
			        	#if ($plots.class.name == "java.util.ArrayList")
			        	
				        	#foreach($plotElement in $plots)
			        		{
				        		#foreach($valueKey in $plotElement.keySet())
					        	
					    			#if ($valueKey == "color" && $plotElement.color)
					    				color: '$plotElement.color',
					    			#elseif ($valueKey == "from")
					    				from: $plotElement.from,
					    			#elseif ($valueKey == "to")
					    				to: $plotElement.to,
					    			#end
			        			
			        			#end
			        		},
				        	#end
				        	
				        #else
				         
				         	#if ($plots.color != "" && $plots.from != "" && $plots.to != "")
					        	{
					        		#if($plots.color != "")
					        			color: '$plots.color',
					        		#end
					        		
					        		#if($plots.from != "")
					        			from: $plots.from,
					        		#end
					        		
					        		#if($plots.to != "")
					        			to: $plots.to
					        		#end		        		
					        	},
					        #end
				          #end
				        #end
			        	
			        	#*
			        	#foreach($valueKey in $yAxis.PLOTBANDS.PLOT.keySet())
			        	{
			    			#if ($valueKey == "color")
			    				color: $yAxis.PLOTBANDS.PLOT.color
			    			#end
		        			
	        			},
		        		#end
			        	
			        	#if ($yAxis.PLOTBANDS.PLOT.class.name != "java.util.LinkedHashMap")
			        	
				        	#foreach($band in $yAxis.PLOTBANDS.PLOT)
				        	{
				        	
				        		from: $band.from,
				        		to: $band.to,
				        		color: '$band.color'
				        		
				        	},
				        	#end 
			        	#else
			        		{
			        			#if ($yAxis.PLOTBANDS.PLOT.from != '')
				        			from: $yAxis.PLOTBANDS.PLOT.from,
			        			#else
			        				from: '',
			        			#end
			        			
			        			#if ($yAxis.PLOTBANDS.PLOT.to != '')
				        			to: $yAxis.PLOTBANDS.PLOT.to,
			        			#else
			        				to: '',
			        			#end
			        			
			        			#if ($yAxis.PLOTBANDS.PLOT.color != '')
				        			color: $yAxis.PLOTBANDS.PLOT.color,
			        			#else
			        				color: '',
			        			#end
				        	}
			        	#end
			        	*#
			        	],
			        	#if($subtype=="solid")
				        	stops:[
			   						#if($plots.size() > 0)
								        #foreach($plotElement in $plots)   																								
										[$plotElement.to/$yAxis.max,'$plotElement.color'],																			      																							        		
										#end
									#else
										        [0.3, '#7cb5ec'], 
									            [0.6, '#434348'],
									            [1, '#90ed7d'],
									#end
							],
						 #end 	
			        #end 
		        #end
		        
		        
		        #if($yAxis.TARGET!="")
		        	#if($yAxis.TARGET)
			        	plotLines : [
					   		{
								color: "$yAxis.TARGET.get(0).color",
					   			dashStyle: "$yAxis.TARGET.get(0).dashStyle",
					   			#if($yAxis.TARGET.get(0).value=="")
					    			value :0,
					    		#else
					    			value: '$yAxis.TARGET.get(0).value',
					    		#end
					   			width: $yAxis.TARGET.get(0).width,
					   		},			
					   	], 
			        	 
			        #end 
		        #end
		        
		        
		        
		        
		        },
    		#end       
    		
    		#set($counterYAxis = $counterYAxis+1)      
        #end
        ## END Serie add
        ],

    
    series: [
    
    	#*
    		Local variables:
    			- counterYAxis (deprecated): was used for counting of number of Y-axis of the chart
    			- seriesCounter: for taking care of current serie's ordinal number
    			- seriesDataLabelsCounter: how many of 
    	*#
    	#set($counterYAxis = 0)
    	#set($seriesCounter = 0)
    	#set($seriesDataLabelsCounter = 0)
    	
    	#*
    		Color that will be taken by the current serie and all its' elements (dial, data labels,
    		tooltip). It will be determined basing on the following code.
    		
    		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
    	*#
    	#set($relatedSerieColor = "") 
    	
    	#*
    		Counter for colors that are taken from the color palette already. This is important
    		because when there is no color provided for the current serie item, the next available
    		in the palette is taken as the serie color. When all available colors are taken from the
    		palette, the empty value (string) will be set as a color value (Highcharts now takes care).
    		    		
    		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
    	*#
    	#set($colorFromPaletteCounter = 0)
    	
		#set($offset = 0)
    	#set($centerRadius = 25)
    	#set($outer = 101)
    	
    	#foreach($valueKey in $seriesMap.keySet())
    	
	    	#set($relatedSerie = $seriesMap.get($valueKey))
	    	
	    	{
		    	name: '$relatedSerie.name',
		    	
		    	#*
		    		If the color for the current serie is not defined by the user, take the color from 
		    		the appropriate place in the color palette that is enabled for the GAUGE chart type.
		    		Namely, take the first available color from the palette. Otherwise, take the serie's
		    		color value.
		    		
		    		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
		    	*#
		    	#if($relatedSerie.color != "")		
		    	    	
		    		color: '$relatedSerie.color',
		    		#set($relatedSerieColor = $relatedSerie.color)	
		    			    		
		    	#else	
		    		    
    		    	#*
    		    		If color palette is not empty, is array of colors and counter of already taken
    		    		colors from the palette is not bigger than the number of items in the palette,
    		    		take the color value from the first available palette element and set the color
    		    		keeper for the current serie to this color value ("relatedSerieColor").
    		    		
    		    		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
    		    	*#		
		    		#if ("$!seriesColorsMap"!="" && $seriesColorsMap.class.name == "java.util.ArrayList" && 		    				
	    						$colorFromPaletteCounter<=(-1) + $seriesColorsMap.size())
		    				
		    				#set($relatedSerieColor = $seriesColorsMap[$colorFromPaletteCounter].value)	
    						#set($colorFromPaletteCounter = $colorFromPaletteCounter+1)
    						
    				#else
    					
    					#*
	    		    		Otherwise, set the color to an empty value.	    		    		
	    		    		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
    		    		*#
    					#set($relatedSerieColor = "")	
    					
		    		#end
		    		
		    		color: '$relatedSerieColor',
		    		
		    	#end
		    	
		    	#*
		    		This parameters links serie (data) and it's dials with the
		    		appropriate Y-axis on the GAUGE chart.
		    		
		    		@author: danristo (danilo.ristovski@mht.net)
		    	*#
		    	yAxis: $counterYAxisNames.get($relatedSerie.axis),
		    	
		    	#set($counterYAxis = $counterYAxis + 1)	    	
		    		    	
		        data: [
		    	    #set($relatedSerieColName = "$relatedSerie.name"+"_#if($relatedSerie.groupingFunction)$relatedSerie.groupingFunction.toLowerCase()#{else}sum#end")
		    	    #set($serieColumnsMapped = $dataColumnsMapper.get($relatedSerieColName)) ## "Vendite_AVG" -> "column_5" ## "Ricavi_SUM" -> "column_6"
															
					#foreach($row in $rows)
						#set ($serieValue = $row.get($serieColumnsMapped))						
							#if($serieValue!="")																								
							{
								#if($subtype == 'activity')
				        			
				        			#set($outerRadius = $outer - 1)
				        			color: '$relatedSerieColor',
				        			radius: $outerRadius+"%",        			
				        			#set($offset = (100 - $centerRadius) / $seriesNum)        		
				        			#set($innerRadius = $outerRadius - $offset)
				        			#set($outer = $innerRadius)
				        			innerRadius: $innerRadius +"%",				        			
		        				#end
		        				
								y:$serieValue				        			
		        			},
							#end	
					#end
		    	],
		    	
		    	#set($relatedSerieShowValue = $relatedSerie.showValue)
		    	
		    	#*
		    		If the 'relatedSerieShowValue' variable is explicitly true,
		    		set this boolean state to the "enabled" property of the 
		    		data label. Otherwise, put the false state (data label will
		    		not be displayed for this serie item). 	    		
		    		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
		    	*#
		    	#if ($relatedSerieShowValue == "true")
		    	
		    		#set($serieEnabled = true)
		    		#set($seriesDataLabelsCounter = $seriesDataLabelsCounter + 1)
		    		
		    	#else
		    	
		    		#set($serieEnabled = false)
		    		
		    	#end
		    	
		    	dataLabels: 
		    	{	    	
		    		enabled: $serieEnabled,
		    	
			    	#* 
			    		Added second part of the if-statement ($relatedSerie.DATA_LABELS.yPositionDataLabels!="") since 
			    		we can skip specification of the y-position data label for some serie items. If not specified
			    		like this (skipping data definition for property that are not mandatory), error on browser
			    		appears since it is not possible to decode JSON out of the JSON string from the response (chart.jsp).
			    		
			    		@editedBy Danilo Ristovski (danristo, danilo.ristovski@mht.net)
			    	*#	    	
			    	
			    	#if($relatedSerie.DATA_LABELS.colorDataLabels)
			    		##color: '$relatedSerie.DATA_LABELS.colorDataLabels', ## Original (commented by: Danilo)
			    		color: '$relatedSerieColor',
			    	#end
			    	
		    	 	#set($formatDataLabels = '')
					
					#if ($relatedSerie.DATA_LABELS.yPositionDataLabels == "")
				    	
				    	#*
			    			If the serie's ordinal number is 5 or less, put its data
			    			label under the center of the GAUGE chart (where dials 
			    			cross).				    			
			    			@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
			    		*#
				    	#if ($seriesDataLabelsCounter <= 5)
				    	
				    		#set($yPosition = $seriesDataLabelsCounter*40)
				    		y: $yPosition,
				    		
				    	#else
				    		
				    		#set($seriesDataLabelsCounterTemp = (-6) + $seriesDataLabelsCounter)
				    		
				    		#*
				    			If the serie's ordinal number is 6 or more, put its data
				    			label above the center of the GAUGE chart (where dials 
				    			cross).				    			
				    			@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
				    		*#
				    		#if ($seriesDataLabelsCounterTemp == 0)
				    			
				    			#set($yPosition = ($seriesDataLabelsCounterTemp+1)*(-60))
			    			#else
			    				#set($yPosition = $seriesDataLabelsCounterTemp*(-40))
			    				#set($yPosition = (-60) + $yPosition)
			    			#end
			    							    		
				    		y: $yPosition,
				    		
				    	#end
				    	
				    #else
				    	y: $relatedSerie.DATA_LABELS.yPositionDataLabels,
			    	#end
	                
	                #set ($postfixValueAsString = '')
	                
	                #if ($relatedSerie.postfixChar != '')
	                    #set ($postfixValueAsString = ' ' + $relatedSerie.postfixChar)
					#end
	                
	                #set ($prefixValueAsString = '')
	                
	                #if ($relatedSerie.prefixChar != '')
	                    #set ($prefixValueAsString = $relatedSerie.prefixChar + ' ')
					#end
	                
	                #set ($precisionValueAsString = '')
	                
	                #if ($relatedSerie.precision != '')
	                    #set ($precisionValueAsString = ':,.' + $relatedSerie.precision + 'f')
	               	#else
	               		#set ($precisionValueAsString = ':,.0f')
					#end
	                
	                #set ($formatDataLabels = ${prefixValueAsString} + '{y' + $precisionValueAsString + '}' + ${postfixValueAsString})
							    		
			    	#*#if($relatedSerie.DATA_LABELS.formatDataLabels && $relatedSerie.DATA_LABELS.formatDataLabels != '')
			    		format: '$relatedSerie.DATA_LABELS.formatDataLabels',
			    	#else
			    		format: '$formatDataLabels',
			    	#end*#
			    	
			    	/* 
                    	The scaling factor of the current series item can be empty (no scaling - pure (original) value) or "k" (kilo), "M" (mega), 
                    	"G" (giga), "T" (tera), "P" (peta), "E" (exa). That means we will scale our values according to this factor and display 
                    	these abbreviations (number suffix) along with the scaled number. Apart form the scaling factor, the thousands separator
                    	is included into the formatting of the number that is going to be displayed, as well as precision.
                    	@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
             		*/ 
			    	formatter: function() {
			                     
	                    var value = this.y;	
	                    var newValue = "";	                  
	                    var prefixChar = '${relatedSerie.prefixChar}';
	                    var postfixChar = '${relatedSerie.postfixChar}';

                      	var scaleFactor = '${relatedSerie.scaleFactor}';
                      	
                      	var decimalPoints = Highcharts.getOptions().lang.decimalPoint;
                      	var thousandsSep = Highcharts.getOptions().lang.thousandsSep;
                      				                      	
                      	var precision = '${relatedSerie.precision}';      	
                      	
                      	switch(scaleFactor.toUpperCase()) {
                      	
                      		case "EMPTY":
                      			/* No selection is provided for the number to be displayed as the data label (pure value). */
                      			newValue += Highcharts.numberFormat(value,precision,decimalPoints,thousandsSep);		                      			
                      			break;
                      		case "K":
                      			newValue += Highcharts.numberFormat(value/Math.pow(10,3),precision,decimalPoints,thousandsSep) + "k";	
                      			break;
                      		case "M":
                      			newValue += Highcharts.numberFormat(value/Math.pow(10,6),precision,decimalPoints,thousandsSep) + "M";	
                      			break;
                      		case "G":
                      			newValue += Highcharts.numberFormat(value/Math.pow(10,9),precision,decimalPoints,thousandsSep) + "G";
                      			break;
                  			case "T":
                      			newValue += Highcharts.numberFormat(value/Math.pow(10,12),precision,decimalPoints,thousandsSep) + "T";
                      			break;
                      		case "P":
                      			newValue += Highcharts.numberFormat(value/Math.pow(10,15),precision,decimalPoints,thousandsSep) + "P";
                      			break;
                  			case "E":
                      			newValue += Highcharts.numberFormat(value/Math.pow(10,18),precision,decimalPoints,thousandsSep) + "E";
                      			break;
                  			default:
                  				/* The same as for the case when user picked "no selection" - in case when the chart 
                  				template does not contain the scale factor for current serie */
                  				newValue += Highcharts.numberFormat(value,precision,decimalPoints,thousandsSep);	
                      			break;
                      	
                      	}						
                    		                       
                      	return prefixChar + ' ' + newValue + ' ' + postfixChar;
                      	
	            	}
			    	
		    	},
		    	
	        	tooltip: { 
	        	
	        		#set($seriePrefix = $relatedSerie.prefixChar)
					
					#if($seriePrefix)
						valuePrefix: '$seriePrefix',
					#end
						
					#set($seriePostfix = $relatedSerie.postfixChar)
					
					#if($seriePostfix)
						valueSuffix: '$seriePostfix',
					#end				
					
					#set($serieScaleFactor = $relatedSerie.scaleFactor)
					
					#if($serieScaleFactor)
						valueScaleFactor: '$serieScaleFactor',
					#end
						
					#if ($relatedSerie.precision)
						valueDecimals: '$relatedSerie.precision',
					#end
					
					#if ($relatedSerie.TOOLTIP.style.fontWeight != '')
						ttFontWeight: '$relatedSerie.TOOLTIP.style.fontWeight',
					#end	
					
					#*
						If background color for the serie tooltip is not defined (empty)
						take the default value (#FCFFC5) so the tooltip can be readable 
						over the chart that stays behind it. Otherwise, take the value 
						of the background color specified by the user.				
						@author: danristo (danilo.ristovski@mht.net)
					*#
					#if ($relatedSerie.TOOLTIP.backgroundColor!="")
	                	ttBackColor: '$relatedSerie.TOOLTIP.backgroundColor',
		            #else
		            	ttBackColor: '#FCFFC5',	
					#end
					
					#if ($relatedSerie.TOOLTIP.style.color != '')
						ttColor: '$relatedSerie.TOOLTIP.style.color' ,
					#end
						
					#if ($relatedSerie.TOOLTIP.style.align != '')
						ttAlign: '$relatedSerie.TOOLTIP.style.align' ,
					#end
						
					#if ($relatedSerie.TOOLTIP.style.fontFamily && $relatedSerie.TOOLTIP.style.fontFamily != '')
						ttFont: '$relatedSerie.TOOLTIP.style.fontFamily' ,	
					#end
						
					#if ($relatedSerie.TOOLTIP.style.fontWeight != '')
						ttFontWeight: '$relatedSerie.TOOLTIP.style.fontWeight',
					#end
						
					#if ($relatedSerie.TOOLTIP.style.fontSize != '')
						ttFontSize: '$relatedSerie.TOOLTIP.style.fontSize' ,
					#end		
				},		
							
				###if ($relatedSerie.DIAL.backgroundColorDial)
				###if ($relatedSerie.color)
					
					#*
						Determining what should length of dial(s) be. This is important since
						it is crucial that dial 
					*#
					#set($percentDialAxis = (100-$counterYAxisNames.get($relatedSerie.axis)*9)+"%")
					
					dial: 
					{
		                ##backgroundColor: '$relatedSerie.DIAL.backgroundColorDial',
		                backgroundColor: '$relatedSerieColor',
		                ## This one manages the length of the dial
		                radius: "$percentDialAxis",
		            },
		            
	           ## #end              
	        },
	    #end
	],
    
    
    
    tooltip: {
	    #if($chart.TOOLTIP && $chart.TOOLTIP.borderWidth)
	    	borderWidth: $chart.TOOLTIP.borderWidth,
	    #end
	    
	    #if($chart.TOOLTIP && $chart.TOOLTIP.borderRadius)
	    	borderRadius: $chart.TOOLTIP.borderRadius,
	    #end
	    
        useHTML: true,
        backgroundColor: null,
        
        style: {
            padding: 0
        },
        formatter: function() {		
       
        	var ttColor = this.series.tooltipOptions.ttColor ? this.series.tooltipOptions.ttColor : "";
        	var ttBackColor = this.series.tooltipOptions.ttBackColor ? this.series.tooltipOptions.ttBackColor : "";
        	
        	var ttAlign = this.series.tooltipOptions.ttAlign ? this.series.tooltipOptions.ttAlign : '';
        	var ttFont = this.series.tooltipOptions.ttFont ? ' ' + this.series.tooltipOptions.ttFont : '';
        	var ttFontSize = this.series.tooltipOptions.ttFontSize ? ' ' + this.series.tooltipOptions.ttFontSize : '';
        	var ttFontWeight = this.series.tooltipOptions.ttFontWeight ? ' ' + this.series.tooltipOptions.ttFontWeight : '';        	
                	       	
        	/*
        		Depending on font style chosen by the user for the serie tooltip
        		we will specify respective CSS attribute so it can be taken by the
        		tooltip.
        		@author: danristo (danilo.ristovski@mht.net)
        	*/
        	var tooltipFontStyle = "";
        	
        	if (ttFontWeight == " underline")
        	{
        		tooltipFontStyle = " text-decoration: underline;";
        	}
        	else if (ttFontWeight == " italic")
        	{
        		tooltipFontStyle = "font-style: italic;";
        	}
        	else if (ttFontWeight == " bold")
        	{
        		tooltipFontStyle = "font-weight: bold;";
        	}
        	else
        	{
        		tooltipFontStyle = "font-weight: normal;";
        	}
        	
        	/*
        		Old implementation, with just precision option (and potentialy prefix and postfix).        		
        		@commentBy Danilo Ristovski (danristo, danilo.ristovski@mht.net)
        	*/
        	
        	var valueDecimals = this.series.tooltipOptions.valueDecimals ? this.series.tooltipOptions.valueDecimals : 0;
        	var valuePrefix = this.series.tooltipOptions.valuePrefix ? this.series.tooltipOptions.valuePrefix + ' ' : '';
        	var valueSuffix = this.series.tooltipOptions.valueSuffix ? ' ' + this.series.tooltipOptions.valueSuffix : '';
        	var scaleFactor = this.series.tooltipOptions.valueScaleFactor ? this.series.tooltipOptions.valueScaleFactor : 'empty';
        	
        	var thisValue = this.y;
        	
        	/*
        		When there is no precision set by the user, force the precison of
        		value zero, since it has the same effect whether is set or not, but
        		it helps for other situations in which the value is not zero. 
        		
        		Also, always set the thousands separator, no matter what.
        		
        		@modifiedBy Danilo Ristovski (danristo, danilo.ristovski@mht.net)
        	*/
        	
    		var decimalPoint = Highcharts.getOptions().lang.decimalPoint,
				thousandsSep = Highcharts.getOptions().lang.thousandsSep;
				switch(scaleFactor.toUpperCase()) {
										
					case "EMPTY":
					   thisValue = Highcharts.numberFormat(thisValue,valueDecimals,decimalPoint,thousandsSep);		                      			
					   break;
					case "K":
					   thisValue = Highcharts.numberFormat(thisValue/Math.pow(10,3),valueDecimals,decimalPoint,thousandsSep) + "k";	
					   break;
					case "M":
					   thisValue = Highcharts.numberFormat(thisValue/Math.pow(10,6),valueDecimals,decimalPoint,thousandsSep) + "M";	
					   break;
					case "G":
					   thisValue = Highcharts.numberFormat(thisValue/Math.pow(10,9),valueDecimals,decimalPoint,thousandsSep) + "G";
					   break;
					case "T":
					   thisValue = Highcharts.numberFormat(thisValue/Math.pow(10,12),valueDecimals,decimalPoint,thousandsSep) + "T";
					   break;
					case "P":
					   thisValue = Highcharts.numberFormat(thisValue/Math.pow(10,15),valueDecimals,decimalPoint,thousandsSep) + "P";
					   break;
					case "E":
					   thisValue = Highcharts.numberFormat(thisValue/Math.pow(10,18),valueDecimals,decimalPoint,thousandsSep) + "E";
					   break;
					default:
					   thisValue = Highcharts.numberFormat(thisValue,valueDecimals,decimalPoint,thousandsSep);	
					   break;
										
				}
				thisValue = valuePrefix + thisValue + valueSuffix;  
        	
	        
        	/*
        		Separate font elements (family, size and weight (style)) so the tooltip
        		font characteristics can be separately (independently) specified by the user.
        		@modifiedBy: danristo (danilo.ristovski@mht.net)
        	*/    	
            var result = 
            	'<div style="padding:10px;color:' + ttColor + '; opacity: 0.9; background:' + ttBackColor + ';' + " font-family: " + ttFont + "; "
            					+ tooltipFontStyle + " font-size: " + ttFontSize + ';text-align:' + ttAlign + ';">'; 
            
            /*
        		Removed bold font style (weight) as default one for the serie value, since
        		style of the fonts on the tooltip will be the same for every single font
        		element on it. HTML tag <strong> is removed.
        		@modifiedBy: danristo (danilo.ristovski@mht.net)
        	*/
            result += this.series.name + ': ' + thisValue + '</div>';
            
            return result;
        }
    },
    
    #if($subtype == 'activity')
	  plotOptions: {
	        solidgauge: {
	            dataLabels: {
	                enabled: false
	            },	            
	            rounded: true
	        },
	        series: {
         		turboThreshold: 0
	        }
    	},
    #end
    
    #if($chart.EMPTYMESSAGE != '')
    lang: {
        noData: "$chart.EMPTYMESSAGE.text"
    },
    noData: {
		attr: {
			zIndex: 10
		},
    	style:{
    		fontFamily: '$chart.EMPTYMESSAGE.style.fontFamily',		
			fontSize: '$chart.EMPTYMESSAGE.style.fontSize',
			color: '$chart.EMPTYMESSAGE.style.color',
					
			#if($chart.EMPTYMESSAGE.style.fontWeight == 'italic' || $chart.EMPTYMESSAGE.style.fontWeight == 'normal')
    			fontStyle: '$chart.EMPTYMESSAGE.style.fontWeight',
    			fontWeight: '$chart.EMPTYMESSAGE.style.fontWeight',
			#elseif($chart.EMPTYMESSAGE.style.fontWeight == 'underline')
    			textDecoration: '$chart.EMPTYMESSAGE.style.fontWeight',
    			fontWeight: '$chart.EMPTYMESSAGE.style.fontWeight',
			#elseif($chart.EMPTYMESSAGE.style.fontWeight == 'bold')		        			
    			fontWeight: '$chart.EMPTYMESSAGE.style.fontWeight',
    		#end
		},
		position: {
			#set ($positionAlign = $chart.EMPTYMESSAGE.position.align)
			#set ($positionVerticalAlign = $chart.EMPTYMESSAGE.position.verticalAlign)
			#if ($positionAlign == "")      
			 	
			 	align: "center",
			#else		        			
        		align: '$positionAlign' ,  
		    #end
		    #if ($positionVerticalAlign == "")      
			 	
			 	verticalAlign: "middle"
			 #else		        			
        		verticalAlign: '$positionVerticalAlign'    
		    #end
			

		}
    },
    #end
    
    credits: { ##remove bottom credits text
    	enabled: false
    },
    
}