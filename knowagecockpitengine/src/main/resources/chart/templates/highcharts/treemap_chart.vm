#set($category = $chart.VALUES.CATEGORY)
#set($chartType = $CHART.type)
#set($dataRows = $data.rows)
#set($dataFields = $data.metaData.fields) ## columns of data table
#set($dataColumnsMapper = {})

#foreach ($dataField in $dataFields) ## conversion column name to internal column name
	#if($dataField.class.name == 'java.util.LinkedHashMap')
		#set($dataFieldHeader = $datasettransformer.setGroupingFunctionToLowerCase($dataField.header))
    	#set($workAroundNoPrint = $dataColumnsMapper.put($dataFieldHeader , $dataField.name))
	#end
#end

#set($columnsNeeded = {})

#set($columnCouter = 0)

   
#foreach($value in $category) 
 #set($columnsNeeded[$columnCouter] = $value.name)
 #set($columnCouter = $columnCouter + 1)
#end


## class java.util.LinkedHashMap - collection when rendering the chart
## class java.util.ArrayList - collection when exporting the chart (preview from the Designer)

#*
	According to the collection that we have for series for TREEMAP
	(an array or a map) we will take data from SERIE tag appropriately
	and proceed with the execution of the VM code. Since we have a 
	single serie item for this chart type, there will be no further
	inconsistency.
	
	@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
*#
#if ($chart.VALUES.SERIE.class.name == 'java.util.LinkedHashMap')
	#set($serie = $chart.VALUES.SERIE)
	#set($groupingFunction = $chart.VALUES.SERIE.groupingFunction)
#elseif ($chart.VALUES.SERIE.class.name == 'java.util.ArrayList')
	#set($serie = $chart.VALUES.SERIE[0])
	#set($groupingFunction = $chart.VALUES.SERIE[0].groupingFunction)
#end
#set($sizeCriteria = $chart.sizeCriteria)

#set($result = $datasettransformer.createTreeChart($columnsNeeded,$serie.name,$dataColumnsMapper,$dataRows, $groupingFunction.toLowerCase()))

#set($crossNavigation = '')
#set($crossNavigation = $chart.DRILL)

#set($seriesMap = {}) ## conversion series metadata to map object
#if($serie.class.name == 'java.util.LinkedHashMap')
	#set($workAroundNoPrint = $seriesMap.put($series.name , $serie))
#else
	#foreach($s in $series)
		#set($workAroundNoPrint = $seriesMap.put($serie.name , $s))
	#end
#end

#set($range = $datasettransformer.getRange($dataRows, $dataColumnsMapper, $seriesMap))

#set($categoriesCardinality = $datasettransformer.getCategoriesCardinality($dataRows, $chart.VALUES.CATEGORY, $dataColumnsMapper))

{
 	chart: 
 	{
  		type: '$chartType',
		#if($chart.isCockpitEngine=="true")
			drillable: $chart.drillable,
		#else
			drillable: true,
		#end
		
		  #if($chart.height != '' && $chart.isCockpitEngine!="true")
        	height: $chart.height,
        #end
        
        #*
    		Dimension type (pixels or percentage) parameter for height of the chart
    		is provided.     		
    		NOTE: The same goes for the width of the chart (parameter 'widthDimType').    				
    		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
    	*#
     	#if($chart.heightDimType && $chart.isCockpitEngine!="true")
       	 	heightDimType: '$chart.heightDimType',
       	#else 
      	 	heightDimType: 'pixels',
        #end
        
        #if($chart.width != '' && $chart.isCockpitEngine!="true")
    		width: $chart.width,
    	#end
    	
    	#if($chart.widthDimType && $chart.isCockpitEngine!="true")
        	widthDimType: '$chart.widthDimType',
  	   	#else 
	  	   	widthDimType: 'pixels',
        #end
    	

  	isCockpit: $chart.isCockpitEngine,
  	
  	#*
		If we are previewing a chart inside a Designer widget in the Cockpit, the 'chart.outcomingEventsEnabled' will be NULL, so we need to check if this is the case.
		If not providing this check, we will experience rendering problem within the Highcharts Export (value for 'outcomingEventsEnabled' template property will be 
		'$chart.outcomingEventsEnabled'.
		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
	*#
	#if($chart.isCockpitEngine=='true' && $chart.cliccable)
		cliccable: $chart.cliccable,
	#end
	#*
		Provide enough space for the "Back" button.		
	*# 
  
	## I think this is necessary when title and subtitle are not provided (danristo)
	#if ($chart.TITLE.text == "" && $chart.SUBTITLE.text == "")
		marginTop: 60,
	#end
  
  #if($chart.style.backgroundColor!="")
  	backgroundColor: '$chart.style.backgroundColor',
  #end
  
  		style: {			
			fontFamily: '$chart.style.fontFamily',
			fontSize: '$chart.style.fontSize',
					
			#if($chart.style.fontWeight == 'italic' || $chart.style.fontWeight == 'normal')
    			fontStyle: '$chart.style.fontWeight',
			#elseif($chart.style.fontWeight == 'underline')
    			textDecoration: '$chart.style.fontWeight',
			#elseif($chart.style.fontWeight == 'bold')		        			
    			fontWeight: '$chart.style.fontWeight',
    		#end
  		}
 },
 
 	#*
    	Handle the situation in which there are no colors inside the color palette as
    	the Highcharts library expects.    	
    	
    	@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
    *#
   	#if("$!chart.COLORPALETTE"!="" && (($chart.COLORPALETTE!="" && $chart.COLORPALETTE.class.name == 'java.lang.String') || 
   		($chart.COLORPALETTE.class.name == 'java.util.LinkedHashMap' && "$!chart.COLORPALETTE.COLOR"!="" && $chart.COLORPALETTE.COLOR.size()>0)))
    colors: [
 	
 		#*
 			Since the Highcharts library for this chart defines default color
 			for items, we do not need to check if there is more than one defined
 			in the structure that hold data about picked colors. It is permitted
 			not to have colors (after users saving of the file).
 		 	@author: danristo (danilo.ristovski@mht.net)
	 	*#
 		
 		#if ($chart.COLORPALETTE.COLOR.class.name != 'java.util.LinkedHashMap') 
			#foreach($color in $chart.COLORPALETTE.COLOR)
				'$color.value', 
			#end
		#else
			'$chart.COLORPALETTE.COLOR.value'
		#end
    ],
    #else
    	colors: [],
	#end
 
 	emptymessage: {
		text: "$chart.EMPTYMESSAGE.text",
		
		style: {
			fontFamily: '$chart.EMPTYMESSAGE.style.fontFamily',
			fontSize: '$chart.EMPTYMESSAGE.style.fontSize',
			fontColor: '$chart.EMPTYMESSAGE.style.color',
			textAlign: '$chart.EMPTYMESSAGE.style.align',
					
			#if($chart.EMPTYMESSAGE.style.fontWeight == 'italic' || $chart.EMPTYMESSAGE.style.fontWeight == 'normal')
    			fontStyle: '$chart.EMPTYMESSAGE.style.fontWeight',
			#elseif($chart.EMPTYMESSAGE.style.fontWeight == 'underline')
    			textDecoration: '$chart.EMPTYMESSAGE.style.fontWeight',
			#elseif($chart.EMPTYMESSAGE.style.fontWeight == 'bold')		        			
    			fontWeight: '$chart.EMPTYMESSAGE.style.fontWeight',
    		#end	
		}
	},
	
	title: {
		text: "$chart.TITLE.text",
		
		style: {
			fontFamily: '$chart.TITLE.style.fontFamily',
			fontSize: '$chart.TITLE.style.fontSize',
			fontColor: '$chart.TITLE.style.color',
			textAlign: '$chart.TITLE.style.align',	
					
			#if($chart.TITLE.style.fontWeight == 'italic' || $chart.TITLE.style.fontWeight == 'normal')
    			fontStyle: '$chart.TITLE.style.fontWeight',
			#elseif($chart.TITLE.style.fontWeight == 'underline')
    			textDecoration: '$chart.TITLE.style.fontWeight',
			#elseif($chart.TITLE.style.fontWeight == 'bold')		        			
    			fontWeight: '$chart.TITLE.style.fontWeight',
    		#end	
		}
	},
	
	subtitle: {
		text: "$chart.SUBTITLE.text",
		
		style: {
			fontFamily: '$chart.SUBTITLE.style.fontFamily',
			fontSize: '$chart.SUBTITLE.style.fontSize',
			fontColor: '$chart.SUBTITLE.style.color',
			textAlign: '$chart.SUBTITLE.style.align',	
					
			#if($chart.SUBTITLE.style.fontWeight == 'italic' || $chart.SUBTITLE.style.fontWeight == 'normal')
    			fontStyle: '$chart.SUBTITLE.style.fontWeight',
			#elseif($chart.SUBTITLE.style.fontWeight == 'underline')
    			textDecoration: '$chart.SUBTITLE.style.fontWeight',
			#elseif($chart.SUBTITLE.style.fontWeight == 'bold')		        			
    			fontWeight: '$chart.SUBTITLE.style.fontWeight',
    		#end		
		}
	},
	tooltip: {
		#if($chart.TOOLTIP)
		    #if($chart.TOOLTIP.borderWidth)
		    	borderWidth: $chart.TOOLTIP.borderWidth,
		    #end
		    
		    #if($chart.TOOLTIP.borderRadius)
		    	borderRadius: $chart.TOOLTIP.borderRadius,
		    #end
    	#end
    },
	
	#*
		Remove credits from the TREEMAP chart (the "Highcharts.com" link at the 
		bottom right side of the chart).
		@author: danristo (danilo.ristovski@mht.net)
	 *# 
	credits: 
	{ 
    	enabled: false
    },
      crossNavigation:
    {
    #if($crossNavigation != '') 
						crossNavigationDocumentName: '$crossNavigation.document',
						crossNavigationDocumentParams: [
							## if single PARAM node, not array
							#if($crossNavigation.PARAM_LIST.PARAM.class.name == "java.util.LinkedHashMap")
								#set($param = $crossNavigation.PARAM_LIST.PARAM)
								{ name: '$param.name', urlName:'$param.parameterUrlName', type: '$param.type', value: '$param.value' }
							#else
								##Array of parameters
								
								#foreach($param in $crossNavigation.PARAM_LIST.PARAM)
								{ name: '$param.name', urlName:'$param.parameterUrlName', type: '$param.type', value: '$param.value' },
								#end
							#end
						],
						#end
    },
	
	#*
		Customization (settings) for the "Back" button that appears when drilling
		down on the HEATMAP, needed for drilling up (returning back on the previous
		level). There is need to place it somewhere where it will not overlap the 
		chart and title/subtitle. 
		
		@author Danilo Ristovski (danristo, danilo.ristovski@mht.net)
	*#
	series:
	[
		{
			drillUpButton: 
			{
				#*
					Button will be placed on the center of the whole chart, at its bottom
					where it will not overlap the chart and title/subtitle. Position will
					be fixed.
				*#
                position: 
                {
                    align: "right",
                    verticalAlign: "bottom",
                    x: -20,
                    y: 8
                },
                
                #*
					Customization of style of the button.
				*#
                theme: 
                {
                    fill: 'white',
                    strokeWidth: 1,
                    stroke: 'silver',
                    r: 2,
                    
                    #* 
                    	Style of the text within the button (font size, font color, etc.) 
                    *#
                    style:
                    {
                    	fontSize: "12px"
                    },
                    
                    states: 
                    {
                        hover: 
                        {
                            fill: '#b3b3b3'
                        }
                    }
                }	
            },
		}
	],
	additionalData:
	{
  		#if($serie.precision)
  		precision: "$serie.precision",
  		#else
  		precision: "",
  		#end
  		#if($serie.scaleFactor)
  		scaleFactor: "$serie.scaleFactor",
  		#else
  		scaleFactor: "empty",
  		#end
  		#if($serie.prefixChar)
  		prefixChar: "$serie.prefixChar",
  		#else
  		prefixChar: "",
  		#end
  		#if($serie.postfixChar)
  		postfixChar: "$serie.postfixChar",
  		#else  		
  		postfixChar: "", 
  		#end
  		#if($serie.showAbsValue)
  		showAbsValue: $serie.showAbsValue,
  		#else
  		showAbsValue:false,
  		#end
  		#if($serie.showPercentage)
  		showPercentage:$serie.showPercentage,
  		#else
  		showPercentage:false,
  		#end
  		tooltip: {
  		  	#if ($serie.TOOLTIP.backgroundColor!="")
                ttBackColor: '$serie.TOOLTIP.backgroundColor',
            #else
            	ttBackColor: '#FCFFC5',	## default background color for the serie tooltip
			#end
				
			#if ($serie.TOOLTIP.style.color != '')
				ttColor: '$serie.TOOLTIP.style.color' ,
			#end
				
			#if ($serie.TOOLTIP.style.align != '')
				ttAlign: '$serie.TOOLTIP.style.align' ,
			#end
				
			#if ($serie.TOOLTIP.style.fontFamily && $serie.TOOLTIP.style.fontFamily != '')
				ttFont: '$serie.TOOLTIP.style.fontFamily' ,
			#end
				
			#if ($serie.TOOLTIP.style.fontWeight != '')
				ttFontWeight: '$serie.TOOLTIP.style.fontWeight' ,
			#end
				
			#if ($serie.TOOLTIP.style.fontSize != '')
				ttFontSize: '$serie.TOOLTIP.style.fontSize' ,
			#end
		},
		categoriesCardinality: $categoriesCardinality,
		range: $range
	},
	plotOptions:
	{
		series:
		{
			#* 
            	From Highcharts API: When a series contains a data array that is longer than this, 
            	only one dimensional arrays of numbers, or two dimensional arrays with x and y values 
            	are allowed. Also, only the first point is tested, and the rest are assumed to be the 
            	same format. This saves expensive data checking and indexing in long series. Set it to 
            	0 disable. Defaults to 1000.
            	
            	URL: http://api.highcharts.com/highcharts#plotOptions.series.turboThreshold
            	
            	We will increase this value in order to display series that contain a data array bigger
            	than 1000 (default), because it is most likely that we will have this situation very 
            	often. test
            	
            	@author: danristo (danilo.ristovski@mht.net)
            *#
            turboThreshold: 15000,
            colorByPoint: false
		}
	},
	
	data: 
	[
     	$result
    ]
} 