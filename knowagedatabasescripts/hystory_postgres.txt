Insert in this file the history of DB Schema, only for PostgreSQL
Every items must have:
- The Developer who has made the change
- The SQL script that updates the schema ( schema, index and FK )
- The Date

-- ##################################################################################################
-- 	Before 2.0
-- ##################################################################################################

ALTER TABLE sbi_data_set ADD COLUMN pivot_value character varying(50);
ALTER TABLE sbi_data_set ADD COLUMN pivot_row character varying(50);
ALTER TABLE sbi_data_set ADD COLUMN pivot_column character varying(50);
ALTER TABLE sbi_data_set ADD COLUMN transformer_id integer;
ALTER TABLE sbi_data_set ADD COLUMN script text;
ALTER TABLE sbi_data_set ADD COLUMN jclass_name character varying(100);
ALTER TABLE sbi_objects ADD COLUMN prof_visibility character varying(400);
ALTER TABLE sbi_parameters ADD COLUMN temporal_flag smallint NOT NULL DEFAULT 0;
ALTER TABLE sbi_geo_maps ADD COLUMN bin_id integer;
ALTER TABLE sbi_geo_maps ALTER COLUMN url DROP NOT NULL;


-- ##################################################################################################
-- 	From 2.0
-- ##################################################################################################

ALTER TABLE sbi_audit ALTER doc_parameters TYPE text;
ALTER TABLE sbi_audit ALTER COLUMN doc_parameters SET DEFAULT NULL;

ALTER TABLE sbi_viewpoints ALTER vp_value_params TYPE text;
ALTER TABLE sbi_viewpoints ALTER COLUMN vp_value_params SET DEFAULT NULL;

ALTER TABLE sbi_remember_me ALTER parameters TYPE text;
ALTER TABLE sbi_remember_me ALTER COLUMN parameters SET DEFAULT NULL;

ALTER TABLE sbi_data_set ADD COLUMN num_rows boolean DEFAULT FALSE;

ALTER TABLE sbi_menu ADD COLUMN biobj_parameters text;

-- kpi model
CREATE SEQUENCE SBI_KPI_INSTANCE_HISTORY_SEQ INCREMENT 1 START  1 ;
CREATE SEQUENCE SBI_KPI_INSTANCE_SEQ INCREMENT 1 START  1 ;
CREATE SEQUENCE SBI_KPI_MODEL_INST_SEQ INCREMENT 1 START  1;
CREATE SEQUENCE SBI_KPI_MODEL_SEQ INCREMENT 1 START  1;
CREATE SEQUENCE SBI_KPI_VALUE_SEQ INCREMENT 1 START 1 ;
CREATE SEQUENCE SBI_KPI_SEQ INCREMENT 1 START  1 ;
CREATE SEQUENCE SBI_KPI_INST_PERIOD_SEQ INCREMENT 1 START  1 ;
CREATE SEQUENCE SBI_KPI_MODEL_ATTR_VAL_SEQ INCREMENT 1 START  1 ;
CREATE SEQUENCE SBI_KPI_MODEL_RESOURCES_SEQ INCREMENT 1 START  1 ;
CREATE SEQUENCE RESOURCES_SEQ INCREMENT 1 START  1 ;
CREATE SEQUENCE SBI_THRESHOLD_SEQ INCREMENT 1 START  1 ;
CREATE SEQUENCE SBI_THRESHOLD_VAULE_SEQ INCREMENT 1 START  1;
CREATE SEQUENCE SBI_KPI_PERIODICITY_SEQ INCREMENT 1 START  1 ;
CREATE SEQUENCE SBI_MEASURE_UNIT_SEQ INCREMENT 1 START  1 ;

CREATE TABLE SBI_KPI_ROLE (
	id_kpi_role INTEGER NOT NULL,
	KPI_ID INTEGER NOT NULL,
	EXT_ROLE_ID INTEGER NOT NULL,
	CONSTRAINT XPKSBI_KPI_ROLE
              PRIMARY KEY (id_kpi_role)
 ) WITHOUT OIDS;


Create table SBI_KPI (
	KPI_ID INTEGER DEFAULT nextval('SBI_KPI_SEQ')  NOT NULL ,
	ID_MEASURE_UNIT INTEGER,
	DS_ID INTEGER,
	ID_KPI_PARENT INTEGER,
	THRESHOLD_ID INTEGER,
	NAME VARCHAR (400)  NOT NULL ,
	DOCUMENT_LABEL VARCHAR (40),
	CODE VARCHAR (40),
	METRIC VARCHAR (1000),
	DESCRIPTION VARCHAR (1000),
	WEIGHT INTEGER,
	FLG_IS_FATHER Char (1),
	KPI_TYPE INTEGER,
	METRIC_SCALE_TYPE INTEGER,
	MEASURE_TYPE INTEGER,
	INTERPRETATION VARCHAR (1000),
	INPUT_ATTRIBUTES VARCHAR (1000),
	MODEL_REFERENCE VARCHAR (255),
	TARGET_AUDIENCE VARCHAR (1000),
	CONSTRAINT XPKSBI_KPI
              PRIMARY KEY (KPI_ID)
)WITHOUT OIDS;




Create table SBI_KPI_VALUE (
	ID_KPI_INSTANCE_VALUE INTEGER DEFAULT nextval('SBI_KPI_VALUE_SEQ')  NOT NULL ,
	ID_KPI_INSTANCE NUMERIC(38,0)  NOT NULL ,
	VALUE VARCHAR (40),
	BEGIN_DT  TIMESTAMP without time zone,
	END_DT TIMESTAMP without time zone,
	RESOURCE_ID NUMERIC(38,0),
	DESCRIPTION VARCHAR (100),
		CONSTRAINT XPKSBI_KPI_VALUE
              PRIMARY KEY (ID_KPI_INSTANCE_VALUE)
) WITHOUT OIDS;






Create table SBI_MEASURE_UNIT (
	ID_MEASURE_UNIT INTEGER DEFAULT nextval('SBI_MEASURE_UNIT_SEQ')  NOT NULL ,
	NAME VARCHAR (20),
	SCALE_TYPE_ID INTEGER  NOT NULL ,
	SCALE_CD VARCHAR (40),
	SCALE_NM VARCHAR (400),
		CONSTRAINT XPKSBI_MEASURE_UNIT
              PRIMARY KEY (ID_MEASURE_UNIT)
) WITHOUT OIDS;



Create table SBI_THRESHOLD (
	THRESHOLD_ID INTEGER DEFAULT nextval('SBI_THRESHOLD_SEQ')  NOT NULL ,
	THRESHOLD_TYPE_ID INTEGER  NOT NULL ,
	NAME VARCHAR (127),
	DESCRIPTION VARCHAR (255),
	CODE VARCHAR(45),
	CONSTRAINT XPKSBI_THRESHOLD
              PRIMARY KEY (THRESHOLD_ID)
) WITHOUT OIDS;



Create table SBI_THRESHOLD_VALUE (
	ID_THRESHOLD_VALUE INTEGER DEFAULT nextval('SBI_THRESHOLD_VAULE_SEQ')   NOT NULL ,
	THRESHOLD_ID INTEGER  NOT NULL ,
	SEVERITY_ID INTEGER,
	MIN_VALUE NUMERIC,
	MAX_VALUE NUMERIC,
	LABEL VARCHAR (20),
	COLOUR VARCHAR (20),
	POSITION NUMERIC(38,0),
	CONSTRAINT XPKSBI_THRESHOLD_VALUE
              PRIMARY KEY (ID_THRESHOLD_VALUE)
) WITHOUT OIDS;



Create table SBI_KPI_MODEL (
	KPI_MODEL_ID INTEGER DEFAULT nextval('SBI_KPI_MODEL_SEQ')  NOT NULL ,
	KPI_ID INTEGER,
	KPI_MODEL_TYPE_ID INTEGER  NOT NULL ,
	KPI_PARENT_MODEL_ID INTEGER,
	KPI_MODEL_CD VARCHAR (40),
	KPI_MODEL_NM VARCHAR (400),
	KPI_MODEL_DESC VARCHAR (1000),
	CONSTRAINT XPKSBI_KPI_MODEL
              PRIMARY KEY (KPI_MODEL_ID)
) WITHOUT OIDS;





Create table SBI_KPI_MODEL_ATTR (
	KPI_MODEL_ATTR_ID NUMERIC(38,0)  NOT NULL ,
	KPI_MODEL_ATTR_TYPE_ID INTEGER  NOT NULL ,
	KPI_MODEL_ATTR_CD VARCHAR (40),
	KPI_MODEL_ATTR_NM VARCHAR (400),
	KPI_MODEL_ATTR_DESCR VARCHAR (1000),
		CONSTRAINT XPKSBI_KPI_MODEL_ATTR
              PRIMARY KEY (KPI_MODEL_ATTR_ID)
) WITHOUT OIDS;



Create table SBI_KPI_MODEL_ATTR_VAL (
	KPI_MODEL_ATTR_VAL_ID INTEGER DEFAULT nextval('SBI_KPI_MODEL_ATTR_VAL_SEQ')  NOT NULL ,
	KPI_MODEL_ATTR_ID NUMERIC(38,0)  NOT NULL ,
	KPI_MODEL_ID INTEGER  NOT NULL ,
	VALUE VARCHAR (2048),
		CONSTRAINT XPKSBI_KPI_MODEL_ATTR_VAL
              PRIMARY KEY (KPI_MODEL_ATTR_VAL_ID)
) WITHOUT OIDS;



Create table SBI_KPI_PERIODICITY (
	ID_KPI_PERIODICITY INTEGER DEFAULT nextval('SBI_KPI_PERIODICITY_SEQ')  NOT NULL ,
	NAME VARCHAR (400),
	MONTHS NUMERIC(38,0),
	DAYS NUMERIC(38,0),
	HOURS NUMERIC(38,0),
	MINUTES NUMERIC(38,0),
	chron_string VARCHAR(20),
	start_date TIMESTAMP without time zone,
	CONSTRAINT XPKSBI_KPI_PERIODICITY
              PRIMARY KEY (ID_KPI_PERIODICITY)
) WITHOUT OIDS;



Create table SBI_KPI_INSTANCE (
	ID_KPI_INSTANCE INTEGER DEFAULT nextval('SBI_KPI_INSTANCE_SEQ')  NOT NULL ,
	KPI_ID INTEGER  NOT NULL ,
	THRESHOLD_ID INTEGER,
	ID_MEASURE_UNIT INTEGER,
	WEIGHT NUMERIC(38,0),
	BEGIN_DT TIMESTAMP without time zone,
	CHART_TYPE_ID INTEGER,
	TARGET NUMERIC(38,4),
	CONSTRAINT XPKSBI_KPI_INSTANCE
              PRIMARY KEY (ID_KPI_INSTANCE)
) WITHOUT OIDS;



Create table SBI_KPI_INSTANCE_HISTORY (
	ID_KPI_INSTANCE_HISTORY INTEGER DEFAULT nextval('SBI_KPI_INSTANCE_HISTORY_SEQ')   NOT NULL ,
	ID_MEASURE_UNIT INTEGER   ,
	THRESHOLD_ID INTEGER   ,
	ID_KPI_INSTANCE INTEGER  NOT NULL ,
	WEIGHT NUMERIC(38,0),
	BEGIN_DT TIMESTAMP without time zone,
	END_DT TIMESTAMP without time zone,
	CHART_TYPE_ID INTEGER,
	TARGET NUMERIC(38,6),
	CONSTRAINT XPKSBI_KPI_INSTANCE_HISTORY
              PRIMARY KEY (ID_KPI_INSTANCE_HISTORY)
) WITHOUT OIDS;


Create table SBI_KPI_INST_PERIOD (
  KPI_INST_PERIOD_ID  INTEGER DEFAULT nextval('SBI_KPI_INST_PERIOD_SEQ') NOT NULL,
  KPI_INSTANCE_ID INTEGER NOT NULL,
  PERIODICITY_ID INTEGER NOT NULL,
  DEFAULT_VALUE SMALLINT DEFAULT NULL,
  	CONSTRAINT XPKSBI_KPI_INST_PERIOD
              PRIMARY KEY (KPI_INST_PERIOD_ID)
)WITHOUT OIDS;


Create table SBI_KPI_MODEL_INST (
	KPI_MODEL_INST INTEGER DEFAULT nextval('SBI_KPI_MODEL_INST_SEQ')  NOT NULL ,
	KPI_MODEL_INST_PARENT INTEGER,
	ID_KPI_INSTANCE INTEGER,
	NAME VARCHAR (400),
	LABEL VARCHAR (100) NOT NULL,
	DESCRIPTION VARCHAR (1000),
	START_DATE TIMESTAMP without time zone,
	END_DATE TIMESTAMP without time zone,
	KPI_MODEL_ID NUMERIC(38,0),
	CONSTRAINT XPKSBI_KPI_MODEL_INST
              PRIMARY KEY (KPI_MODEL_INST)
)WITHOUT OIDS;


Create table SBI_RESOURCES (
	RESOURCE_ID NUMERIC(38,0) DEFAULT nextval('RESOURCES_SEQ')  NOT NULL ,
	RESOURCE_TYPE_ID INTEGER  NOT NULL ,
	TABLE_NAME VARCHAR (40),
	COLUMN_NAME VARCHAR (40),
	RESOURCE_NAME VARCHAR (40),
	RESOURCE_DESCR VARCHAR (400),
	CONSTRAINT XPKSBI_RESOURCES
              PRIMARY KEY (RESOURCE_ID)
) WITHOUT OIDS;


Create table SBI_KPI_MODEL_RESOURCES (
	KPI_MODEL_RESOURCES_ID  INTEGER DEFAULT nextval('SBI_KPI_MODEL_RESOURCES_SEQ')  NOT NULL,
	RESOURCE_ID INTEGER NOT NULL,
	KPI_MODEL_INST INTEGER NOT NULL,
 	CONSTRAINT XPKSBI_KPI_MODEL_RESOURCES
              PRIMARY KEY (KPI_MODEL_RESOURCES_ID)
) WITHOUT OIDS;


Create table SBI_ALARM (
	ALARM_ID NUMERIC(38,0)  NOT NULL ,
	ID_KPI_INSTANCE INTEGER  NOT NULL ,
	MODALITY_ID INTEGER  NOT NULL ,
	DOCUMENT_ID INTEGER,
	LABEL VARCHAR (50),
	NAME VARCHAR (50),
	DESCR VARCHAR (200),
	TEXT VARCHAR (1000),
	URL VARCHAR (20),
	SINGLE_EVENT Char (1),
	AUTO_DISABLED Char (1),
	ID_THRESHOLD_VALUE INTEGER,
	CONSTRAINT XPKSBI_ALARM
              PRIMARY KEY (ALARM_ID)
)WITHOUT OIDS;


Create table SBI_ALARM_EVENT (
	ALARM_EVENT_ID NUMERIC(38,0)  NOT NULL ,
	ALARM_ID INTEGER  NOT NULL ,
	EVENT_TS TIMESTAMP without time zone,
	ACTIVE Char (1),
	KPI_VALUE VARCHAR (50),
	THRESHOLD_VALUE VARCHAR (50),
	KPI_NAME VARCHAR (100),
	RESOURCES VARCHAR (200),
	KPI_DESCRIPTION VARCHAR (100),
	RESOURCE_ID INTEGER,
  KPI_INSTANCE_ID INTEGER,
	CONSTRAINT XPKSBI_ALARM_EVENT
              PRIMARY KEY (ALARM_EVENT_ID)
) WITHOUT OIDS;


Create table SBI_ALARM_DISTRIBUTION (
	ALARM_CONTACT_ID INTEGER NOT NULL,
	ALARM_ID INTEGER NOT NULL,
 	CONSTRAINT XPKSBI_ALARM_DISTRIBUTION
              PRIMARY KEY (ALARM_CONTACT_ID, ALARM_ID)
) WITHOUT OIDS;


Create table SBI_ALARM_CONTACT (
	ALARM_CONTACT_ID INTEGER NOT NULL,
	NAME VARCHAR(100) NOT NULL,
	EMAIL VARCHAR(100),
	MOBILE VARCHAR(50),
	RESOURCES VARCHAR(200),
 	CONSTRAINT XPKSBI_ALARM_CONTACT
              PRIMARY KEY (ALARM_CONTACT_ID)
) WITHOUT OIDS;



-- KPI DEFINITION
Alter table SBI_KPI_MODEL_ATTR add FOREIGN KEY(KPI_MODEL_ATTR_TYPE_ID) references SBI_DOMAINS (VALUE_ID);
Alter table SBI_KPI_MODEL_ATTR_VAL add Foreign Key (KPI_MODEL_ID) references SBI_KPI_MODEL (KPI_MODEL_ID);
Alter table SBI_KPI_MODEL_ATTR_VAL add Foreign Key (KPI_MODEL_ID) references SBI_KPI_MODEL (KPI_MODEL_ID);
Alter table SBI_KPI_MODEL_ATTR_VAL add  Foreign Key (KPI_MODEL_ATTR_ID) references SBI_KPI_MODEL_ATTR (KPI_MODEL_ATTR_ID);
Alter table SBI_KPI_MODEL add  Foreign Key (KPI_ID) references SBI_KPI (KPI_ID);
Alter table SBI_KPI_MODEL add  Foreign Key (KPI_MODEL_TYPE_ID) references SBI_DOMAINS (VALUE_ID);
Alter table SBI_KPI_MODEL add  Foreign Key (KPI_PARENT_MODEL_ID) references SBI_KPI_MODEL (KPI_MODEL_ID);
Alter table SBI_MEASURE_UNIT add  Foreign Key (SCALE_TYPE_ID) references SBI_DOMAINS (VALUE_ID);
Alter table SBI_KPI add  Foreign Key (DS_ID) references SBI_DATA_SET (DS_ID);
Alter table SBI_KPI add  Foreign Key (DS_ID) references SBI_DATA_SET (DS_ID);
Alter table SBI_KPI add  Foreign Key (id_kpi_parent) references SBI_KPI (KPI_ID);
Alter table SBI_KPI add Foreign Key (id_measure_unit) references SBI_MEASURE_UNIT (id_measure_unit);
Alter table SBI_KPI add Foreign Key (THRESHOLD_ID) references SBI_THRESHOLD (THRESHOLD_ID) ;
Alter table SBI_KPI_ROLE add  Foreign Key (EXT_ROLE_ID) references SBI_EXT_ROLES (EXT_ROLE_ID) ;
Alter table SBI_KPI_ROLE add  Foreign Key (KPI_ID) references SBI_KPI (KPI_ID);
Alter table SBI_THRESHOLD add Foreign Key (THRESHOLD_TYPE_ID) references SBI_DOMAINS (VALUE_ID);
Alter table SBI_THRESHOLD_VALUE add  Foreign Key (SEVERITY_ID) references SBI_DOMAINS (VALUE_ID);
Alter table SBI_THRESHOLD_VALUE add Foreign Key (THRESHOLD_ID) references SBI_THRESHOLD (THRESHOLD_ID) on delete cascade;

Alter table SBI_KPI_MODEL_INST add  Foreign Key (id_kpi_instance) references SBI_KPI_INSTANCE (id_kpi_instance);
Alter table SBI_KPI_MODEL_INST add  Foreign Key (KPI_MODEL_INST_PARENT) references SBI_KPI_MODEL_INST (KPI_MODEL_INST);
Alter table SBI_KPI_INSTANCE add  Foreign Key (KPI_ID) references SBI_KPI (KPI_ID);
Alter table SBI_KPI_INSTANCE add Foreign Key (id_measure_unit) references SBI_MEASURE_UNIT (id_measure_unit);
Alter table SBI_KPI_INSTANCE add  Foreign Key (THRESHOLD_ID) references SBI_THRESHOLD (THRESHOLD_ID);
Alter table SBI_KPI_INSTANCE add  Foreign Key (CHART_TYPE_ID) references SBI_DOMAINS (value_id);
Alter table SBI_KPI_INSTANCE_HISTORY add  Foreign Key (id_measure_unit) references SBI_MEASURE_UNIT (id_measure_unit) ;
Alter table SBI_KPI_INSTANCE_HISTORY add  Foreign Key (THRESHOLD_ID) references SBI_THRESHOLD (THRESHOLD_ID);
Alter table SBI_KPI_INSTANCE_HISTORY add  Foreign Key (id_kpi_instance) references SBI_KPI_INSTANCE (id_kpi_instance) ;
Alter table SBI_KPI_MODEL_RESOURCES add  Foreign Key (KPI_MODEL_INST) references SBI_KPI_MODEL_INST (KPI_MODEL_INST);
Alter table SBI_KPI_MODEL_RESOURCES add  Foreign Key (RESOURCE_ID) references SBI_RESOURCES (RESOURCE_ID);
Alter table SBI_RESOURCES add  Foreign Key (RESOURCE_TYPE_ID) references SBI_DOMAINS (VALUE_ID);
Alter table SBI_KPI_VALUE add  Foreign Key (id_kpi_instance) references SBI_KPI_INSTANCE (id_kpi_instance);
Alter table SBI_KPI_VALUE add  Foreign Key (RESOURCE_ID) references SBI_RESOURCES (RESOURCE_ID);
Alter TABLE SBI_KPI_INST_PERIOD ADD FOREIGN KEY  (KPI_INSTANCE_ID) REFERENCES SBI_KPI_INSTANCE (id_kpi_instance);
Alter TABLE SBI_KPI_INST_PERIOD ADD  FOREIGN KEY (PERIODICITY_ID) REFERENCES SBI_KPI_PERIODICITY (ID_KPI_PERIODICITY) ;

Alter table SBI_ALARM add  Foreign Key (MODALITY_ID) references SBI_DOMAINS (VALUE_ID);
Alter table SBI_ALARM add Foreign Key (DOCUMENT_ID) references SBI_OBJECTS (BIOBJ_ID);
Alter table SBI_ALARM add  Foreign Key (id_kpi_instance) references SBI_KPI_INSTANCE (id_kpi_instance) ;
Alter table SBI_ALARM add Foreign Key (id_threshold_value) references SBI_THRESHOLD_VALUE (ID_THRESHOLD_VALUE);
Alter table SBI_ALARM_EVENT add  Foreign Key (ALARM_ID) references SBI_ALARM (ALARM_ID);
Alter table SBI_ALARM_DISTRIBUTION add  Foreign Key (ALARM_ID) references SBI_ALARM (ALARM_ID);
Alter table SBI_ALARM_DISTRIBUTION add  Foreign Key (ALARM_CONTACT_ID) references SBI_ALARM_CONTACT (ALARM_CONTACT_ID);
Alter table SBI_KPI add  Foreign Key (KPI_TYPE) references SBI_DOMAINS (VALUE_ID);
Alter table SBI_KPI add  Foreign Key (METRIC_SCALE_TYPE) references SBI_DOMAINS (VALUE_ID);
Alter table SBI_KPI add  Foreign Key (MEASURE_TYPE) references SBI_DOMAINS (VALUE_ID);


-- ##################################################################################################
-- 	From 2.1
-- ##################################################################################################

ALTER TABLE sbi_data_set ADD COLUMN language_script character(50)[];

ALTER TABLE sbi_domains ALTER value_cd TYPE character varying(101);
ALTER TABLE sbi_functions ALTER code TYPE character varying(40);

ALTER TABLE sbi_data_source ALTER url_connection TYPE character varying(500);
ALTER TABLE sbi_data_source ALTER COLUMN url_connection SET DEFAULT NULL;

-- ##################################################################################################
-- 	From 2.2
-- ##################################################################################################
- angelo
-31/07/09
ALTER TABLE sbi_data_source ADD COLUMN MULTI_SCHEMA TINYINT(1) NOT NULL DEFAULT '0';
ALTER TABLE sbi_data_source ADD COLUMN ATTR_SCHEMA VARCHAR(45) DEFAULT NULL;

- davide
-07/09/09
ALTER TABLE SBI_EXT_ROLES ADD COLUMN BUILD_QBE_QUERY BOOLEAN DEFAULT TRUE;

-chiara
-09/09/2009
ALTER TABLE SBI_KPI_VALUE ADD COLUMN XML_DATA TEXT;

-- ##################################################################################################
-- 	From 2.3
-- ##################################################################################################

-giulio
-05/11/2009
ALTER TABLE SBI_DATA_SET ADD COLUMN DS_METADATA VARCHAR(2000) DEFAULT NULL;

-antonella
-12/11/2009
ALTER TABLE SBI_OBJECT_NOTES ADD COLUMN OWNER VARCHAR(50);
ALTER TABLE SBI_OBJECT_NOTES ADD COLUMN ISPUBLIC BOOLEAN;
ALTER TABLE SBI_OBJECT_NOTES ADD COLUMN CREATION_DATE DATE NOT NULL DEFAULT CURRENT_TIMESTAMP;
ALTER TABLE SBI_OBJECT_NOTES ADD COLUMN LAST_CHANGE_DATE DATE NOT NULL DEFAULT CURRENT_TIMESTAMP;
/* force a valid value for date and owner fields in existing records: */
UPDATE SBI_OBJECT_NOTES SET LAST_CHANGE_DATE = CURRENT_TIMESTAMP,CREATION_DATE = CURRENT_TIMESTAMP;
UPDATE SBI_OBJECT_NOTES SET OWNER = 'biadmin';
COMMIT;
-19/11/2009
DELETE FROM SBI_REMEMBER_ME WHERE SUBOBJ_ID IN (SELECT SUBOBJ_ID FROM SBI_SUBOBJECTS WHERE NAME IS NULL OR NAME ='');
DELETE FROM SBI_AUDIT WHERE SUBOBJ_ID IN (SELECT SUBOBJ_ID FROM SBI_SUBOBJECTS WHERE NAME IS NULL OR NAME ='');
DELETE FROM SBI_MENU WHERE SUBOBJ_NAME IN (SELECT NAME FROM SBI_SUBOBJECTS WHERE NAME IS NULL OR NAME ='');
DELETE FROM SBI_BINARY_CONTENTS WHERE BIN_ID IN (SELECT BIN_ID FROM SBI_SUBOBJECTS WHERE NAME IS NULL OR NAME ='');
DELETE FROM SBI_SUBOBJECTS WHERE NAME IS NULL OR NAME ='';
COMMIT;
ALTER TABLE SBI_SUBOBJECTS ALTER COLUMN NAME TYPE VARCHAR(50);
-24/11/2009
ALTER TABLE SBI_OBJECTS DROP COLUMN DESCR_EXT;
ALTER TABLE SBI_OBJECTS DROP COLUMN OBJECTIVE;
ALTER TABLE SBI_OBJECTS DROP COLUMN LANGUAGE;
ALTER TABLE SBI_OBJECTS DROP COLUMN KEYWORDS;

ALTER TABLE SBI_EXT_ROLES ADD COLUMN SAVE_METADATA BOOLEAN DEFAULT TRUE;

CREATE SEQUENCE SBI_OBJ_METADATA_SEQ INCREMENT 1 START  1 ;
CREATE TABLE SBI_OBJ_METADATA (
	OBJ_META_ID 		INTEGER DEFAULT nextval('SBI_OBJ_METADATA_SEQ') NOT NULL,
    LABEL	 	        VARCHAR(20) NOT NULL,
    NAME 	            VARCHAR(40) NOT NULL,
    DESCRIPTION	        VARCHAR(100),
    DATA_TYPE_ID		INTEGER NOT NULL,
    CREATION_DATE 	    DATE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (OBJ_META_ID)
)WITHOUT OIDS;

CREATE UNIQUE INDEX XAK1SBI_OBJ_METADATA ON SBI_OBJ_METADATA
(
       OBJ_META_ID
);

ALTER TABLE SBI_OBJ_METADATA ADD  FOREIGN KEY (DATA_TYPE_ID) REFERENCES SBI_DOMAINS (VALUE_ID) ON UPDATE RESTRICT ON DELETE RESTRICT;

CREATE SEQUENCE SBI_OBJ_METACONTENTS_SEQ INCREMENT 1 START  1 ;
CREATE TABLE SBI_OBJ_METACONTENTS (
  OBJ_METACONTENT_ID INTEGER DEFAULT nextval('SBI_OBJ_METACONTENTS_SEQ') NOT NULL,
  OBJMETA_ID 		 INTEGER  NOT NULL ,
  BIOBJ_ID 			 INTEGER  NOT NULL,
  SUBOBJ_ID 		 INTEGER,
  BIN_ID 			 INTEGER,
  CREATION_DATE 	 DATE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  LAST_CHANGE_DATE   DATE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (OBJ_METACONTENT_ID)
)WITHOUT OIDS;

CREATE UNIQUE INDEX XAK1SBI_OBJ_METACONTENTS ON SBI_OBJ_METACONTENTS
(
        OBJMETA_ID,
        BIOBJ_ID,
        SUBOBJ_ID
);

ALTER TABLE SBI_OBJ_METACONTENTS ADD  FOREIGN KEY ( OBJMETA_ID ) REFERENCES SBI_OBJ_METADATA (  OBJ_META_ID ) ON UPDATE RESTRICT ON DELETE RESTRICT;
ALTER TABLE SBI_OBJ_METACONTENTS ADD  FOREIGN KEY ( BIOBJ_ID )   REFERENCES SBI_OBJECTS (  BIOBJ_ID ) ON UPDATE RESTRICT ON DELETE RESTRICT;
ALTER TABLE SBI_OBJ_METACONTENTS ADD  FOREIGN KEY ( SUBOBJ_ID )  REFERENCES SBI_SUBOBJECTS (  SUBOBJ_ID ) ON UPDATE RESTRICT ON DELETE RESTRICT;
ALTER TABLE SBI_OBJ_METACONTENTS ADD  FOREIGN KEY ( BIN_ID )     REFERENCES SBI_BINARY_CONTENTS(BIN_ID) ON UPDATE RESTRICT ON DELETE RESTRICT;

--adds new funcionality for metadata management
INSERT INTO SBI_USER_FUNC (NAME, DESCRIPTION) VALUES ('ObjMetadataManagement', 'ObjMetadataManagement');
INSERT INTO  SBI_ROLE_TYPE_USER_FUNC values((SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ROLE_TYPE' AND VALUE_CD = 'ADMIN'), (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME='ObjMetadataManagement'));
COMMIT;

-chiara
ALTER TABLE SBI_SUBOBJECTS MODIFY COLUMN DESCRIPTION VARCHAR(1000) DEFAULT NULL;

-- Giulio 4/1/2010
ALTER TABLE sbi_lov MODIFY COLUMN LOV_PROVIDER TEXT DEFAULT NULL;

-- Monica 11/01/2010
CREATE TABLE SBI_USER (
	USER_ID VARCHAR(100) NOT NULL,
	PASSWORD VARCHAR(150),
	FULL_NAME VARCHAR(255),
	DT_PWD_BEGIN TIMESTAMP,
	DT_PWD_END TIMESTAMP,
	FLG_PWD_BLOCKED SMALLINT,
	DT_LAST_ACCESS TIMESTAMP,
	ID INTEGER NOT NULL,
 PRIMARY KEY (ID));

CREATE TABLE SBI_ATTRIBUTE (
	ATTRIBUTE_NAME VARCHAR(255) NOT NULL,
	DESCRIPTION VARCHAR(500) NOT NULL,
	ATTRIBUTE_ID INTEGER NOT NULL,
 PRIMARY KEY (ATTRIBUTE_ID));

CREATE TABLE SBI_USER_ATTRIBUTES (
	ID INTEGER NOT NULL,
	ATTRIBUTE_ID INTEGER NOT NULL,
	ATTRIBUTE_VALUE VARCHAR(500),
 PRIMARY KEY (ID,ATTRIBUTE_ID));


CREATE TABLE SBI_EXT_USER_ROLES (
	ID INTEGER NOT NULL,
	EXT_ROLE_ID INTEGER NOT NULL,
 PRIMARY KEY (ID,EXT_ROLE_ID));


ALTER TABLE SBI_USER_ATTRIBUTES ADD FOREIGN KEY (ID) REFERENCES SBI_USER (ID) ON UPDATE RESTRICT ON DELETE RESTRICT;
ALTER TABLE SBI_EXT_USER_ROLES ADD FOREIGN KEY (ID) REFERENCES SBI_USER (ID) ON UPDATE RESTRICT ON DELETE RESTRICT;
ALTER TABLE SBI_USER_ATTRIBUTES ADD FOREIGN KEY (ATTRIBUTE_ID) REFERENCES SBI_ATTRIBUTE (ATTRIBUTE_ID) ON UPDATE RESTRICT ON DELETE RESTRICT;
ALTER TABLE SBI_EXT_USER_ROLES ADD FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) ON UPDATE RESTRICT ON DELETE RESTRICT;

--Antonella 19/01/2010
/** configuration table*/
CREATE SEQUENCE SBI_CONFIG_SEQ INCREMENT 1 START  1 ;
CREATE TABLE SBI_CONFIG (
	ID 				INTEGER DEFAULT nextval('SBI_CONFIG_SEQ') NOT NULL,
	LABEL			VARCHAR(100) NOT NULL,
	NAME			VARCHAR(100) NULL,
	DESCRIPTION 	VARCHAR(500) NULL,
	IS_ACTIVE 		BOOLEAN DEFAULT TRUE,
	VALUE_CHECK 	VARCHAR(1000) NULL,
	VALUE_TYPE_ID 	INTEGER NULL,
 PRIMARY KEY (ID));


CREATE UNIQUE INDEX XAK1SBI_CONFIG ON SBI_CONFIG
(
       LABEL
);



ALTER TABLE SBI_CONFIG ADD CONSTRAINT FK_sbi_config_1 FOREIGN KEY ( VALUE_TYPE_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID );

/** inserts data into new table for initial management of change pwd */
INSERT INTO SBI_CONFIG (LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID) VALUES ('changepwdmodule.len_min', 'LEN_MIN', 'Minimum length', false, 8, 20 );
INSERT INTO SBI_CONFIG (LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID) VALUES ('changepwdmodule.special_char', 'Special char', 'Special chars', false, '_|-<>#$', 21 );
INSERT INTO SBI_CONFIG (LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID) VALUES ('changepwdmodule.upper_char', 'Upper char', 'Minimum a char must be in upper case', false,'ABCDEFGJKLMNOPQRSTUVWXYZ', 21 );
INSERT INTO SBI_CONFIG (LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID) VALUES ('changepwdmodule.lower_char', 'Lower char', 'Minimum a char must be in lower case', true,'abcdefghjklmnopqrstuwxyz', 21 );
INSERT INTO SBI_CONFIG (LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID) VALUES ('changepwdmodule.number', 'Number', 'Minimum a char must be a number', false,'0123456789', 21 );
INSERT INTO SBI_CONFIG (LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID) VALUES ('changepwdmodule.alphabetical', 'Alaphabetical', 'Minimum a char must be a letter', true,'abcdefghjklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 21 );
INSERT INTO SBI_CONFIG (LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID) VALUES ('changepwdmodule.change', 'Change from last', 'The new pwd must be different from the lastest', true,null, null );
INSERT INTO SBI_CONFIG (LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID) VALUES ('changepwd.change_first', 'Change at first login ', 'The pwd must be changed at first login', false,null, null );
INSERT INTO SBI_CONFIG (LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID) VALUES ('changepwd.disactivation_time', 'Disactivation time', 'Number of months before disactivation', true,'6', 20 );
INSERT INTO SBI_CONFIG (LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID) VALUES ('changepwd.expired_time', 'Expired time', 'Number of days fo the expiration', true,'90', 20 );
COMMIT;

--Antonella 27/01/2010
/** change creation date datatype (date --> timestamp) */
ALTER TABLE SBI_VIEWPOINTS ALTER COLUMN  VP_CREATION_DATE TYPE TIMESTAMP;


--Chiara 03/02/2010
CREATE SEQUENCE SBI_ACTIVITY_SEQ INCREMENT 1 START 1 ;
CREATE TABLE SBI_ACTIVITY_MONITORING (
  ID INTEGER DEFAULT nextval('SBI_ACTIVITY_SEQ') NOT NULL,
  ACTION_TIME DATE DEFAULT CURRENT_TIMESTAMP,
  USERNAME 	 	VARCHAR(40) NOT NULL,
  USERGROUP		VARCHAR(400),
  LOG_LEVEL 	VARCHAR(10) ,
  ACTION_CODE 	VARCHAR(45) NOT NULL,
  INFO 			VARCHAR(400),
  PRIMARY KEY (ID)
) WITHOUT OIDS;

CREATE UNIQUE INDEX XAK1SBI_USER ON SBI_USER
(
       USER_ID                          ASC
);

ALTER TABLE SBI_ALARM MODIFY COLUMN ID_KPI_INSTANCE INTEGER,
 MODIFY COLUMN ID_THRESHOLD_VALUE INTEGER;


-- ##################################################################################################
-- 	From 2.5
-- ##################################################################################################

 --Chiara 27/05/2010
ALTER TABLE SBI_RESOURCES ADD COLUMN RESOURCE_CODE VARCHAR(45);
UPDATE SBI_RESOURCES SET RESOURCE_CODE = RESOURCE_NAME;
CREATE UNIQUE INDEX UNIQUE_RES_CODE ON SBI_RESOURCES(RESOURCE_CODE);
ALTER TABLE SBI_RESOURCES ALTER COLUMN RESOURCE_CODE SET NOT NULL;>>>>>>> .r11549

 -- Giulio 27 /05 / 2010
 CREATE SEQUENCE SBI_KPI_MODEL_ATTR_SEQ INCREMENT 1 START  1 ;
 MODIFY COLUMN ID_THRESHOLD_VALUE INTEGER;

 --Chiara 28/08/2010
CREATE SEQUENCE SBI_KPI_DOCUMENTS_SEQ INCREMENT 1 START  1 ;

Create table SBI_KPI_DOCUMENTS (
	ID_KPI_DOC INTEGER  DEFAULT nextval('SBI_KPI_DOCUMENTS_SEQ') NOT NULL,
	BIOBJ_ID INTEGER NOT NULL,
	KPI_ID INTEGER NOT NULL,
 Primary Key (ID_KPI_DOC)
)WITHOUT OIDS;

Alter table SBI_KPI_DOCUMENTS add Foreign Key (BIOBJ_ID) references SBI_OBJECTS (BIOBJ_ID) ;
Alter table SBI_KPI_DOCUMENTS add Foreign Key (KPI_ID) references SBI_KPI (KPI_ID);

INSERT INTO SBI_KPI_DOCUMENTS(KPI_ID,BIOBJ_ID)
SELECT k.KPI_ID, o.BIOBJ_ID
FROM sbi_kpi k,sbi_Objects o
WHERE
k.DOCUMENT_LABEL = o.LABEL
and k.DOCUMENT_LABEL IS NOT NULL;

ALTER TABLE SBI_KPI DROP COLUMN document_label;

--Antonella 08/09/2010: generic user data properties management
CREATE SEQUENCE SBI_UDP_SEQ INCREMENT 1 START  1 ;
CREATE TABLE SBI_UDP (
	UDP_ID	        INTEGER DEFAULT nextval('SBI_UDP_SEQ') NOT NULL,
	TYPE_ID			INTEGER NOT NULL,
	FAMILY_ID		INTEGER NOT NULL,
	LABEL           VARCHAR(20) NOT NULL,
	NAME            VARCHAR(40) NOT NULL,
	DESCRIPTION     VARCHAR(1000) NULL,
	IS_MULTIVALUE   BOOLEAN DEFAULT FALSE,
 PRIMARY KEY (UDP_ID));

CREATE UNIQUE INDEX XAK1SBI_UDP ON SBI_UDP(LABEL);
CREATE INDEX XIF3_SBI_SBI_UDP ON SBI_UDP(TYPE_ID);
CREATE INDEX XIF2SBI_SBI_UDP ON SBI_UDP(FAMILY_ID);

ALTER TABLE SBI_UDP ADD FOREIGN KEY ( TYPE_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID );
ALTER TABLE SBI_UDP ADD FOREIGN KEY ( FAMILY_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID ) ;

CREATE SEQUENCE SBI_UDP_VALUE_SEQ INCREMENT 1 START  1 ;
CREATE TABLE SBI_UDP_VALUE (
	UDP_VALUE_ID       INTEGER DEFAULT nextval('SBI_UDP_SEQ') NOT NULL,
	UDP_ID			   INTEGER NOT NULL,
	VALUE              VARCHAR(1000) NOT NULL,
	PROG               INTEGER NULL,
	LABEL              VARCHAR(20) NOT NULL,
	NAME               VARCHAR(40) NULL,
	FAMILY			   VARCHAR(40) NULL,
    BEGIN_TS           TIMESTAMP NOT NULL,
    END_TS             TIMESTAMP NULL,
    REFERENCE_ID	   INTEGER NULL,
 PRIMARY KEY (UDP_VALUE_ID));

CREATE INDEX XIF2SBI_SBI_UDP_VALUE ON SBI_UDP_VALUE(UDP_ID);

ALTER TABLE SBI_UDP_VALUE ADD FOREIGN KEY ( UDP_ID ) REFERENCES SBI_UDP ( UDP_ID );

--adds new funcionality for udp management
INSERT INTO SBI_USER_FUNC (NAME, DESCRIPTION) VALUES ('UserDefinedPropertyManagement', 'UserDefinedPropertyManagement');
INSERT INTO  SBI_ROLE_TYPE_USER_FUNC values((SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ROLE_TYPE' AND VALUE_CD = 'ADMIN'), (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME='UserDefinedPropertyManagement'));
COMMIT;
--KPI RELATIONS Monica
CREATE SEQUENCE SBI_KPI_REL_SEQ INCREMENT 1 START  1 ;

CREATE TABLE SBI_KPI_REL (
  KPI_REL_ID INTEGER NOT NULL,
  KPI_FATHER_ID INTEGER  NOT NULL,
  KPI_CHILD_ID INTEGER  NOT NULL,
  PARAMETER VARCHAR(100) NULL,
  PRIMARY KEY (KPI_REL_ID)
);

ALTER TABLE SBI_KPI_REL ADD FOREIGN KEY ( KPI_FATHER_ID ) REFERENCES SBI_KPI ( KPI_ID );
ALTER TABLE SBI_KPI_REL ADD FOREIGN KEY ( KPI_CHILD_ID ) REFERENCES SBI_KPI ( KPI_ID );

-- 28/09/2010
CREATE SEQUENCE SBI_KPI_ERROR_SEQ INCREMENT 1 START  1 ;

 -- ggavardi 28/09/2010
 CREATE SEQUENCE SBI_KPI_ERROR_SEQ INCREMENT 1 START  1 ;

CREATE TABLE SBI_KPI_ERROR (
  KPI_ERROR_ID        INTEGER     DEFAULT nextval('SBI_KPI_ERROR') NOT NULL,
  KPI_MODEL_INST_ID   INTEGER NOT NULL,
  USER_MSG            VARCHAR(1000),
  FULL_MSG             TEXT,
  TS_DATE             TIMESTAMP ,
  LABEL_MOD_INST      VARCHAR(100) ,
  PARAMETERS	       VARCHAR(1000),
  PRIMARY KEY (KPI_ERROR_ID)) WITHOUT OIDS;

ALTER TABLE SBI_KPI_ERROR ADD FOREIGN KEY KPI_MODEL_INST_ID REFERENCES SBI_KPI_MODEL_INST ( KPI_MODEL_INST );

--Chiara 28/09/2010
DROP TABLE SBI_KPI_MODEL_ATTR_VAL;
DROP TABLE SBI_KPI_MODEL_ATTR;

--new column on SBI_KPI
ALTER TABLE SBI_KPI ADD COLUMN IS_ADDITIVE CHAR(1);

--Davide 29/09/2010 (Organizationl Unit)
CREATE TABLE SBI_ORG_UNIT (
  ID            INTEGER NOT NULL,
  LABEL            VARCHAR(200) NOT NULL,
  NAME             VARCHAR(400) NOT NULL,
  DESCRIPTION      VARCHAR(1000),
  CONSTRAINT XAK1SBI_ORG_UNIT UNIQUE (LABEL),
  CONSTRAINT XPKSBI_ORG_UNIT PRIMARY KEY(ID)
) WITHOUT OIDS;

CREATE TABLE SBI_ORG_UNIT_HIERARCHIES (
  ID            INTEGER NOT NULL,
  LABEL            VARCHAR(100) NOT NULL,
  NAME             VARCHAR(200) NOT NULL,
  DESCRIPTION      VARCHAR(1000),
  TARGET     VARCHAR(1000),
  COMPANY    VARCHAR(100) NOT NULL,
  CONSTRAINT XAK1SBI_ORG_UNIT_HIERARCHIES UNIQUE (LABEL, COMPANY),
  CONSTRAINT XPKSBI_ORG_UNIT_HIERARCHIES PRIMARY KEY(ID)
) WITHOUT OIDS;

CREATE TABLE SBI_ORG_UNIT_NODES (
  NODE_ID            INTEGER NOT NULL,
  OU_ID           INTEGER NOT NULL,
  HIERARCHY_ID  INTEGER NOT NULL,
  PARENT_NODE_ID INTEGER NULL,
  PATH VARCHAR(4000) NOT NULL,
  CONSTRAINT XPKSBI_ORG_UNIT_NODES PRIMARY KEY(NODE_ID)
) WITHOUT OIDS;

CREATE TABLE SBI_ORG_UNIT_GRANT (
  ID INTEGER NOT NULL,
  HIERARCHY_ID  INTEGER NOT NULL,
  KPI_MODEL_INST_NODE_ID INTEGER NOT NULL,
  START_DATE  DATE,
  END_DATE  DATE,
  LABEL            VARCHAR(200) NOT NULL,
  NAME             VARCHAR(400) NOT NULL,
  DESCRIPTION      VARCHAR(1000),
  CONSTRAINT XAK1SBI_ORG_UNIT_GRANT UNIQUE (LABEL),
  CONSTRAINT XPKSBI_ORG_UNIT_GRANT PRIMARY KEY(ID)
) WITHOUT OIDS;

CREATE TABLE SBI_ORG_UNIT_GRANT_NODES (
  NODE_ID INTEGER NOT NULL,
  KPI_MODEL_INST_NODE_ID INTEGER NOT NULL,
  GRANT_ID INTEGER NOT NULL,
  CONSTRAINT XPKSBI_ORG_UNIT_GRANT_NODES PRIMARY KEY(NODE_ID, KPI_MODEL_INST_NODE_ID, GRANT_ID)
) WITHOUT OIDS;


ALTER TABLE SBI_ORG_UNIT_NODES ADD FOREIGN KEY ( OU_ID ) REFERENCES SBI_ORG_UNIT ( ID ) ON DELETE CASCADE;
ALTER TABLE SBI_ORG_UNIT_NODES ADD FOREIGN KEY ( HIERARCHY_ID ) REFERENCES SBI_ORG_UNIT_HIERARCHIES ( ID ) ON DELETE CASCADE;
ALTER TABLE SBI_ORG_UNIT_NODES ADD FOREIGN KEY ( PARENT_NODE_ID ) REFERENCES SBI_ORG_UNIT_NODES ( NODE_ID ) ON DELETE CASCADE;
ALTER TABLE SBI_ORG_UNIT_GRANT ADD FOREIGN KEY ( HIERARCHY_ID ) REFERENCES SBI_ORG_UNIT_HIERARCHIES ( ID ) ON DELETE CASCADE;
ALTER TABLE SBI_ORG_UNIT_GRANT ADD FOREIGN KEY ( KPI_MODEL_INST_NODE_ID ) REFERENCES SBI_KPI_MODEL_INST ( KPI_MODEL_INST ) ON DELETE CASCADE;
ALTER TABLE SBI_ORG_UNIT_GRANT_NODES ADD FOREIGN KEY ( NODE_ID ) REFERENCES SBI_ORG_UNIT_NODES ( NODE_ID ) ON DELETE CASCADE;
ALTER TABLE SBI_ORG_UNIT_GRANT_NODES ADD FOREIGN KEY ( KPI_MODEL_INST_NODE_ID ) REFERENCES SBI_KPI_MODEL_INST ( KPI_MODEL_INST ) ON DELETE CASCADE;
ALTER TABLE SBI_ORG_UNIT_GRANT_NODES ADD FOREIGN KEY ( GRANT_ID ) REFERENCES SBI_ORG_UNIT_GRANT ( ID ) ON DELETE CASCADE;
--Monica 18/10/2010: OU kpi
ALTER TABLE SBI_KPI_VALUE add COLUMN ORG_UNIT_ID integer;

--Davide 12/10/2010: analytical drivers are visible by default
UPDATE SBI_OBJ_PAR SET VIEW_FL = 1;

--Davide 05/11/2010: added COMPANY column to SBI_ORG_UNIT_HIERARCHIES
ALTER TABLE SBI_ORG_UNIT_HIERARCHIES ADD COLUMN COMPANY VARCHAR(200);
COMMIT;

--BUG ON DUPLICATE ROLE NAMES
ALTER TABLE SBI_EXT_ROLES ALTER COLUMN NAME SET NOT NULL;
ALTER TABLE SBI_EXT_ROLES ADD CONSTRAINT XPGNAME UNIQUE (NAME);
--kpi_value added columns hierarchy_id and company
ALTER TABLE SBI_KPI_VALUE add COLUMN HIERARCHY_ID integer;
ALTER TABLE SBI_KPI_VALUE add COLUMN COMPANY VARCHAR(200);

--Davide 11/11/2010 (Organizationl Unit: colums LABEL and NAME resized to 100; unique key is (LABEL,NAME))
ALTER TABLE SBI_ORG_UNIT ALTER COLUMN LABEL TYPE VARCHAR(100);
ALTER TABLE SBI_ORG_UNIT ALTER COLUMN NAME TYPE VARCHAR(100);
ALTER TABLE SBI_ORG_UNIT DROP CONSTRAINT XAK1SBI_ORG_UNIT;
ALTER TABLE SBI_ORG_UNIT ADD CONSTRAINT XAK1SBI_ORG_UNIT UNIQUE (LABEL, NAME);

--Davide 16/11/2010: added url to external application in menu configuration
ALTER TABLE SBI_MENU ADD COLUMN EXT_APP_URL VARCHAR(1000);

--Andrea 20/12/2010: added to solve bug SPAGOBI-433
ALTER TABLE SBI_EVENTS_LOG MODIFY COLUMN DESCR TEXT;

--Monica 29/12/2010 : to solve bug SPAGOBI-443
ALTER TABLE SBI_OBJECT_NOTES
	ALTER COLUMN ISPUBLIC TYPE boolean
		USING CASE WHEN ISPUBLIC = 0 THEN FALSE
			WHEN ISPUBLIC = 1 THEN TRUE
			ELSE NULL
			END;

--Monica 10/01/2011: error in OU name filed too short
ALTER TABLE SBI_ORG_UNIT ALTER COLUMN NAME type varchar(200);

--Alberto 11/01/2011: goal scripts
ALTER TABLE SBI_OBJECT_NOTES
	ALTER COLUMN ISPUBLIC TYPE boolean
		USING CASE WHEN ISPUBLIC = 0 THEN FALSE
			WHEN ISPUBLIC = 1 THEN TRUE
			ELSE NULL
			END;

CREATE SEQUENCE SBI_GOAL_SEQ INCREMENT 1 START  1 ;
CREATE SEQUENCE SBI_GOAL_HIERARCHY_SEQ INCREMENT 1 START  1 ;
CREATE SEQUENCE SBI_GOAL_KPI_SEQ INCREMENT 1 START  1 ;


CREATE TABLE SBI_GOAL (
  GOAL_ID       INTEGER DEFAULT nextval('SBI_GOAL_SEQ') NOT NULL,
  GRANT_ID      INTEGER NOT NULL,
  START_DATE    DATE NOT NULL,
  END_DATE      DATE NOT NULL,
  NAME          VARCHAR(20) NOT NULL,
  LABEL          VARCHAR(20) NOT NULL,
  DESCRIPTION		VARCHAR(1000),
  CONSTRAINT XPKSBI_GOAL PRIMARY KEY (GOAL_ID)
) WITHOUT OIDS;


CREATE TABLE SBI_GOAL_HIERARCHY (
  GOAL_HIERARCHY_ID INTEGER DEFAULT nextval('SBI_GOAL_HIERARCHY_SEQ') NOT NULL,
  ORG_UNIT_ID       INTEGER NOT NULL,
  GOAL_ID           INTEGER NOT NULL,
  PARENT_ID         INTEGER,
  NAME              VARCHAR(50) NOT NULL,
  LABEL             VARCHAR(50),
  GOAL              VARCHAR(1000),
  CONSTRAINT XPKSBI_GOAL_HIERARCHY PRIMARY KEY (GOAL_HIERARCHY_ID)
) WITHOUT OIDS;


CREATE TABLE SBI_GOAL_KPI (
  GOAL_KPI_ID         INTEGER DEFAULT nextval('SBI_GOAL_KPI_SEQ') NOT NULL,
  KPI_INSTANCE_ID     INTEGER NOT NULL,
  GOAL_HIERARCHY_ID   INTEGER NOT NULL,
  WEIGHT1             FLOAT(8),
  WEIGHT2             FLOAT(8),
  THRESHOLD1          FLOAT(8),
  THRESHOLD2          FLOAT(8),
  THRESHOLD1SIGN      INTEGER,
  THRESHOLD2SIGN      INTEGER,
  CONSTRAINT XPKSBI_GOAL_KPI PRIMARY KEY (GOAL_KPI_ID)
) WITHOUT OIDS;



ALTER TABLE SBI_GOAL ADD FOREIGN KEY ( GRANT_ID ) REFERENCES SBI_ORG_UNIT_HIERARCHIES ( ID ) ON DELETE CASCADE;
ALTER TABLE SBI_GOAL_HIERARCHY ADD FOREIGN KEY (GOAL_ID) REFERENCES SBI_GOAL (GOAL_ID) ON DELETE CASCADE;
ALTER TABLE SBI_GOAL_HIERARCHY ADD FOREIGN KEY (PARENT_ID) REFERENCES SBI_GOAL_HIERARCHY (GOAL_HIERARCHY_ID) ON DELETE CASCADE;
ALTER TABLE SBI_GOAL_KPI ADD FOREIGN KEY (GOAL_HIERARCHY_ID) REFERENCES SBI_GOAL_HIERARCHY (GOAL_HIERARCHY_ID)  ON DELETE CASCADE;
ALTER TABLE SBI_GOAL_KPI ADD FOREIGN KEY (KPI_INSTANCE_ID) REFERENCES SBI_KPI_MODEL_INST (KPI_MODEL_INST) ON DELETE CASCADE;
--Chiara
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('groovy','Groovy','SCRIPT_TYPE','Script Type','Script Type');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('rhino-nonjdk','Javascript','SCRIPT_TYPE','Script Type','Script Type');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('ejs','Embedded Javascript','SCRIPT_TYPE','Script Type','Script Type');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('File','SbiFileDataSet','DATA_SET_TYPE','Data Set Type','SbiFileDataSet');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('Query','SbiQueryDataSet','DATA_SET_TYPE','Data Set Type','SbiQueryDataSet');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('Java Class','SbiJClassDataSet','DATA_SET_TYPE','Data Set Type','SbiJClassDataSet');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('Web Service','SbiWSDataSet','DATA_SET_TYPE','Data Set Type','SbiWSDataSet');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('Script','SbiScriptDataSet','DATA_SET_TYPE','Data Set Type','SbiScriptDataSet');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('Qbe','SbiQbeDataSet','DATA_SET_TYPE','Data Set Type','SbiQbeDataSet');

CREATE SEQUENCE SBI_DS_HISTORY_SEQ INCREMENT 1 START  1 ;
CREATE TABLE SBI_DATA_SET_HISTORY (
	DS_H_ID 	   INTEGER DEFAULT nextval('SBI_DS_HISTORY_SEQ') NOT NULL,
	DS_ID 		   INTEGER NOT NULL,
	ACTIVE		   BOOLEAN NOT NULL,
	VERSION_NUM	   INTEGER NOT NULL,
	OBJECT_TYPE    VARCHAR(50),
	DS_METADATA    VARCHAR(2000),
	PARAMS         VARCHAR(1000),
	CATEGORY_ID    INTEGER,
    FILE_NAME	   VARCHAR(300),
    QUERY   	   TEXT,
    DATA_SOURCE_ID INTEGER,
    ADRESS   	   VARCHAR(250),
    OPERATION      VARCHAR(50),
    JCLASS_NAME    VARCHAR(100),
    LANGUAGE_SCRIPT VARCHAR(50),
	SCRIPT   	   TEXT,
	JSON_QUERY     TEXT,
	DATAMARTS	   VARCHAR(400),
    TRANSFORMER_ID INTEGER,
    PIVOT_COLUMN   VARCHAR(50),
	PIVOT_ROW      VARCHAR(50),
	PIVOT_VALUE    VARCHAR(50),
	NUM_ROWS	   BOOLEAN DEFAULT FALSE,
	USER_IN              VARCHAR(100) NOT NULL,
	TIME_IN              TIMESTAMP without time zone NOT NULL,
	META_VERSION         VARCHAR(100),
	SBI_VERSION_IN       VARCHAR(10),
    PRIMARY KEY (DS_H_ID)
)TYPE=INNODB;

ALTER TABLE SBI_DATA_SET_HISTORY ADD FOREIGN KEY FK_SBI_DATA_SET_T ( TRANSFORMER_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID ) ON DELETE CASCADE;
ALTER TABLE SBI_DATA_SET_HISTORY ADD FOREIGN KEY FK_SBI_DATA_SET_CAT (CATEGORY_ID) REFERENCES SBI_DOMAINS (VALUE_ID) ON DELETE CASCADE ON UPDATE RESTRICT;
ALTER TABLE SBI_DATA_SET_HISTORY ADD FOREIGN KEY FK_SBI_DATA_SET_DS ( DATA_SOURCE_ID ) REFERENCES SBI_DATA_SOURCE ( DS_ID ) ON DELETE CASCADE;
ALTER TABLE SBI_DATA_SET_HISTORY ADD FOREIGN KEY FK_SBI_DATA_SET_DS2 (DS_ID) REFERENCES SBI_DATA_SET (DS_ID) ON DELETE CASCADE ON UPDATE RESTRICT;

INSERT INTO SBI_DATA_SET_HISTORY
(DS_ID,ACTIVE,VERSION_NUM,FILE_NAME,QUERY,JCLASS_NAME,SCRIPT,PARAMS,DS_METADATA
	,DATA_SOURCE_ID,OBJECT_TYPE,OPERATION,TRANSFORMER_ID,PIVOT_COLUMN,PIVOT_ROW
	,PIVOT_VALUE,NUM_ROWS,LANGUAGE_SCRIPT,USER_IN, TIME_IN)
SELECT DS_ID,true ACTIVE,1 VERSION_NUM,FILE_NAME,QUERY,JCLASS_NAME,SCRIPT,PARAMS,DS_METADATA,DATA_SOURCE_ID
,OBJECT_TYPE,OPERATION,TRANSFORMER_ID,PIVOT_COLUMN,PIVOT_ROW,PIVOT_VALUE,NUM_ROWS,LANGUAGE_SCRIPT
,'biadmin' USER_IN, now() TIME_IN
FROM SBI_DATA_SET;

commit;

--Drop all SBI_DATA_SET foreign keys
ALTER TABLE SBI_DATA_SET DROP FOREIGN KEY FK_SBI_DATA_SET_1;

ALTER TABLE SBI_DATA_SET DROP COLUMN EXECUTOR_CLASS;
ALTER TABLE SBI_DATA_SET DROP COLUMN FILE_NAME;
ALTER TABLE SBI_DATA_SET DROP COLUMN QUERY;
ALTER TABLE SBI_DATA_SET DROP COLUMN JCLASS_NAME;
ALTER TABLE SBI_DATA_SET DROP COLUMN SCRIPT;
ALTER TABLE SBI_DATA_SET DROP COLUMN PARAMS;
ALTER TABLE SBI_DATA_SET DROP COLUMN DS_METADATA;
ALTER TABLE SBI_DATA_SET DROP COLUMN DATA_SOURCE_ID;
ALTER TABLE SBI_DATA_SET DROP COLUMN OBJECT_TYPE;
ALTER TABLE SBI_DATA_SET DROP COLUMN OPERATION;
ALTER TABLE SBI_DATA_SET DROP COLUMN TRANSFORMER_ID;
ALTER TABLE SBI_DATA_SET DROP COLUMN PIVOT_COLUMN;
ALTER TABLE SBI_DATA_SET DROP COLUMN PIVOT_ROW;
ALTER TABLE SBI_DATA_SET DROP COLUMN PIVOT_VALUE;
ALTER TABLE SBI_DATA_SET DROP COLUMN NUM_ROWS;
ALTER TABLE SBI_DATA_SET DROP COLUMN LANGUAGE_SCRIPT;
ALTER TABLE SBI_DATA_SET DROP COLUMN ADRESS;

ALTER TABLE SBI_DATA_SET ADD COLUMN USER_IN VARCHAR(100) NOT NULL;
ALTER TABLE SBI_DATA_SET ADD COLUMN USER_UP VARCHAR(100);
ALTER TABLE SBI_DATA_SET ADD COLUMN USER_DE VARCHAR(100);
ALTER TABLE SBI_DATA_SET ADD COLUMN TIME_IN TIMESTAMP without time zone NOT NULL;
ALTER TABLE SBI_DATA_SET ADD COLUMN TIME_UP TIMESTAMP without time zone NULL DEFAULT NULL;
ALTER TABLE SBI_DATA_SET ADD COLUMN TIME_DE TIMESTAMP without time zone NULL DEFAULT NULL;
ALTER TABLE SBI_DATA_SET ADD COLUMN SBI_VERSION_IN VARCHAR(10);
ALTER TABLE SBI_DATA_SET ADD COLUMN SBI_VERSION_UP VARCHAR(10);
ALTER TABLE SBI_DATA_SET ADD COLUMN SBI_VERSION_DE VARCHAR(10);
ALTER TABLE SBI_DATA_SET ADD COLUMN META_VERSION VARCHAR(100);
ALTER TABLE SBI_DATA_SET ADD COLUMN ORGANIZATION VARCHAR(20);

UPDATE SBI_DATA_SET SET USER_IN = 'biadmin';

--Davide 12/04/2011
delete from SBI_DOMAINS WHERE VALUE_CD = 'Qbe' AND DOMAIN_CD = 'DATA_SET_TYPE';
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('Qbe','SbiQbeDataSet','DATA_SET_TYPE','Data Set Type','SbiQbeDataSet');

ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN DATAMARTS VARCHAR(400);

--Monia 30/05/2011
ALTER TABLE SBI_CONFIG ADD COLUMN CATEGORY VARCHAR( 50 ) NULL

--Monica 11/07/2011
ALTER TABLE SBI_ORG_UNIT_GRANT ADD COLUMN IS_AVAILABLE INTEGER DEFAULT 1;


------------- FROM 3.1 -------------
--Giulio 27/07/2011

CREATE TABLE SBI_OBJ_PARVIEW (
  OBJ_PAR_ID INTEGER NOT NULL,
   OBJ_PAR_FATHER_ID  INTEGER NOT NULL,
   OPERATION  VARCHAR(20) NOT NULL,
   COMPARE_VALUE  VARCHAR(200) NOT NULL,
   VIEW_LABEL  VARCHAR(50),
   PROG INTEGER,
          USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
  PRIMARY KEY ( OBJ_PAR_ID ,  OBJ_PAR_FATHER_ID ,  OPERATION, COMPARE_VALUE )
);


ALTER TABLE SBI_OBJ_PARVIEW ADD CONSTRAINT FK_SBI_OBJ_PARVIEW_1 FOREIGN KEY ( OBJ_PAR_ID ) REFERENCES SBI_OBJ_PAR ( OBJ_PAR_ID ) ON DELETE RESTRICT;
ALTER TABLE SBI_OBJ_PARVIEW ADD CONSTRAINT FK_SBI_OBJ_PARVIEW_2 FOREIGN KEY ( OBJ_PAR_FATHER_ID ) REFERENCES SBI_OBJ_PAR ( OBJ_PAR_ID ) ON DELETE RESTRICT;

-- Change after 3.1  14/9/2011 Giulio

ALTER TABLE sbi_data_set_history ADD COLUMN CUSTOM_DATA TEXT AFTER DATAMARTS;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'Custom','SbiCustomDataSet','DATA_SET_TYPE','Data Set Type','SbiCustomDataSet', 'biadmin', current_timestamp);


-- 6/10/2011 Giulio
ALTER TABLE sbi_data_set_history MODIFY COLUMN DS_METADATA TEXT;


-- 20/10/2011 Davide : il motore worksheet pu� lavorare con i dataset
UPDATE SBI_ENGINES SET USE_DATASET = TRUE WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.worksheet.WorksheetDriver';






-- from 3.2 to 3.3


CREATE TABLE SBI_I18N_MESSAGES (
  LANGUAGE_CD INTEGER NOT NULL,
  LABEL VARCHAR(200) NOT NULL,
  MESSAGE TEXT,
  PRIMARY KEY (LANGUAGE_CD, LABEL)
);

ALTER TABLE SBI_I18N_MESSAGES ADD CONSTRAINT FK_SBI_I18N_MESSAGES FOREIGN KEY (LANGUAGE_CD) REFERENCES SBI_DOMAINS(VALUE_ID);


INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'ITA','Italian','LANG','language ISO Code','Italian', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'ENG','English','LANG','language ISO Code','English', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'FRA','French','LANG','language ISO Code','French', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'SPA','Spanish','LANG','language ISO Code','Spanish', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

CREATE TABLE SBI_KPI_COMMENTS (
	   KPI_COMMENT_ID 			INTEGER NOT NULL ,
	   KPI_INST_ID 	        INTEGER,
       BIN_ID 	            INTEGER,
       EXEC_REQ 	        VARCHAR(500),
       OWNER 	            VARCHAR(50),
       ISPUBLIC 	        BOOLEAN,
       CREATION_DATE 	    TIMESTAMP NOT NULL,
       LAST_CHANGE_DATE     TIMESTAMP NOT NULL,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       CONSTRAINT XAK1SBI_KPI_COMMENT UNIQUE  (KPI_COMMENT_ID),
       PRIMARY KEY (KPI_COMMENT_ID)
) WITHOUT OIDS;

ALTER TABLE SBI_KPI_COMMENTS ADD CONSTRAINT FK_SBI_KPI_COMMENT_1 FOREIGN KEY  ( BIN_ID ) REFERENCES SBI_BINARY_CONTENTS(BIN_ID);
ALTER TABLE SBI_KPI_COMMENTS ADD CONSTRAINT FK_SBI_KPI_COMMENT_2 FOREIGN KEY  ( KPI_INST_ID ) REFERENCES SBI_KPI_INSTANCE (ID_KPI_INSTANCE);


-- 06/12/2011 Davide : exporter XLSX per Qbe e Worksheet
INSERT INTO SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS,USER_IN)
	VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'XLSX','XLSX','EXPORT_TYPE','Exporters type','Export type', 'biadmin');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_DOMAINS';
commit;
INSERT INTO SBI_EXPORTERS (ENGINE_ID,DOMAIN_ID,DEFAULT_VALUE)
	VALUES ((SELECT ENGINE_ID FROM SBI_ENGINES WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.worksheet.WorksheetDriver'),
	(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'EXPORT_TYPE' AND VALUE_CD = 'XLSX'),
	false);
commit;
INSERT INTO SBI_EXPORTERS (ENGINE_ID,DOMAIN_ID,DEFAULT_VALUE)
	VALUES ((SELECT ENGINE_ID FROM SBI_ENGINES WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.qbe.QbeDriver'),
	(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'EXPORT_TYPE' AND VALUE_CD = 'XLSX'),
	false);
commit;


--Monica 20/12/11
CREATE TABLE SBI_KPI_COMMENTS (
	   KPI_COMMENT_ID 			INTEGER NOT NULL ,
	   KPI_INST_ID 	        INTEGER,
       BIN_ID 	            INTEGER,
       EXEC_REQ 	        VARCHAR(500),
       OWNER 	            VARCHAR(50),
       ISPUBLIC 	        BOOLEAN,
       CREATION_DATE 	    TIMESTAMP NOT NULL,
       LAST_CHANGE_DATE     TIMESTAMP NOT NULL,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       CONSTRAINT XAK1SBI_KPI_COMMENT UNIQUE  (KPI_COMMENT_ID),
       PRIMARY KEY (KPI_COMMENT_ID)
) WITHOUT OIDS;

ALTER TABLE SBI_KPI_COMMENTS ADD CONSTRAINT FK_SBI_KPI_COMMENT_1 FOREIGN KEY  ( BIN_ID ) REFERENCES SBI_BINARY_CONTENTS(BIN_ID);
ALTER TABLE SBI_KPI_COMMENTS ADD CONSTRAINT FK_SBI_KPI_COMMENT_2 FOREIGN KEY  ( KPI_INST_ID ) REFERENCES SBI_KPI_INSTANCE (ID_KPI_INSTANCE);
-- 26 - 01- 1012  Giulio

CREATE TABLE SBI_PROGRESS_THREAD (
       PROGRESS_THREAD_ID   INTEGER NOT NULL,
       USER_ID              VARCHAR(100) NOT NULL,
       PARTIAL              INTEGER,
       TOTAL        	      INTEGER,
       FUNCTION_CD         VARCHAR(200),
       STATUS              VARCHAR(4000),
       RANDOM_KEY			VARCHAR(4000),
       TYPE						VARCHAR(200),
       PRIMARY KEY (PROGRESS_THREAD_ID)
) WITHOUT OIDS;


INSERT INTO hibernate_sequences(NEXT_VAL,SEQUENCE_NAME) VALUES (COALESCE((SELECT MAX(PROGRESS_THREAD_ID)+1 FROM SBI_PROGRESS_THREAD),1),'SBI_PROGRESS_THREAD');



ALTER TABLE SBI_EXT_ROLES ADD COLUMN DO_MASSIVE_EXPORT BOOLEAN DEFAULT TRUE;

--monica 03/02/2012
ALTER TABLE SBI_UDP_VALUE ALTER COLUMN VALUE SET DEFAULT NULL;

//6 febbraio 2012
INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, USER_IN) VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),'JNDI_THREAD_MANAGER', 'JNDI_THREAD_MANAGER', 'Jndi to build work manager', true, null,(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'STRING' AND DOMAIN_CD = 'PAR_TYPE'), 'biadmin');
=======
ALTER TABLE SBI_EXT_ROLES ADD COLUMN DO_MASSIVE_EXPORT BOOLEAN DEFAULT TRUE;

---monica 22/02/2012
INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'MOBILE_TABLE','sbidomains.nm.mobile.table','BIOBJ_TYPE','BI Object types','sbidomains.ds.mobile.table', 'biadmin', CURRENT_TIMESTAMP);
update HIBERNATE_SEQUENCES set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'MOBILE_CHART','sbidomains.nm.mobile.chart','BIOBJ_TYPE','BI Object types','sbidomains.ds.mobile.chart', 'biadmin', CURRENT_TIMESTAMP);
update HIBERNATE_SEQUENCES set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'MOBILE_COMPOSED','sbidomains.nm.mobile.composed','BIOBJ_TYPE','BI Object types','sbidomains.ds.mobile.composed', 'biadmin', CURRENT_TIMESTAMP);
update HIBERNATE_SEQUENCES set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_ENGINES (ENGINE_ID,NAME, ENCRYPT, LABEL,MAIN_URL, DRIVER_NM, ENGINE_TYPE,BIOBJ_TYPE,USE_DATASOURCE,USE_DATASET, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_ENGINES'),'Table Mobile Engine', 0, 'TableMobileEngine','/SpagoBIMobileEngine/servlet/AdapterHTTP?ACTION_NAME=MOBILE_ENGINE_START_ACTION','it.eng.spagobi.engines.drivers.generic.GenericDriver',(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ENGINE_TYPE' AND VALUE_CD = 'EXT'),(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'MOBILE_TABLE'),false, true, 'biadmin', current_timestamp);
INSERT INTO SBI_ENGINES (ENGINE_ID, NAME, ENCRYPT, LABEL,MAIN_URL, DRIVER_NM, ENGINE_TYPE,BIOBJ_TYPE,USE_DATASOURCE,USE_DATASET, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_ENGINES'),'Chart Mobile Engine', 0, 'ChartMobileEngine','/SpagoBIMobileEngine/servlet/AdapterHTTP?ACTION_NAME=MOBILE_ENGINE_START_ACTION','it.eng.spagobi.engines.drivers.generic.GenericDriver',(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ENGINE_TYPE' AND VALUE_CD = 'EXT'),(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'MOBILE_CHART'),false, true, 'biadmin', current_timestamp);
INSERT INTO SBI_ENGINES (ENGINE_ID, NAME, ENCRYPT, LABEL,MAIN_URL, DRIVER_NM, ENGINE_TYPE,BIOBJ_TYPE,USE_DATASOURCE,USE_DATASET, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_ENGINES'),'Composed Mobile Engine', 0, 'ComposedMobileEngine','/SpagoBIMobileEngine/servlet/AdapterHTTP?ACTION_NAME=MOBILE_ENGINE_START_ACTION','it.eng.spagobi.engines.drivers.generic.GenericDriver',(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ENGINE_TYPE' AND VALUE_CD = 'EXT'),(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'MOBILE_COMPOSED'),false, true, 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+3 where sequence_name = 'SBI_ENGINES';
commit;

-- 12/03/2012 - Antonella
INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'CHART','Chart','BIOBJ_TYPE','BI Object types','sbidomains.ds.chart', 'biadmin', CURRENT_TIMESTAMP);
update HIBERNATE_SEQUENCES set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_ENGINES (ENGINE_ID,NAME, ENCRYPT, LABEL,MAIN_URL, DRIVER_NM, ENGINE_TYPE,BIOBJ_TYPE,USE_DATASOURCE,USE_DATASET, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_ENGINES'),'Chart External Engine', 0, 'ChartExternalEngine','/SpagoBIChartEngine/servlet/AdapterHTTP','it.eng.spagobi.engines.drivers.chart.ChartDriver',(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ENGINE_TYPE' AND VALUE_CD = 'EXT'),(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'CHART'),false, true, 'biadmin', current_timestamp);

INSERT INTO SBI_EXPORTERS (ENGINE_ID,DOMAIN_ID,DEFAULT_VALUE)
	VALUES ((SELECT ENGINE_ID FROM SBI_ENGINES WHERE LABEL = 'ChartExternalEngine'),
	(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'EXPORT_TYPE' AND VALUE_CD = 'PDF'),
	false);
commit;

INSERT INTO SBI_EXPORTERS (ENGINE_ID,DOMAIN_ID,DEFAULT_VALUE)
	VALUES ((SELECT ENGINE_ID FROM SBI_ENGINES WHERE LABEL = 'ChartExternalEngine'),
	(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'EXPORT_TYPE' AND VALUE_CD = 'JPG'),
	true);
commit;

UPDATE SBI_ENGINES SET MAIN_URL = '/SpagoBIConsoleEngine/servlet/AdapterHTTP', DRIVER_NM = 'it.eng.spagobi.engines.drivers.console.ConsoleDriver' WHERE LABEL = 'ConsoleEngine';
COMMIT;

-- 02/05/2012 Marco
ALTER TABLE SBI_LOV ADD COLUMN DATASET_ID INT(11) AFTER ORGANIZATION,
 ADD CONSTRAINT FK_SBI_LOV_2 FOREIGN KEY FK_SBI_LOV_2 (DATASET_ID)
    REFERENCES SBI_DATA_SET (DS_ID)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
    'DATASET','sbidomains.nm.dataset','INPUT_TYPE','Input mode and values','sbidomains.ds.dataset', 'server', current_timestamp);
UPDATE HIBERNATE_SEQUENCES set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

-- 07/05/2012 Alberto Ghedin
ALTER TABLE SBI_EXT_ROLES ADD COLUMN EDIT_WORKSHEET BOOLEAN DEFAULT TRUE;
-- bug fix
ALTER TABLE sbi_user ALTER COLUMN USER_ID type VARCHAR(100);

-- 10/05/2012 Andrea Gioia
DELETE FROM SBI_DOMAINS WHERE domain_cd = 'SCRIPT_TYPE' AND value_cd='ejs';
UPDATE SBI_DOMAINS SET value_cd='ECMAScript' WHERE domain_cd = 'SCRIPT_TYPE' AND value_cd='rhino-nonjdk';
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN QUERY_SCRIPT TEXT DEFAULT NULL;
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN QUERY_SCRIPT_LANGUAGE VARCHAR(100) DEFAULT NULL;

-- 01/06/2012 Antonella
ALTER TABLE SBI_DATA_SET_HISTORY ALTER COLUMN PARAMS type VARCHAR(4000);

-- 19/06/2012 Davide: MAXIMIZER_ENABLED column for manual input on analytical drivers' modality
ALTER TABLE SBI_PARUSE ADD COLUMN MAXIMIZER_ENABLED BOOLEAN DEFAULT FALSE;
UPDATE SBI_PARUSE SET MAXIMIZER_ENABLED = FALSE;
commit;

-- 17/07/2012 Davide: new FinalUsersManagement user functionality
INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'FinalUsersManagement','FinalUsersManagement', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';
commit;

INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'USER' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'FinalUsersManagement'));
commit;

ALTER TABLE SBI_EXT_ROLES ADD COLUMN MANAGE_USERS BOOLEAN DEFAULT FALSE;

--30/07/2012 Antonella: Deleted 'DATE_DEFAULT' as parameter type. The only parameters types usable are: date, num and string!
update SBI_PARAMETERS set PAR_TYPE_CD = 'DATE', PAR_TYPE_ID =
		(select VALUE_ID from SBI_DOMAINS where value_cd = 'DATE' and domain_cd = 'PAR_TYPE') WHERE PAR_TYPE_CD = 'DATE_DEFAULT';
delete from SBI_DOMAINS  where VALUE_NM = 'sbidomains.nm.date.default';
commit;

-- 02/08/2012 Antonella:
ALTER TABLE SBI_AUDIT ALTER COLUMN DOC_NAME TYPE VARCHAR(200);

-- 11/01/2014 Andrea: added some new selection modality for analytical driver to domain table
DELETE FROM sbi_domains WHERE domain_cd = 'SELECTION_TYPE';
INSERT INTO sbi_domains (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM, VALUE_DS, USER_IN, ORGANIZATION, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'LIST', 'sbidomains.nm.list', 'SELECTION_TYPE', 'Selection modality of parameter values', 'sbidomains.ds.list', 'SPAGOBI', 'SPAGOBI', current_timestamp);
UPDATE HIBERNATE_SEQUENCES set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
COMMIT;

INSERT INTO sbi_domains (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM, VALUE_DS, USER_IN, ORGANIZATION, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'LOOKUP', 'sbidomains.nm.lookup', 'SELECTION_TYPE', 'Selection modality of parameter values', 'sbidomains.ds.lookup', 'SPAGOBI', 'SPAGOBI', current_timestamp);
UPDATE HIBERNATE_SEQUENCES set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
COMMIT;

INSERT INTO sbi_domains (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM, VALUE_DS, USER_IN, ORGANIZATION, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'SLIDER', 'sbidomains.nm.slider', 'SELECTION_TYPE', 'Selection modality of parameter values', 'sbidomains.ds.slider', 'SPAGOBI', 'SPAGOBI', current_timestamp);
UPDATE HIBERNATE_SEQUENCES set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
COMMIT;

INSERT INTO sbi_domains (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM, VALUE_DS, USER_IN, ORGANIZATION, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'TREE', 'sbidomains.nm.tree', 'SELECTION_TYPE', 'Selection modality of parameter values', 'sbidomains.ds.tree', 'SPAGOBI', 'SPAGOBI', current_timestamp);
UPDATE HIBERNATE_SEQUENCES set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
COMMIT;

INSERT INTO sbi_domains (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM, VALUE_DS, USER_IN, ORGANIZATION, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'COMBOBOX', 'sbidomains.nm.combobox', 'SELECTION_TYPE', 'Selection modality of parameter values', 'sbidomains.ds.combobox', 'SPAGOBI', 'SPAGOBI', current_timestamp);
UPDATE HIBERNATE_SEQUENCES set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
COMMIT;



UPDATE sbi_obj_par SET MULT_FL=0;
UPDATE sbi_obj_par SET MULT_FL=1 WHERE par_id IN (SELECT a.par_id FROM   sbi_parameters a, sbi_paruse m
WHERE a.par_id = m.par_id and selection_type = 'CHECK_LIST');
UPDATE sbi_paruse SET selection_type='LOOKUP' WHERE selection_type = 'CHECK_LIST'OR selection_type = 'LIST';
COMMIT;




-- 11/01/2014 Andrea: moved mandatory selction to document detail
-- see: SPAGOBI-1043
UPDATE sbi_obj_par SET REQ_FL=0;
UPDATE sbi_obj_par SET REQ_FL=1 WHERE par_id IN (SELECT a.par_id FROM   sbi_parameters a, sbi_paruse m, sbi_paruse_ck r, sbi_checks c
WHERE a.par_id = m.par_id and m.use_id = r.use_id and r.check_id = c.check_id and c.value_type_cd = 'MANDATORY')

-- 29/01/2013 Davide: Catalogues for meta-models and artifacts
INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'ArtifactCatalogueManagement','ArtifactCatalogueManagement', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';
commit;

INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'ArtifactCatalogueManagement'));
commit;

INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'MetaModelsCatalogueManagement','MetaModelsCatalogueManagement', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';
commit;

INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'MetaModelsCatalogueManagement'));
commit;

CREATE TABLE SBI_META_MODELS (
       ID                   INTEGER NOT NULL,
       NAME                 VARCHAR(100) NOT NULL,
       DESCR                VARCHAR(500) NULL,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       CONSTRAINT XAK1SBI_META_MODELS UNIQUE (NAME, ORGANIZATION),
       PRIMARY KEY (ID)
) WITHOUT OIDS;

CREATE TABLE SBI_META_MODELS_VERSIONS (
        ID                   INTEGER NOT NULL,
        MODEL_ID             INTEGER NOT NULL,
        CONTENT              BYTEA NOT NULL,
        NAME                 VARCHAR(100),
        PROG                 INTEGER,
        CREATION_DATE        TIMESTAMP NULL DEFAULT NULL,
        CREATION_USER        VARCHAR(50) NOT NULL,
        ACTIVE               BOOLEAN,
        USER_IN              VARCHAR(100) NOT NULL,
        USER_UP              VARCHAR(100),
        USER_DE              VARCHAR(100),
        TIME_IN              TIMESTAMP NOT NULL,
        TIME_UP              TIMESTAMP NULL DEFAULT NULL,
        TIME_DE              TIMESTAMP NULL DEFAULT NULL,
        SBI_VERSION_IN       VARCHAR(10),
        SBI_VERSION_UP       VARCHAR(10),
        SBI_VERSION_DE       VARCHAR(10),
        META_VERSION         VARCHAR(100),
        ORGANIZATION         VARCHAR(20),
        PRIMARY KEY (ID)
) WITHOUT OIDS;

ALTER TABLE SBI_META_MODELS_VERSIONS ADD CONSTRAINT FK_SBI_META_MODELS_VERSIONS_1 FOREIGN KEY ( MODEL_ID ) REFERENCES SBI_META_MODELS( ID ) ON DELETE CASCADE;

CREATE TABLE SBI_ARTIFACTS (
       ID                   INTEGER NOT NULL,
       NAME                 VARCHAR(100) NOT NULL,
       DESCR                VARCHAR(500) NULL,
       TYPE                 VARCHAR(50) NULL,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       CONSTRAINT XAK1SBI_ARTIFACTS UNIQUE (NAME, TYPE, ORGANIZATION),
       PRIMARY KEY (ID)
) WITHOUT OIDS;

CREATE TABLE SBI_ARTIFACTS_VERSIONS (
        ID                   INTEGER NOT NULL,
        ARTIFACT_ID          INTEGER NOT NULL,
        CONTENT              BYTEA NOT NULL,
        NAME                 VARCHAR(100),
        PROG                 INTEGER,
        CREATION_DATE        TIMESTAMP NULL DEFAULT NULL,
        CREATION_USER        VARCHAR(50) NOT NULL,
        ACTIVE               BOOLEAN,
        USER_IN              VARCHAR(100) NOT NULL,
        USER_UP              VARCHAR(100),
        USER_DE              VARCHAR(100),
        TIME_IN              TIMESTAMP NOT NULL,
        TIME_UP              TIMESTAMP NULL DEFAULT NULL,
        TIME_DE              TIMESTAMP NULL DEFAULT NULL,
        SBI_VERSION_IN       VARCHAR(10),
        SBI_VERSION_UP       VARCHAR(10),
        SBI_VERSION_DE       VARCHAR(10),
        META_VERSION         VARCHAR(100),
        ORGANIZATION         VARCHAR(20),
        PRIMARY KEY (ID)
) WITHOUT OIDS;

ALTER TABLE SBI_ARTIFACTS_VERSIONS ADD CONSTRAINT FK_SBI_ARTIFACTS_VERSIONS_1 FOREIGN KEY ( ARTIFACT_ID ) REFERENCES SBI_ARTIFACTS( ID ) ON DELETE CASCADE;

-- 30/01/2013 Davide: analytical drivers' default values
ALTER TABLE SBI_PARUSE ADD COLUMN DEFAULT_LOV_ID INTEGER NULL;
ALTER TABLE SBI_PARUSE ADD COLUMN DEFAULT_FORMULA VARCHAR(4000) NULL;
ALTER TABLE SBI_PARUSE ADD CONSTRAINT FK_SBI_PARUSE_3 FOREIGN KEY ( DEFAULT_LOV_ID ) REFERENCES SBI_LOV ( LOV_ID ) ON DELETE RESTRICT;

-- 08/04/2013 Davide: definition of "create Worksheet from dataset user functionality"
INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'CreateWorksheetFromDatasetUserFunctionality','CreateWorksheetFromDatasetUserFunctionality', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';
commit;
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'USER' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'CreateWorksheetFromDatasetUserFunctionality'));
commit;

--- 23/04/2013 Marco: added column Category_Id on SBI_META_MODELS
ALTER TABLE SBI_META_MODELS ADD COLUMN CATEGORY_ID INTEGER NULL;

--- 23/04/2013 Anto: added column for persistence dataset management
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN IS_PERSISTED BOOLEAN DEFAULT FALSE;
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN DATA_SOURCE_PERSIST_ID INTEGER NULL;
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN IS_FLAT_DATASET BOOLEAN DEFAULT FALSE;
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN FLAT_TABLE_NAME VARCHAR(50) NULL;
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN DATA_SOURCE_FLAT_ID INTEGER NULL;

ALTER TABLE SBI_DATA_SET_HISTORY ADD CONSTRAINT FK_SBI_DATA_SET_DS3 FOREIGN KEY ( DATA_SOURCE_PERSIST_ID ) REFERENCES SBI_DATA_SOURCE( DS_ID ) ON DELETE CASCADE;
ALTER TABLE SBI_DATA_SET_HISTORY ADD CONSTRAINT FK_SBI_DATA_SET_DS4 FOREIGN KEY ( DATA_SOURCE_FLAT_ID ) REFERENCES SBI_DATA_SOURCE( DS_ID ) ON DELETE CASCADE;

--27/05/2013 Antonella: modifies for refactoring datasets:
CREATE TABLE SBI_DATA_SET_TEMP (
	   DS_ID 		   		        INTEGER NOT NULL ,
	   VERSION_NUM	   		 	  INTEGER NOT NULL,
	   ACTIVE		   		 	      BOOLEAN NOT NULL,
	   DESCR 		   		        VARCHAR(160),
	   LABEL	 	   		        VARCHAR(51) NOT NULL,
	   NAME	   	   			      VARCHAR(52) NOT NULL,
	   OBJECT_TYPE   		 	    VARCHAR(53),
	   DS_METADATA    		 	  TEXT,
	   PARAMS         		 	  VARCHAR(4000),
	   CATEGORY_ID    		 	  INTEGER,
	   TRANSFORMER_ID 		 	  INTEGER,
	   PIVOT_COLUMN   		 	  VARCHAR(54),
	   PIVOT_ROW      		 	  VARCHAR(55),
	   PIVOT_VALUE   		 	    VARCHAR(56),
	   NUM_ROWS	   		 	      BOOLEAN DEFAULT FALSE,
	   IS_PERSISTED  		 	    BOOLEAN DEFAULT FALSE,
	   DATA_SOURCE_PERSIST_ID INTEGER NULL,
	   IS_FLAT_DATASET 		    BOOLEAN DEFAULT FALSE,
	   FLAT_TABLE_NAME 		    VARCHAR(57) NULL,
	   DATA_SOURCE_FLAT_ID 	  INTEGER NULL,
	   CONFIGURATION          TEXT NULL,
	   USER_IN                VARCHAR(100) NOT NULL,
	   USER_UP                VARCHAR(100),
	   USER_DE                VARCHAR(100),
	   TIME_IN                TIMESTAMP NOT NULL,
	   TIME_UP                TIMESTAMP NULL DEFAULT NULL,
	   TIME_DE                TIMESTAMP NULL DEFAULT NULL,
	   SBI_VERSION_IN         VARCHAR(10),
	   SBI_VERSION_UP         VARCHAR(10),
	   SBI_VERSION_DE         VARCHAR(10),
	   META_VERSION           VARCHAR(100),
	   ORGANIZATION           VARCHAR(20),
	CONSTRAINT XAK2SBI_DATA_SET UNIQUE (LABEL, VERSION_NUM, ORGANIZATION),
     PRIMARY KEY (DS_ID, VERSION_NUM)
);

INSERT INTO SBI_DATA_SET_TEMP (DS_ID, VERSION_NUM, ACTIVE,  LABEL, DESCR, NAME, OBJECT_TYPE, DS_METADATA, PARAMS, CATEGORY_ID, TRANSFORMER_ID, PIVOT_COLUMN, PIVOT_ROW, PIVOT_VALUE, NUM_ROWS, IS_PERSISTED,
DATA_SOURCE_PERSIST_ID, IS_FLAT_DATASET, FLAT_TABLE_NAME, DATA_SOURCE_FLAT_ID, USER_IN, USER_UP, USER_DE, TIME_IN, TIME_UP, TIME_DE, SBI_VERSION_IN, SBI_VERSION_UP, SBI_VERSION_DE,
META_VERSION, ORGANIZATION, CONFIGURATION)
SELECT DS.DS_ID, ds_h.VERSION_NUM, ds_h.ACTIVE, ds.LABEL, ds.DESCR, ds.name,
ds_h.OBJECT_TYPE, ds_h.DS_METADATA,
ds_h.PARAMS, ds_h.CATEGORY_ID, ds_h.TRANSFORMER_ID, ds_h.PIVOT_COLUMN, ds_h.PIVOT_ROW,
ds_h.PIVOT_VALUE, ds_h.NUM_ROWS, ds_h.IS_PERSISTED, ds_h.DATA_SOURCE_PERSIST_ID,
ds_h.IS_FLAT_DATASET, ds_h.FLAT_TABLE_NAME, ds_h.DATA_SOURCE_FLAT_ID, ds_h.USER_IN,
null as USER_UP,null as USER_DE, ds_h.TIME_IN, null as TIME_UP, null as TIME_DE,
ds_h.SBI_VERSION_IN, null as SBI_VERSION_UP,  null as SBI_VERSION_DE, ds_h.META_VERSION,
ds_h.ORGANIZATION,
case when ds_h.OBJECT_TYPE = 'SbiQueryDataSet' then
'{"Query":"' || REPLACE(ds_h.QUERY,'"','\\"') || '","queryScript":"' || REPLACE(COALESCE(DS_H.QUERY_SCRIPT,''),'"','\\"') || '","queryScriptLanguage":"' || COALESCE(QUERY_SCRIPT_LANGUAGE,'') || '","dataSource":"' || COALESCE(CAST((SELECT LABEL FROM SBI_DATA_SOURCE WHERE DS_ID = DATA_SOURCE_ID) AS CHAR),'') || '"}'
WHEN ds_h.OBJECT_TYPE = 'SbiFileDataSet' then
'{"fileName":"' || COALESCE(DS_H.FILE_NAME,'') || '"}'
WHEN ds_h.OBJECT_TYPE = 'SbiFileDataSet' then
'{"SbiJClassDataSet":"' || COALESCE(DS_H.JCLASS_NAME,'') || '"}'
WHEN ds_h.OBJECT_TYPE = 'SbiFileDataSet' then
'{"wsAddress":"' || COALESCE(DS_H.ADRESS,'') || '","wsOperation":"' || COALESCE(DS_H.OPERATION,'') || '"}'
WHEN ds_h.OBJECT_TYPE = 'SbiScriptDataSet' then
'{"Script":"' || REPLACE(COALESCE(DS_H.SCRIPT,''),'"','\\"') || '","scriptLanguage":"' || COALESCE(DS_H.LANGUAGE_SCRIPT,'') || '"}'
WHEN ds_h.OBJECT_TYPE = 'SbiCustomDataSet' then
'{"customData":"' || REPLACE(COALESCE(DS_H.CUSTOM_DATA,'"{}"'),'"','\\"') || '","jClassName":"' || COALESCE(DS_H.JCLASS_NAME,'') || '"}'
WHEN ds_h.OBJECT_TYPE = 'SbiQbeDataSet' then
'{"qbeDatamarts":"' || COALESCE(DS_H.DATAMARTS,'') || '","qbeDataSource":"' || COALESCE(CAST((SELECT LABEL FROM SBI_DATA_SOURCE WHERE DS_ID = DATA_SOURCE_ID) AS CHAR),'') || '","qbeJSONQuery":"' || REPLACE(COALESCE(DS_H.JSON_QUERY,''),'"','\\"') || '"}'
end AS CONFIGURATION
FROM
SBI_DATA_SET DS INNER JOIN SBI_DATA_SET_HISTORY DS_H ON (DS.DS_ID = DS_H.DS_ID)
order by ds_id, version_num;

commit;

ALTER TABLE SBI_DATA_SET RENAME TO SBI_DATA_SET_OLD
ALTER TABLE SBI_DATA_SET_HISOTRY RENAME TO SBI_DATA_SET_HISTORY_OLD
ALTER TABLE SBI_DATA_SET_TEMP RENAME TO RENAME TABLE  TO SBI_DATA_SET;

-- da fare se tutto � andato ok! Sar� nella versione finale.
--DROP OLDER FK TO SBI_DATA_SET
--ALTER TABLE SBI_LOV DROP CONSTRAINT FK_SBI_LOV_2;
--ALTER TABLE SBI_OBJECTS DROP CONSTRAINT FK_SBI_OBJECTS_7;

--ATTENTION: for the SBI_KPI table the FK haven't an explicity name, so is necessary get it and use it in drop command:
--select conname from pg_constraint where conrelid = (select oid from pg_class where relname='sbi_kpi') and confrelid = (select oid from pg_class where relname='sbi_data_set');
--ALTER TABLE sbi_kpi DROP CONSTRAINT <FK_NAME_GETTED>;

--DROP TABLE SBI_DATA_SET_HISTORY CASCADE;
--DROP TABLE SBI_DATA_SET CASCADE;
-- to do only after drop stmt
--ALTER TABLE SBI_DATA_SET ADD CONSTRAINT FK_SBI_DATA_SET_T  FOREIGN KEY ( TRANSFORMER_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID ) ON DELETE CASCADE;
--ALTER TABLE SBI_DATA_SET ADD CONSTRAINT FK_SBI_DATA_SET_CAT  FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_DOMAINS (VALUE_ID) ON DELETE CASCADE ON UPDATE RESTRICT;
--ALTER TABLE SBI_DATA_SET ADD CONSTRAINT FK_SBI_DATA_SET_DS3 FOREIGN KEY ( DATA_SOURCE_PERSIST_ID ) REFERENCES SBI_DATA_SOURCE( DS_ID ) ON DELETE CASCADE;
--ALTER TABLE SBI_DATA_SET ADD CONSTRAINT FK_SBI_DATA_SET_DS4 FOREIGN KEY ( DATA_SOURCE_FLAT_ID ) REFERENCES SBI_DATA_SOURCE( DS_ID ) ON DELETE CASCADE;


--- 06/05/2013 Marco: added table SBI_EXT_ROLES_CATEGORY
CREATE TABLE  SBI_EXT_ROLES_CATEGORY (
  EXT_ROLE_ID INTEGER NOT NULL,
  CATEGORY_ID INTEGER NOT NULL,
  PRIMARY KEY (EXT_ROLE_ID,CATEGORY_ID),
  CONSTRAINT FK_SB_EXT_ROLES_META_MODEL_CATEGORY_1 FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID),
  CONSTRAINT FK_SB_EXT_ROLES_META_MODEL_CATEGORY_2 FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_DOMAINS (VALUE_ID)
);


-- 28/05/2013 Antonella: insert records for selfservice dataset management
INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'SelfServiceDatasetManagement','SelfServiceDatasetManagement', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';
commit;
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'USER' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceDatasetManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceDatasetManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'DEV_ROLE' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceDatasetManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'TEST_ROLE' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceDatasetManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'MODEL_ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceDatasetManagement'));
commit;

-- 29/05/2013 Davide: Worksheet engine is able to use datasets
UPDATE SBI_ENGINES SET USE_DATASET = TRUE WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.worksheet.WorksheetDriver';
commit;

-- 10/06/2013 Antonella: add columns for dataset PUBLIC / PRIVATE
ALTER TABLE SBI_DATA_SET ADD COLUMN OWNER VARCHAR(50);
ALTER TABLE SBI_DATA_SET ADD COLUMN IS_PUBLIC BOOLEAN DEFAULT FALSE;

UPDATE SBI_DATA_SET SET IS_PUBLIC = TRUE, OWNER = USER_IN;
COMMIT;


-- 07/06/2013 Alberto: insert records for selfservice metamodels management

INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'SelfServiceMetaModelManagement','SelfServiceMetaModelManagement', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';
commit;
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'USER' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceMetaModelManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceMetaModelManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'DEV_ROLE' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceMetaModelManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'TEST_ROLE' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceMetaModelManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'MODEL_ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceMetaModelManagement'));
commit;

-- 11/06/2013 Alberto: add the data source column for the metamodels

ALTER TABLE SBI_META_MODELS  ADD COLUMN DATA_SOURCE_ID INTEGER
ALTER TABLE SBI_META_MODELS ADD CONSTRAINT FK_SBIDATA_SOURCE FOREIGN KEY ( DATA_SOURCE_ID ) REFERENCES SBI_DATA_SOURCE( DS_ID );

-- 20/06/2013 Davide: added DATASET_FILE_MAX_SIZE config parameter
INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, CATEGORY, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),
'SPAGOBI.DATASET_FILE_MAX_SIZE', 'DATASET FILE MAX SIZE', 'Max size for a file used as a dataset', true, '10485760',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'STRING' AND DOMAIN_CD = 'PAR_TYPE'), 'GENERIC_CONFIGURATION', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit;

-- 21/06/2013 Davide: fixed SPAGOBI.TIMESTAMP-FORMAT.format (was dd/MM/yyyy hh:mm:ss)
UPDATE SBI_CONFIG SET VALUE_CHECK = 'dd/MM/yyyy HH:mm:ss' WHERE LABEL = 'SPAGOBI.TIMESTAMP-FORMAT.format';
commit;


--21/06/2013 Anto: Added authorizations for final user management
ALTER TABLE SBI_EXT_ROLES ADD COLUMN SEE_DOCUMENT_BROWSER BOOLEAN DEFAULT TRUE;
ALTER TABLE SBI_EXT_ROLES ADD COLUMN SEE_FAVOURITES 	BOOLEAN DEFAULT TRUE;
ALTER TABLE SBI_EXT_ROLES ADD COLUMN SEE_SUBSCRIPTIONS 	BOOLEAN DEFAULT TRUE;
ALTER TABLE SBI_EXT_ROLES ADD COLUMN SEE_MY_DATA 		BOOLEAN DEFAULT TRUE;
ALTER TABLE SBI_EXT_ROLES ADD COLUMN SEE_TODO_LIST 		BOOLEAN DEFAULT TRUE;
ALTER TABLE SBI_EXT_ROLES ADD COLUMN CREATE_DOCUMENTS 	BOOLEAN DEFAULT TRUE;

-- 24/06/2013 Marco: Added default mandatory Dataset Metadata Properties
INSERT into SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'fieldType','fieldType','DS_META_PROPERTY','Data Set Metadata Property','Data Set Metadata Property','biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT into SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'type','type','DS_META_PROPERTY','Data Set Metadata Property','Data Set Metadata Property','biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

-- 25/06/2013 Marco: Added default mandatory Dataset Metadata Properties' Values
INSERT into SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'MEASURE','MEASURE','DS_META_VALUE','Data Set Metadata Value','Data Set Metadata Value','biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT into SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'ATTRIBUTE','ATTRIBUTE','DS_META_VALUE','Data Set Metadata Value','Data Set Metadata Value','biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT into SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'String','String','DS_META_VALUE','Data Set Metadata Value','Data Set Metadata Value','biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT into SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'Integer','Integer','DS_META_VALUE','Data Set Metadata Value','Data Set Metadata Value','biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT into SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'Double','Double','DS_META_VALUE','Data Set Metadata Value','Data Set Metadata Value','biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

-- 11/07/2013 Antonella: Added PREVIEW_FILE on SBI_OBJECTS to manage img under resources/preview/images
ALTER TABLE SBI_OBJECTS ADD COLUMN PREVIEW_FILE VARCHAR(100);

-- 17/07/2013 Andrea: Added tables for community management
CREATE TABLE SBI_GEO_LAYERS (
  LAYER_ID INTEGER NOT NULL,
  LABEL varchar(100) NOT NULL,
  NAME varchar(100),
  DESCR varchar(100),
  LAYER_DEFINITION BYTEA NOT NULL,
  TYPE varchar(40),
  USER_IN varchar(100) NOT NULL,
  USER_UP varchar(100) DEFAULT NULL,
  USER_DE varchar(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL,
  TIME_UP timestamp NULL DEFAULT NULL,
  TIME_DE timestamp NULL DEFAULT NULL,
  SBI_VERSION_IN varchar(10) DEFAULT NULL,
  SBI_VERSION_UP varchar(10) DEFAULT NULL,
  SBI_VERSION_DE varchar(10) DEFAULT NULL,
  META_VERSION varchar(100) DEFAULT NULL,
  ORGANIZATION varchar(20) DEFAULT NULL,
  PRIMARY KEY (LAYER_ID)
);

CREATE TABLE SBI_COMMUNITY_USERS (
  COMMUNITY_ID INTEGER NOT NULL,
  USER_ID varchar(100) NOT NULL,
  CREATION_DATE timestamp NOT NULL,
  LAST_CHANGE_DATE timestamp NOT NULL,
  USER_IN varchar(100) NOT NULL,
  USER_UP varchar(100) DEFAULT NULL,
  USER_DE varchar(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL,
  TIME_UP timestamp NULL DEFAULT NULL,
  TIME_DE timestamp NULL DEFAULT NULL,
  SBI_VERSION_IN varchar(10) DEFAULT NULL,
  SBI_VERSION_UP varchar(10) DEFAULT NULL,
  SBI_VERSION_DE varchar(10) DEFAULT NULL,
  META_VERSION varchar(100) DEFAULT NULL,
  ORGANIZATION varchar(20) DEFAULT NULL,
  PRIMARY KEY (COMMUNITY_ID,USER_ID),
  CONSTRAINT FK_COMMUNITY FOREIGN KEY (COMMUNITY_ID) REFERENCES SBI_COMMUNITY (COMMUNITY_ID) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_USER FOREIGN KEY (USER_ID) REFERENCES SBI_USER (USER_ID) ON DELETE NO ACTION ON UPDATE NO ACTION
) WITHOUT OIDS;


--26/07/2013 Alberto: functionality to manage the measure catalogue
INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'MeasuresCatalogueManagement','MeasuresCatalogueManagement', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';

INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'MeasuresCatalogueManagement'));
commit;

-- Davide 01/08/2013: solved bug https://spagobi.eng.it/jira/browse/SPAGOBI-1289
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'CreateWorksheetFromDatasetUserFunctionality'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'DEV_ROLE' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'CreateWorksheetFromDatasetUserFunctionality'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'TEST_ROLE' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'CreateWorksheetFromDatasetUserFunctionality'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'MODEL_ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'CreateWorksheetFromDatasetUserFunctionality'));
commit;

-- Monica 21/08/2013
ALTER TABLE SBI_COMMUNITY ADD UNIQUE INDEX NAME_UNIQUE (ORGANIZATION, NAME ASC) ;

-- 21/08/2013 Alberto: layers catalogue
CREATE TABLE SBI_GEO_LAYERS (
  LAYER_ID int(11) NOT NULL,
  LABEL varchar(100) NOT NULL,
  NAME varchar(100),
  DESCR varchar(100),
  LAYER_DEFINITION BLOB NOT NULL,
  TYPE varchar(40),
  USER_IN varchar(100) NOT NULL,
  USER_UP varchar(100) DEFAULT NULL,
  USER_DE varchar(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  TIME_UP timestamp NULL DEFAULT NULL,
  TIME_DE timestamp NULL DEFAULT NULL,
  SBI_VERSION_IN varchar(10) DEFAULT NULL,
  SBI_VERSION_UP varchar(10) DEFAULT NULL,
  SBI_VERSION_DE varchar(10) DEFAULT NULL,
  META_VERSION varchar(100) DEFAULT NULL,
  ORGANIZATION varchar(20) DEFAULT NULL,
  PRIMARY KEY (`LAYER_ID`)
) ;


ALTER TABLE SBI_GEO_LAYERS ADD UNIQUE INDEX LABEL_UNIQUE (ORGANIZATION, LABEL ASC) ;


INSERT into SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN)
values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'FILE','FILE','LAYER_TYPE','Layer Type','Layer Type','');
UPDATE hibernate_sequences SET next_val = (SELECT MAX(VALUE_ID) + 1 FROM SBI_DOMAINS) WHERE sequence_name = 'SBI_DOMAINS';

INSERT into SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN)
values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'WFS','WFS','LAYER_TYPE','Layer Type','Layer Type','');
UPDATE hibernate_sequences SET next_val = (SELECT MAX(VALUE_ID) + 1 FROM SBI_DOMAINS) WHERE sequence_name = 'SBI_DOMAINS';

INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'GeoLayersManagement','GeoLayersManagement', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';

INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'GeoLayersManagement'));
commit;



-- Antonella 20/08/2013: managed public/private scope of documents
ALTER TABLE SBI_OBJECTS ADD COLUMN IS_PUBLIC BOOLEAN DEFAULT FALSE;
UPDATE SBI_OBJECTS SET IS_PUBLIC = TRUE;

-- Davide 26/08/2013: added PERSIST_TABLE_NAME column
ALTER TABLE SBI_DATA_SET ADD COLUMN PERSIST_TABLE_NAME VARCHAR(50);

-- Davide 03/09/2013: REFACTORING: flat dataset is a type of dataset
ALTER TABLE SBI_DATA_SET DROP COLUMN IS_FLAT_DATASET CASCADE;
ALTER TABLE SBI_DATA_SET DROP COLUMN FLAT_TABLE_NAME CASCADE;
ALTER TABLE SBI_DATA_SET DROP COLUMN DATA_SOURCE_FLAT_ID CASCADE;

-- Marco 25/09/2013: added IS_BASE_LAYER column to SBI_GEO_LAYERS
ALTER TABLE SBI_GEO_LAYERS ADD COLUMN IS_BASE_LAYER BOOLEAN DEFAULT FALSE;

-- Fabrizio Pajalunga 02/10/2013: added user attributes
INSERT INTO SBI_ATTRIBUTE (attribute_name,description,attribute_id,user_in,time_in,sbi_version_in,organization) values ('gender','gender',(SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'sbi_attribute'),'server_init',sysdate(),'4.0','SPAGOBI');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ATTRIBUTE';
commit;

INSERT INTO SBI_ATTRIBUTE (attribute_name,description,attribute_id,user_in,time_in,sbi_version_in,organization) values ('location','location',(SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'sbi_attribute'),'server_init',sysdate(),'4.0','SPAGOBI');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ATTRIBUTE';
commit;

INSERT INTO SBI_ATTRIBUTE (attribute_name,description,attribute_id,user_in,time_in,sbi_version_in,organization) values ('community','community',(SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'sbi_attribute'),'server_init',sysdate(),'4.0','SPAGOBI');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ATTRIBUTE';
commit;

INSERT INTO SBI_ATTRIBUTE (attribute_name,description,attribute_id,user_in,time_in,sbi_version_in,organization) values ('short_bio','short_bio',(SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'sbi_attribute'),'server_init',sysdate(),'4.0','SPAGOBI');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ATTRIBUTE';
commit;

INSERT INTO SBI_ATTRIBUTE (attribute_name,description,attribute_id,user_in,time_in,sbi_version_in,organization) values ('language','language',(SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'sbi_attribute'),'server_init',sysdate(),'4.0','SPAGOBI');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ATTRIBUTE';
commit;

-- Marco 11/10/2013: changed sbi_data_set primary key
ALTER TABLE SBI_DATA_SET DROP CONSTRAINT SBI_DATA_SET_PKEY;
ALTER TABLE SBI_DATA_SET ADD CONSTRAINT SBI_DATA_SET_PKEY PRIMARY KEY(DS_ID, VERSION_NUM, ORGANIZATION);

ALTER TABLE SBI_COMMUNITY ALTER owner TYPE varchar(200);
ALTER TABLE SBI_COMMUNITY  ALTER COLUMN CREATION_DATE SET DEFAULT CURRENT_TIMESTAMP;
ALTER TABLE SBI_COMMUNITY  ALTER COLUMN LAST_CHANGE_DATE SET DEFAULT CURRENT_TIMESTAMP;
ALTER TABLE SBI_COMMUNITY_USERS  ALTER COLUMN CREATION_DATE SET DEFAULT CURRENT_TIMESTAMP;
ALTER TABLE SBI_COMMUNITY_USERS  ALTER COLUMN LAST_CHANGE_DATE SET DEFAULT CURRENT_TIMESTAMP;

-- Giulio 25/09/2013
ALTER TABLE SBI_ENGINES DROP CONSTRAINT  FK_SBI_ENGINE_3;
ALTER TABLE SBI_ENGINES DROP COLUMN DEFAULT_DS_ID;

ALTER TABLE SBI_DATA_SOURCE ADD COLUMN READ_ONLY BOOLEAN DEFAULT FALSE;
ALTER TABLE SBI_DATA_SOURCE ADD COLUMN WRITE_DEFAULT BOOLEAN DEFAULT FALSE;
commit;

ALTER TABLE SBI_DATA_SET DROP COLUMN DATA_SOURCE_PERSIST_ID;
commit;

-- Davide 21/10/2013: removed spagobi@eng.it from SpagoBI config
UPDATE SBI_CONFIG SET VALUE_CHECK = '' WHERE VALUE_CHECK = 'spagobi@eng.it';
commit;

-- Monica 23/11/2013: added content_type mng for snapshots
ALTER TABLE SBI_SNAPSHOTS ADD COLUMN CONTENT_TYPE VARCHAR(300) DEFAULT NULL;

-- MONICA 30/10/2013: ALTERED COLUMN LENGTH FOR RESOURCE_NAME
ALTER TABLE SBI_RESOURCES ALTER COLUMN RESOURCE_NAME TYPE VARCHAR(200);

-- MONICA 4/11/2013: bug on final user functionality
DELETE FROM SBI_ROLE_TYPE_USER_FUNC WHERE ROLE_TYPE_ID= (SELECT value_id FROM SBI_DOMAINS where domain_cd = 'ROLE_TYPE' AND VALUE_CD ='USER')
AND USER_FUNCT_ID =(SELECT user_funct_id FROM SBI_USER_FUNC where NAME = 'FinalUsersManagement');

-- Marco 4/11/2013 Altered column length for LABEL
ALTER TABLE SBI_OBJECTS ALTER COLUMN LABEL TYPE VARCHAR(100);

-- Monica 6/11/2013 Dataset refactoring USER, ENTERPRISE, TECHNICAL

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
    'USER','User','DS_SCOPE','Dataset scope','Dataset scope', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
    'TECHNICAL','Technical','DS_SCOPE','Dataset scope','Dataset scope', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
    'ENTERPRISE','Enterprise','DS_SCOPE','Dataset scope','Dataset scope', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

ALTER TABLE SBI_DATA_SET ADD COLUMN SCOPE_ID INTEGER NULL DEFAULT NULL;
ALTER TABLE SBI_DATA_SET ADD CONSTRAINT FK_SBI_DOMAINS_2 FOREIGN KEY ( SCOPE_ID ) REFERENCES SBI_DOMAINS( VALUE_ID ) ;

UPDATE SBI_DATA_SET
       SET SCOPE_ID =
                 CASE
                   WHEN OWNER IN (SELECT
						U.USER_ID
						FROM
						SBI_USER U,
						SBI_EXT_USER_ROLES R,
						SBI_EXT_ROLES RO
						WHERE OWNER = U.USER_ID
						AND R.ID = U.ID
						AND RO.EXT_ROLE_ID = R.EXT_ROLE_ID
						AND RO.ROLE_TYPE_CD IN ('ADMIN', 'DEV_ROLE')
						AND IS_PUBLIC = FALSE) THEN (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD='TECHNICAL' AND DOMAIN_CD='DS_SCOPE')
                   WHEN OWNER IN (SELECT
						U.USER_ID
						FROM
						SBI_USER U,
						SBI_EXT_USER_ROLES R,
						SBI_EXT_ROLES RO
						WHERE OWNER = U.USER_ID
						AND R.ID = U.ID
						AND RO.EXT_ROLE_ID = R.EXT_ROLE_ID
						AND RO.ROLE_TYPE_CD IN ('ADMIN', 'DEV_ROLE')
						AND IS_PUBLIC = TRUE) THEN (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD='ENTERPRISE' AND DOMAIN_CD='DS_SCOPE')
                   WHEN OWNER IN (SELECT
						U.USER_ID
						FROM
						SBI_USER U,
						SBI_EXT_USER_ROLES R,
						SBI_EXT_ROLES RO
						WHERE OWNER = U.USER_ID
						AND R.ID = U.ID
						AND RO.EXT_ROLE_ID = R.EXT_ROLE_ID
						AND RO.ROLE_TYPE_CD ='USER') THEN (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD='USER' AND DOMAIN_CD='DS_SCOPE')
                   ELSE (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD='TECHNICAL' AND DOMAIN_CD='DS_SCOPE')
                 END;

commit;

--12/11/2013 Antonella: delete MANDATORY check
DELETE FROM SBI_PARUSE_CK WHERE CHECK_ID = (SELECT CHECK_ID FROM SBI_CHECKS WHERE value_Type_Cd = 'MANDATORY');
DELETE FROM SBI_CHECKS WHERE CHECK_ID = (SELECT CHECK_ID FROM SBI_CHECKS WHERE value_Type_Cd = 'MANDATORY');
COMMIT;

--13/11/2013 Marco: fix bug in functionalities initializers
DELETE FROM SBI_USER_FUNC WHERE NAME = 'FinalUsersManagement';
COMMIT;

-- Monica 9/12/2013 Multi-Tenancy functionalities
INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
'TenantManagement','TenantManagement', 'server', CURRENT_TIMESTAMP);
UPDATE hibernate_sequences SET next_val = next_val+1 WHERE sequence_name = 'SBI_USER_FUNC';

INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
(SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'TenantManagement'));
COMMIT;

ALTER TABLE SBI_ORGANIZATIONS ADD COLUMN THEME VARCHAR(100) NULL DEFAULT 'SPAGOBI.THEMES.THEME.default';
ALTER TABLE SBI_USER ADD COLUMN IS_SUPERADMIN BOOLEAN DEFAULT FALSE;

UPDATE SBI_USER SET IS_SUPERADMIN = TRUE WHERE ID IN(
	SELECT ur.ID FROM SBI_EXT_USER_ROLES ur WHERE ur.EXT_ROLE_ID IN(
		SELECT role.EXT_ROLE_ID FROM SBI_EXT_ROLES role WHERE role.ROLE_TYPE_CD = 'ADMIN'
	)
);

CREATE TABLE SBI_ORGANIZATION_ENGINE (
  ENGINE_ID INTEGER NOT NULL,
  ORGANIZATION_ID INTEGER NOT NULL,
  CREATION_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ,
  LAST_CHANGE_DATE timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  USER_IN VARCHAR(100) NOT NULL,
  USER_UP VARCHAR(100) DEFAULT NULL,
  USER_DE VARCHAR(100) DEFAULT NULL,
  TIME_IN TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  TIME_UP TIMESTAMP NULL DEFAULT NULL,
  TIME_DE TIMESTAMP NULL DEFAULT NULL,
  SBI_VERSION_IN VARCHAR(10) DEFAULT NULL,
  SBI_VERSION_UP VARCHAR(10) DEFAULT NULL,
  SBI_VERSION_DE VARCHAR(10) DEFAULT NULL,
  META_VERSION VARCHAR(100) DEFAULT NULL,
  ORGANIZATION VARCHAR(20) DEFAULT NULL,
  PRIMARY KEY (ENGINE_ID,ORGANIZATION_ID ),
  CONSTRAINT FK_ENGINE_1 FOREIGN KEY (ENGINE_ID) REFERENCES SBI_ENGINES (ENGINE_ID) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_ORGANIZATION_1 FOREIGN KEY (ORGANIZATION_ID) REFERENCES SBI_ORGANIZATIONS (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
) ;


CREATE TABLE SBI_ORGANIZATION_DATASOURCE (
  DATASOURCE_ID INTEGER NOT NULL,
  ORGANIZATION_ID INTEGER NOT NULL,
  CREATION_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  LAST_CHANGE_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  USER_IN VARCHAR(100) NOT NULL,
  USER_UP VARCHAR(100) DEFAULT NULL,
  USER_DE VARCHAR(100) DEFAULT NULL,
  TIME_IN TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  TIME_UP TIMESTAMP NULL DEFAULT NULL,
  TIME_DE TIMESTAMP NULL DEFAULT NULL,
  SBI_VERSION_IN VARCHAR(10) DEFAULT NULL,
  SBI_VERSION_UP VARCHAR(10) DEFAULT NULL,
  SBI_VERSION_DE VARCHAR(10) DEFAULT NULL,
  META_VERSION VARCHAR(100) DEFAULT NULL,
  ORGANIZATION VARCHAR(20) DEFAULT NULL,
  PRIMARY KEY (DATASOURCE_ID,ORGANIZATION_ID ),
  CONSTRAINT FK_DATASOURCE_2 FOREIGN KEY (DATASOURCE_ID) REFERENCES SBI_DATA_SOURCE (DS_ID) ON UPDATE NO ACTION ON DELETE CASCADE,
  CONSTRAINT FK_ORGANIZATION_2 FOREIGN KEY (ORGANIZATION_ID) REFERENCES SBI_ORGANIZATIONS (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
) ;

INSERT INTO sbi_organization_datasource (DATASOURCE_ID, ORGANIZATION_ID, CREATION_DATE, LAST_CHANGE_DATE, USER_IN, TIME_IN, SBI_VERSION_IN)
  SELECT ds.ds_id, org.id,  CURRENT_TIMESTAMP,  CURRENT_TIMESTAMP, 'server',  CURRENT_TIMESTAMP, '4.1'
  FROM sbi_data_source ds, sbi_organizations org WHERE ds.organization = org.name;

 INSERT INTO sbi_organization_engine (ENGINE_ID, ORGANIZATION_ID, CREATION_DATE, LAST_CHANGE_DATE, USER_IN, TIME_IN, SBI_VERSION_IN)
  SELECT eng.engine_id, org.id,  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'server',  CURRENT_TIMESTAMP, '4.1'
  FROM sbi_engines eng, sbi_organizations org WHERE eng.organization = org.name;

UPDATE SBI_OBJECTS r JOIN (
SELECT B.ENGINE_ID AS OK, A.ENGINE_ID AS KO
FROM
(SELECT ENGINE_ID, LABEL, ORGANIZATION FROM SBI_ENGINES WHERE ORGANIZATION !='SPAGOBI') A,
(SELECT ENGINE_ID, LABEL, ORGANIZATION FROM SBI_ENGINES WHERE ORGANIZATION ='SPAGOBI') B
WHERE A.LABEL=B.LABEL
) t ON (r.ENGINE_ID = t.KO)
SET r.ENGINE_ID = t.OK
WHERE r.ENGINE_ID = t.KO;
(SELECT ENGINE_ID, LABEL, ORGANIZATION FROM SBI_ENGINES WHERE ORGANIZATION !='SPAGOBI');

DELETE FROM SBI_EXPORTERS where engine_id IN (SELECT ENGINE_ID FROM SBI_ENGINES WHERE ORGANIZATION !='SPAGOBI');
COMMIT;

delete from SBI_ENGINES where organization !='SPAGOBI';
COMMIT;

-- 9/12/13 Monica: functionalities refactoring

 CREATE TABLE SBI_AUTHORIZATIONS (
  ID INTEGER NOT NULL,
  NAME VARCHAR(200) DEFAULT NULL,
  CREATION_DATE timestamp NOT NULL,
  LAST_CHANGE_DATE timestamp NOT NULL,
  USER_IN VARCHAR(100) NOT NULL,
  USER_UP VARCHAR(100) DEFAULT NULL,
  USER_DE VARCHAR(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL,
  TIME_UP timestamp DEFAULT NULL,
  TIME_DE timestamp DEFAULT NULL,
  SBI_VERSION_IN VARCHAR(10) DEFAULT NULL,
  SBI_VERSION_UP VARCHAR(10) DEFAULT NULL,
  SBI_VERSION_DE VARCHAR(10) DEFAULT NULL,
  META_VERSION VARCHAR(100) DEFAULT NULL,
  ORGANIZATION VARCHAR(20) DEFAULT NULL,
  PRIMARY KEY (ID)
) WITHOUT OIDS;
insert into hibernate_sequences (SEQUENCE_NAME, NEXT_VAL)
values('SBI_AUTHORIZATIONS', 1);
COMMIT;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SAVE_SUBOBJECTS',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
commit;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_SUBOBJECTS',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
commit;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_VIEWPOINTS',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
commit;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;


INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_SNAPSHOTS',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
commit;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_NOTES',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEND_MAIL',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SAVE_INTO_FOLDER',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SAVE_REMEMBER_ME',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_METADATA',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SAVE_METADATA',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'BUILD_QBE_QUERY',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'DO_MASSIVE_EXPORT',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'EDIT_WORKSHEET',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;


INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'MANAGE_USERS',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_DOCUMENT_BROWSER',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_FAVOURITES',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_SUBSCRIPTIONS',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;


INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_MY_DATA',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;


INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_TODO_LIST',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;



INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'CREATE_DOCUMENTS',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

CREATE TABLE SBI_AUTHORIZATIONS_ROLES (
  AUTHORIZATION_ID INTEGER NOT NULL,
  ROLE_ID INTEGER NOT NULL,
  USER_IN VARCHAR(100) NOT NULL,
  USER_UP VARCHAR(100) DEFAULT NULL,
  USER_DE VARCHAR(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL,
  TIME_UP timestamp  DEFAULT NULL,
  TIME_DE timestamp  DEFAULT NULL,
  SBI_VERSION_IN VARCHAR(10) DEFAULT NULL,
  SBI_VERSION_UP VARCHAR(10) DEFAULT NULL,
  SBI_VERSION_DE VARCHAR(10) DEFAULT NULL,
  META_VERSION VARCHAR(100) DEFAULT NULL,
  ORGANIZATION VARCHAR(20) DEFAULT NULL,
  PRIMARY KEY (AUTHORIZATION_ID,ROLE_ID ),
  CONSTRAINT FK_ROLE1 FOREIGN KEY (ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID),
  CONSTRAINT FK_AUTHORIZATION_1 FOREIGN KEY (AUTHORIZATION_ID) REFERENCES SBI_AUTHORIZATIONS (ID)
) WITHOUT OIDS;

INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SAVE_SUBOBJECTS') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SAVE_SUBOBJECTS IS TRUE;

INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'CREATE_DOCUMENTS') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.CREATE_DOCUMENTS IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_SUBOBJECTS') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_SUBOBJECTS IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_VIEWPOINTS') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_VIEWPOINTS IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_SNAPSHOTS') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_SNAPSHOTS IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_NOTES') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_NOTES IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEND_MAIL') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEND_MAIL IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SAVE_INTO_FOLDER') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SAVE_INTO_FOLDER IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SAVE_REMEMBER_ME') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SAVE_REMEMBER_ME IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_METADATA') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_METADATA IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SAVE_METADATA') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SAVE_METADATA IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'BUILD_QBE_QUERY') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.BUILD_QBE_QUERY IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'DO_MASSIVE_EXPORT') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.DO_MASSIVE_EXPORT IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'EDIT_WORKSHEET') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.EDIT_WORKSHEET IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'MANAGE_USERS') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.MANAGE_USERS IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_DOCUMENT_BROWSER') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_DOCUMENT_BROWSER IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_FAVOURITES') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_FAVOURITES IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_SUBSCRIPTIONS') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_SUBSCRIPTIONS IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_MY_DATA') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_MY_DATA IS TRUE;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_TODO_LIST') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_TODO_LIST IS TRUE;

UPDATE SBI_ENGINES SET DRIVER_NM = 'it.eng.spagobi.engines.drivers.gis.GisDriver'
		WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.generic.GenericDriver'
		AND BIOBJ_TYPE IN (SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'MAP');
COMMIT;

--27/01/2014 Antonella: Added SpagoBICockpitEngine configuration
INSERT INTO sbi_engines
(ENGINE_ID,ENCRYPT,NAME,DESCR,MAIN_URL,SECN_URL,OBJ_UPL_DIR,OBJ_USE_DIR,DRIVER_NM,LABEL,ENGINE_TYPE,CLASS_NM,BIOBJ_TYPE,USE_DATASET,USE_DATASOURCE,USER_IN,USER_UP,USER_DE,TIME_IN,
TIME_UP,TIME_DE,SBI_VERSION_IN,SBI_VERSION_UP,SBI_VERSION_DE,META_VERSION,ORGANIZATION)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_ENGINES'), 0, 'Cockpit Engine', 'Cockpit Engine', '/SpagoBICockpitEngine/CockpitEngineStartAction', NULL, NULL, NULL, 'it.eng.spagobi.engines.drivers.cockpit.CockpitDriver', 'SpagoBICockpitEngine', (SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ENGINE_TYPE' AND VALUE_CD = 'EXT'), '',(SELECT VALUE_ID FROM spagobi.SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'DOCUMENT_COMPOSITE'), false, false, 'database', 'biadmin', NULL, '2014-01-09 00:00:00', '2014-01-09 00:00:00', NULL, '4.1', '4.1', NULL, NULL, 'SPAGOBI');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ENGINES';
commit;

INSERT INTO SBI_ORGANIZATION_ENGINE (ENGINE_ID, ORGANIZATION_ID, CREATION_DATE, LAST_CHANGE_DATE, USER_IN, TIME_IN, SBI_VERSION_IN)
values((SELECT engine_id from sbi_engines where label='SpagoBICockpitEngine'), (select id from sbi_organizations where name = 'SPAGOBI'),
NOW(), NOW(), 'server', NOW(), '4.1');
commit;

--14/02/2014: Added XMLADriver:
update SBI_ENGINES SET DRIVER_NM = 'it.eng.spagobi.engines.drivers.xmla.XMLADriver' where label = 'XMLAEngine';
commit;


-- 10/03/2014  Angelo
ALTER TABLE SBI_AUDIT MODIFY DOC_LABEL varchar(200);
ALTER TABLE SBI_AUDIT MODIFY DOC_NAME varchar(200);

-- 13/03/2014 aNGELO
ALTER TABLE SBI_OBJECTS DROP FOREIGN KEY FK_SBI_OBJECTS_5;
ALTER TABLE SBI_OBJECTS DROP FOREIGN KEY FK_SBI_OBJECTS_6;

-- 18/03/2014 Marco
CREATE TABLE SBI_TRIGGER_PAUSED (
	   ID 					INTEGER  NOT NULL ,
       TRIGGER_NAME	 	    VARCHAR(80) NOT NULL,
       TRIGGER_GROUP 	    VARCHAR(80) NOT NULL,
       JOB_NAME 	        VARCHAR(80) NOT NULL,
       JOB_GROUP 	        VARCHAR(80) NOT NULL,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       CONSTRAINT XAK1SBI_TRIGGER_PAUSED UNIQUE(TRIGGER_NAME, TRIGGER_GROUP, JOB_NAME, JOB_GROUP),
       PRIMARY KEY (ID)
) WITHOUT OIDS;

INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, CATEGORY, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),
'SPAGOBI.DOCUMENTS.MAX_PREVIEW_IMAGE_SIZE', 'Max preview image size', 'Max dimension for a document''s preview image', true, '1048576',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'NUM' AND DOMAIN_CD = 'PAR_TYPE'), 'GENERIC_CONFIGURATION', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit;
INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, CATEGORY, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),
'SPAGOBI.DOCUMENTS.MAX_PREVIEW_IMAGES_NUM', 'Max preview images', 'Max number for documents'' preview images', true, '200',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'NUM' AND DOMAIN_CD = 'PAR_TYPE'), 'GENERIC_CONFIGURATION', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit;

-- 28/03/2014 Davide: removed SBI_OBJECTS.IS_PUBLIC column
ALTER TABLE SBI_OBJECTS DROP COLUMN IS_PUBLIC;

-- 30/04/2014 Davide: added SpagoBIWhatIfEngine engine
INSERT INTO SBI_ENGINES
(ENGINE_ID,ENCRYPT,NAME,DESCR,MAIN_URL,SECN_URL,OBJ_UPL_DIR,OBJ_USE_DIR,DRIVER_NM,LABEL,ENGINE_TYPE,CLASS_NM,BIOBJ_TYPE,USE_DATASET,USE_DATASOURCE,USER_IN,USER_UP,USER_DE,TIME_IN,
TIME_UP,TIME_DE,SBI_VERSION_IN,SBI_VERSION_UP,SBI_VERSION_DE,META_VERSION,ORGANIZATION)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_ENGINES'), 0, 'What-If Engine', 'What-If Engine', '/SpagoBIWhatIfEngine/restful-services/start', NULL, NULL, NULL, 'it.eng.spagobi.engines.drivers.whatif.WhatIfDriver', 'SpagoBIWhatIfEngine', (SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ENGINE_TYPE' AND VALUE_CD = 'EXT'), NULL, (SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'OLAP'), false, true, 'system', NULL, NULL, NOW(), NULL, NULL, '5.0', NULL, NULL, NULL, 'SPAGOBI');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ENGINES';
commit;
INSERT INTO SBI_ORGANIZATION_ENGINE (USER_IN, TIME_IN, SBI_VERSION_IN, ENGINE_ID, ORGANIZATION_ID, ORGANIZATION)
SELECT
'system' AS USER_IN,
SYSDATE() AS TIME_IN,
'5.0' AS SBI_VERSION_IN,
(SELECT engine_id from SBI_ENGINES where label = 'SpagoBIWhatIfEngine') AS ENGINE_ID,
o.id AS ORGANIZATION_ID, o.name AS ORGANIZATION from SBI_ORGANIZATIONS o;
COMMIT;

-- 20 / 05 /2014 Giulio Gavardi
ALTER TABLE SBI_ARTIFACTS
ADD COLUMN MODEL_LOCKED BOOLEAN NULL,
ADD COLUMN MODEL_LOCKER VARCHAR(100) NULL;

UPDATE SBI_ARTIFACTS SET MODEL_LOCKED = false WHERE MODEL_LOCKED IS NULL;s
COMMIT;

-- 25/06/2014

ALTER TABLE SBI_OBJECTS ADD COLUMN PARAMETERS_REGION VARCHAR(20) NULL DEFAULT 'east';

insert into SBI_CONFIG(ID,LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, USER_IN, TIME_IN, SBI_VERSION_IN, ORGANIZATION, CATEGORY) values
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),'SPAGOBI.DOCUMENTS.PARAMETERS_REGION_DEFAULT', 'Parameters Region Default', 'Where parameters form is shown (north or east) by default', '1', 'right', '30',
 'biadmin', '2014-06-24 15:06:24', '4.2', 'SPAGOBI', 'GENERIC_CONFIGURATION')

-- 09/07/2014 Davide: changed SpagoBIWekaEngine to SpagoBIDataMiningEngine
UPDATE SBI_ENGINES SET LABEL = 'SpagoBIDataMiningEngine', NAME = 'Data-Mining Engine', DESCR = 'Data-Mining Engine', MAIN_URL = '/SpagoBIDataMiningEngine/WekaServlet', DRIVER_NM = 'it.eng.spagobi.engines.drivers.datamining.DataMiningDriver' WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.weka.WekaDriver';
COMMIT;

-- 04/08/2014
ALTER TABLE SBI_OBJ_PAR ADD COLUMN COL_SPAN INTEGER NULL;
ALTER TABLE SBI_OBJ_PAR ADD COLUMN THICK_PERC INTEGER NULL;

-- 27/08/2014 Davide: added CREATE_SOCIAL_ANALYSIS authorization
INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, USER_IN, TIME_IN)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'CREATE_SOCIAL_ANALYSIS',
'server', current_timestamp) ;
commit;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

-- 29/08/2014 Davide: fixed Cockpit engine's URL
UPDATE SBI_ENGINES SET MAIN_URL = '/SpagoBICockpitEngine/api/1.0/pages/execute' WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.cockpit.CockpitDriver';
COMMIT;

-- 08/09/2014 Davide: https://spagobi.eng.it/jira/browse/SPAGOBI-1854
INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, CATEGORY, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),
'SPAGOBI.HOME.SHOW_LOGOUT_ON_SILENT_LOGIN', 'SPAGOBI.HOME.SHOW_LOGOUT_ON_SILENT_LOGIN', 'Show the logout button in case of silent login', true, 'true',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'NUM' AND DOMAIN_CD = 'PAR_TYPE'), 'GENERIC_CONFIGURATION', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit;

-- 10/09/2014 Marco: added HIERARCHIES_MANAGEMENT authorization
INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, USER_IN, TIME_IN)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'HIERARCHIES_MANAGEMENT',
'server', current_timestamp) ;
commit;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

--11/09/2014 Monica udate data mining engine
UPDATE SBI_ENGINES SET LABEL = 'SpagoBIDataMiningEngine', NAME = 'Data-Mining Engine', DESCR = 'Data-Mining Engine', MAIN_URL = '/SpagoBIDataMiningEngine/restful-services/start', DRIVER_NM = 'it.eng.spagobi.engines.drivers.datamining.DataMiningDriver', USE_DATASET=false, USE_DATASOURCE=false WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.weka.WekaDriver';
COMMIT;

--3/10/2014 Antonella change column name for mariadb & spago compatibility
ALTER TABLE SBI_OBJ_METADATA RENAME COLUMN DESCRIPTION TO DESCR;
-- 26/11/2014 Giorgio: Dataset Persistence, add only if you want to enable dataset persistence on user dataset wizard and to limit rows preview
INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, USER_IN, TIME_IN)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'ENABLE_DATASET_PERSISTENCE',
'server', current_timestamp) ;
commit;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;
INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, CATEGORY, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),
'SPAGOBI.DATASET.PREVIEW_ROWS', 'Number of rows to show for dataset preview', 'Number of rows to show for dataset preview', true, '1000',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'NUM' AND DOMAIN_CD = 'PAR_TYPE'), 'GENERIC_CONFIGURATION', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit;
INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, CATEGORY, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),
'SPAGOBI.DATASET.PERSIST.TABLE_PREFIX', 'Table name prefix for dataset persistence', 'Table name prefix for dataset persistence', true, 'D_',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'STRING' AND DOMAIN_CD = 'PAR_TYPE'), 'GENERIC_CONFIGURATION', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit;
-- 26/05/2015 Alessandro Portosa: added SBI_CACHE_ITEM and SBI_CACHE_JOINED_ITEM tables
CREATE TABLE SBI_CACHE_ITEM (
	   SIGNATURE			VARCHAR(100) NOT NULL,
	   NAME					VARCHAR(100) NULL,
	   TABLE_NAME 			VARCHAR(100) NOT NULL,
	   DIMENSION 			NUMERIC NULL,
	   CREATION_DATE 		DATE NULL,
	   LAST_USED_DATE 		DATE NULL,
       PROPERTIES			TEXT NULL,
	   USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       CONSTRAINT XAK1SBI_CACHE_ITEM UNIQUE(TABLE_NAME),
	   PRIMARY KEY (SIGNATURE)
);
commit;
CREATE TABLE SBI_CACHE_JOINED_ITEM (
	   ID 					INTEGER  NOT NULL,
	   SIGNATURE			VARCHAR(100) NOT NULL,
	   JOINED_SIGNATURE		VARCHAR(100) NOT NULL,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       CONSTRAINT XAK1SBI_CACHE_JOINED_ITEM UNIQUE(SIGNATURE, JOINED_SIGNATURE),
	   PRIMARY KEY (ID)
);
commit;
ALTER TABLE SBI_CACHE_JOINED_ITEM  ADD CONSTRAINT FK_SBI_CACHE_JOINED_ITEM_1 FOREIGN KEY ( SIGNATURE ) REFERENCES  SBI_CACHE_ITEM  ( SIGNATURE ) ON DELETE NO ACTION ON UPDATE CASCADE;
commit;
ALTER TABLE SBI_CACHE_JOINED_ITEM  ADD CONSTRAINT FK_SBI_CACHE_JOINED_ITEM_2 FOREIGN KEY ( JOINED_SIGNATURE ) REFERENCES  SBI_CACHE_ITEM  ( SIGNATURE ) ON DELETE CASCADE ON UPDATE CASCADE;
commit;

-- SpagoBI: 03/08/2015 Marco Cortella: added columns MODEL_LOCKED and MODEL_LOCKER to table sbi_meta_models
ALTER TABLE SBI_META_MODELS
	ADD COLUMN MODEL_LOCKED BOOLEAN NULL DEFAULT NULL AFTER DESCR,
	ADD COLUMN MODEL_LOCKER VARCHAR(100) NULL DEFAULT NULL AFTER MODEL_LOCKED;



-- SpagoBI: 09/10/2015 Giulio Gavardi:

	CREATE TABLE SBI_OBJ_DATA_SET (
    BIOBJ_DS_ID INTEGER NOT NULL,
    BIOBJ_ID INTEGER NOT NULL,
    DS_ID INTEGER NOT NULL,
    IS_DETAIL BOOLEAN DEFAULT FALSE,
    USER_IN VARCHAR(100) NOT NULL,
    USER_UP VARCHAR(100) DEFAULT NULL,
    USER_DE VARCHAR(100) DEFAULT NULL,
    TIME_IN TIMESTAMP,
    TIME_UP TIMESTAMP NULL DEFAULT NULL,
    TIME_DE TIMESTAMP NULL DEFAULT NULL,
    SBI_VERSION_IN VARCHAR(10) DEFAULT NULL,
    SBI_VERSION_UP VARCHAR(10) DEFAULT NULL,
    SBI_VERSION_DE VARCHAR(10) DEFAULT NULL,
    META_VERSION VARCHAR(100) DEFAULT NULL,
    ORGANIZATION VARCHAR(20) DEFAULT NULL,
  PRIMARY KEY (BIOBJ_DS_ID)
)WITHOUT OIDS;

    ALTER TABLE SBI_OBJ_DATA_SET ADD CONSTRAINT FK_SBI_OBJ_DATA_SET    FOREIGN KEY (BIOBJ_ID)       REFERENCES SBI_OBJECTS (BIOBJ_ID);


        insert into SBI_OBJ_DATA_SET(BIOBJ_DS_ID, BIOBJ_ID, DS_ID, IS_DETAIL, USER_IN, TIME_IN, ORGANIZATION)
    select
    row_number() rownum,
    BIOBJ_ID,  DATA_SET_ID, TRUE, 'server', current_timestamp,  ORGANIZATION
    from SBI_OBJECTS where DATA_SET_ID   is not null;
    commit;


    insert into SBI_AUTHORIZATIONS (ID, NAME, PRODUCT_TYPE_ID, USER_IN, TIME_IN)
    select
    (SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS')+ROWNUM
    , 'ENABLE_FEDERATED_DATASET'
    , PRODUCT_TYPE_ID
    , 'server'
    , current_timestamp
    from
    (select distinct row_number() ROWNUM, PRODUCT_TYPE_ID from SBI_PRODUCT_TYPE) pt;
    commit;

         update hibernate_sequences set NEXT_VAL = NEXT_VAL
        + (select count(distinct PRODUCT_TYPE_ID) from SBI_PRODUCT_TYPE)
    where SEQUENCE_NAME = 'SBI_AUTHORIZATIONS';
    commit;

    update hibernate_sequences set NEXT_VAL = NEXT_VAL
        + (select count(distinct BIOBJ_DS_ID)+1 from SBI_OBJ_DATA_SET)
where SEQUENCE_NAME = 'SBI_OBJ_DATA_SET';
commit;


      ALTER TABLE sbi_objects DROP COLUMN DATA_SET_ID;

--SpagoBI: 30.10.2015 Alessandro Portosa: ADDING UNIQUE CONSTRAINT IN TABLE SBI_OBJ_DATA_SET
CREATE TABLE SBI_OBJ_DATA_SET (
    BIOBJ_DS_ID INTEGER NOT NULL,
    BIOBJ_ID INTEGER NOT NULL,
    DS_ID INTEGER NOT NULL,
    IS_DETAIL BOOLEAN DEFAULT FALSE,
    USER_IN VARCHAR(100) NOT NULL,
    USER_UP VARCHAR(100) DEFAULT NULL,
    USER_DE VARCHAR(100) DEFAULT NULL,
    TIME_IN TIMESTAMP,
    TIME_UP TIMESTAMP NULL DEFAULT NULL,
    TIME_DE TIMESTAMP NULL DEFAULT NULL,
    SBI_VERSION_IN VARCHAR(10) DEFAULT NULL,
    SBI_VERSION_UP VARCHAR(10) DEFAULT NULL,
    SBI_VERSION_DE VARCHAR(10) DEFAULT NULL,
    META_VERSION VARCHAR(100) DEFAULT NULL,
    ORGANIZATION VARCHAR(20) DEFAULT NULL,
    CONSTRAINT XAK1SBI_OBJ_DATA_SET UNIQUE (BIOBJ_ID ,DS_ID, ORGANIZATION),
  PRIMARY KEY (BIOBJ_DS_ID)
)WITHOUT OIDS;

-- 05.02.2015 Alessandro Portosa: removed the table SBI_CACHE_JOINED_ITEM from all the DB scripts

-- 10.02.2015 Alessandro Portosa: changed the type of field NAME of SBI_CACHE_ITEM from all the DB scripts
	e.g. ALTER TABLE SBI_CACHE_ITEM ALTER COLUMN NAME TEXT NOT NULL

-- 23.02.2015 Francesco Lucchi PG_create.sql: 1) removed old columns from SBI_OBJECTS, SBI_DATA_SET, SBI_ORGANIZATION_DATASOURCE tables.
                                              2) added SBI_FEDERATION_DEFINITION, SBI_DATA_SET_FEDERATION tables.
                                              3) added constraints for SBI_DATA_SET_FEDERATION, SBI_DATA_SET, SBI_FEDERATION_DEFINITION tables.

-- 23.02.2015 Francesco Lucchi PG_drop.sql: added DROP statements for SBI_OBJ_DATA_SET CASCADE, SBI_FEDERATION_DEFINITION CASCADE, SBI_DATA_SET_FEDERATION CASCADE tables.

-- 23.02.2015 Francesco Lucchi Athena_pg_create.sql: added file.

-- 23.02.2015 Francesco Lucchi Athena_pg_drop.sql: added file.

-- 23.02.2015 Francesco Lucchi: removed SBI_DOSSIER_* tables.

-- 06.05.2016 Alessandro Portosa: Renamed HIBERNATE_SEQUENCES and its fields with lowercase. It must be lowercase for Unix compatibility

-- 09.05.2016 Giulio Gavardi
ALTER TABLE SBI_OBJECTS ADD COLUMN LOCKED_BY_USER VARCHAR(100) NULL;

-- 26.05.2016 Marco Cortella: [update script 1.0 to 1.1] fixed and added missing tables
-- META DATA
ALTER TABLE SBI_GL_TABLE RENAME TO SBI_META_TABLE;
ALTER TABLE SBI_META_TABLE RENAME LABEL TO NAME;
ALTER TABLE SBI_META_TABLE ADD SOURCE_ID INTEGER NOT NULL;
ALTER TABLE SBI_META_TABLE ADD DELETED BOOLEAN NOT NULL DEFAULT FALSE;

ALTER TABLE SBI_GL_BNESS_CLS RENAME TO SBI_META_BC;
ALTER TABLE SBI_META_BC RENAME UNIQUE_IDENTIFIER TO NAME;
-- next stmt add a relation to SBI_META_MODELS (delete the explicit name model field)
ALTER TABLE SBI_META_BC ADD MODEL_ID INTEGER NOT NULL;

-- set original values for the model referenced
UPDATE SBI_META_BC
SET MODEL_ID = SRC.ID
FROM (SELECT ID, NAME FROM SBI_META_MODELS) SRC
WHERE SRC.NAME = DATAMART_NAME;
ALTER TABLE SBI_META_BC DROP COLUMN DATAMART_NAME;

CREATE TABLE SBI_META_SOURCE (
	SOURCE_ID 				INTEGER NOT NULL,
	NAME 					VARCHAR(100) NOT NULL,
	TYPE 					VARCHAR(100) NOT NULL,
	URL 					VARCHAR(100) NULL,
	LOCATION 				VARCHAR(100) NULL,
	SOURCE_SCHEMA 			VARCHAR(100) NULL,
	SOURCE_CATALOGUE    	VARCHAR(100) NULL,
	ROLE                    VARCHAR(100) NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) DEFAULT NULL,
	USER_DE 				VARCHAR(100) DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL,
	TIME_UP 				TIMESTAMP DEFAULT NULL,
	TIME_DE 				TIMESTAMP DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) DEFAULT NULL,
	META_VERSION 			VARCHAR(100) DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) DEFAULT NULL,

	PRIMARY KEY (SOURCE_ID)
) WITHOUT OIDS;

CREATE TABLE SBI_META_TABLE_COLUMN  (
	COLUMN_ID 				INTEGER NOT NULL,
	TABLE_ID 				INTEGER NOT NULL,
	NAME 					VARCHAR(100) NOT NULL,
	TYPE					VARCHAR(100) NOT NULL,
	DELETED					BOOLEAN NOT NULL DEFAULT FALSE,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) DEFAULT NULL,
	USER_DE 				VARCHAR(100) DEFAULT NULL,
	TIME_IN 				TIMESTAMP,
	TIME_UP 				TIMESTAMP DEFAULT NULL,
	TIME_DE 				TIMESTAMP DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) DEFAULT NULL,
	META_VERSION 			VARCHAR(100) DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) DEFAULT NULL,

	PRIMARY KEY (COLUMN_ID)
) WITHOUT OIDS;

CREATE TABLE SBI_META_BC_ATTRIBUTE  (
	ATTRIBUTE_ID 			INTEGER NOT NULL,
	BC_ID					INTEGER NULL,
	COLUMN_ID				INTEGER NULL,
	NAME					VARCHAR(100) NOT NULL,
	TYPE					VARCHAR(100) NULL,
	DELETED					BOOLEAN NOT NULL DEFAULT FALSE,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) DEFAULT NULL,
	USER_DE 				VARCHAR(100) DEFAULT NULL,
	TIME_IN 				TIMESTAMP,
	TIME_UP 				TIMESTAMP DEFAULT NULL,
	TIME_DE 				TIMESTAMP DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) DEFAULT NULL,
	META_VERSION 			VARCHAR(100) DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) DEFAULT NULL,

	PRIMARY KEY (ATTRIBUTE_ID)
) WITHOUT OIDS;


CREATE TABLE SBI_META_TABLE_BC  (
	TABLE_ID 				INTEGER NOT NULL,
	BC_ID 					INTEGER NOT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) DEFAULT NULL,
	USER_DE 				VARCHAR(100) DEFAULT NULL,
	TIME_IN 				TIMESTAMP,
	TIME_UP 				TIMESTAMP DEFAULT NULL,
	TIME_DE 				TIMESTAMP DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) DEFAULT NULL,
	META_VERSION 			VARCHAR(100) DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) DEFAULT NULL,

	PRIMARY KEY (TABLE_ID, BC_ID)
) WITHOUT OIDS;


CREATE TABLE SBI_META_DS_BC  (
	DS_ID 					INTEGER NOT NULL,
	VERSION_NUM				INTEGER NOT NULL,
	BC_ID 					INTEGER NOT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) DEFAULT NULL,
	USER_DE 				VARCHAR(100) DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL,
	TIME_UP 				TIMESTAMP DEFAULT NULL,
	TIME_DE 				TIMESTAMP DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) DEFAULT NULL,
	META_VERSION 			VARCHAR(100) DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20)  NOT NULL,

	PRIMARY KEY (DS_ID,VERSION_NUM,ORGANIZATION,BC_ID)
) WITHOUT OIDS;



CREATE TABLE SBI_META_OBJ_DS  (
	DS_ID 					INTEGER NOT NULL,
	VERSION_NUM				INTEGER NOT NULL,
	OBJ_ID 					INTEGER NOT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) DEFAULT NULL,
	USER_DE 				VARCHAR(100) DEFAULT NULL,
	TIME_IN 				TIMESTAMP,
	TIME_UP 				TIMESTAMP DEFAULT NULL,
	TIME_DE 				TIMESTAMP DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) DEFAULT NULL,
	META_VERSION 			VARCHAR(100) DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NOT NULL,

	PRIMARY KEY (DS_ID,VERSION_NUM,ORGANIZATION,OBJ_ID)
) WITHOUT OIDS;


CREATE TABLE SBI_META_JOB  (
	JOB_ID 					INTEGER NOT NULL,
	NAME					VARCHAR(100) NOT NULL,
	DELETED					BOOLEAN NOT NULL DEFAULT FALSE,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) DEFAULT NULL,
	USER_DE 				VARCHAR(100) DEFAULT NULL,
	TIME_IN 				TIMESTAMP,
	TIME_UP 				TIMESTAMP DEFAULT NULL,
	TIME_DE 				TIMESTAMP DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) DEFAULT NULL,
	META_VERSION 			VARCHAR(100) DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) DEFAULT NULL,

	PRIMARY KEY (JOB_ID)
) WITHOUT OIDS;



CREATE TABLE SBI_META_JOB_SOURCE  (
	JOB_ID					INTEGER NOT NULL,
	SOURCE_ID				INTEGER NOT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) DEFAULT NULL,
	USER_DE 				VARCHAR(100) DEFAULT NULL,
	TIME_IN 				TIMESTAMP,
	TIME_UP 				TIMESTAMP DEFAULT NULL,
	TIME_DE 				TIMESTAMP DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) DEFAULT NULL,
	META_VERSION 			VARCHAR(100) DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) DEFAULT NULL,

	PRIMARY KEY (JOB_ID, SOURCE_ID)
) WITHOUT OIDS;


CREATE TABLE SBI_META_JOB_TABLE  (
	JOB_ID					INTEGER NOT NULL,
	TABLE_ID				INTEGER NOT NULL,
	ROLE					VARCHAR(100) NOT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) DEFAULT NULL,
	USER_DE 				VARCHAR(100) DEFAULT NULL,
	TIME_IN 				TIMESTAMP,
	TIME_UP 				TIMESTAMP DEFAULT NULL,
	TIME_DE 				TIMESTAMP DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) DEFAULT NULL,
	META_VERSION 			VARCHAR(100) DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) DEFAULT NULL,

	PRIMARY KEY (JOB_ID,TABLE_ID)
) WITHOUT OIDS;

CREATE TABLE SBI_META_DATASET_REL (
  DS_TABLE_REL_ID  INTEGER NOT NULL,
  DATASET_ID  INTEGER NOT NULL,
  TABLE_ID  INTEGER NOT NULL,
  USER_IN  VARCHAR(100) NOT NULL,
  USER_UP  VARCHAR(100) DEFAULT NULL,
  USER_DE  VARCHAR(100) DEFAULT NULL,
  TIME_IN  TIMESTAMP,
  TIME_UP  TIMESTAMP NULL DEFAULT NULL,
  TIME_DE  TIMESTAMP NULL DEFAULT NULL,
  SBI_VERSION_IN  VARCHAR(10) DEFAULT NULL,
  SBI_VERSION_UP  VARCHAR(10) DEFAULT NULL,
  SBI_VERSION_DE  VARCHAR(10) DEFAULT NULL,
  META_VERSION  VARCHAR(100) DEFAULT NULL,
  ORGANIZATION  VARCHAR(20) DEFAULT NULL,
 PRIMARY KEY ( DS_TABLE_REL_ID )
) WITHOUT OIDS;

CREATE TABLE SBI_META_DOCUMENT_REL (
  DOC_TABLE_REL_ID  INTEGER NOT NULL,
  DOCUMENT_ID  INTEGER NOT NULL,
  TABLE_ID INTEGER NOT NULL,
  USER_IN  VARCHAR(100) NOT NULL,
  USER_UP  VARCHAR(100) DEFAULT NULL,
  USER_DE  VARCHAR(100) DEFAULT NULL,
  TIME_IN  TIMESTAMP,
  TIME_UP  TIMESTAMP NULL DEFAULT NULL,
  TIME_DE  TIMESTAMP NULL DEFAULT NULL,
  SBI_VERSION_IN  VARCHAR(10) DEFAULT NULL,
  SBI_VERSION_UP  VARCHAR(10) DEFAULT NULL,
  SBI_VERSION_DE  VARCHAR(10) DEFAULT NULL,
  META_VERSION  VARCHAR(100) DEFAULT NULL,
  ORGANIZATION  VARCHAR(20) DEFAULT NULL,
 PRIMARY KEY ( DOC_TABLE_REL_ID )
) WITHOUT OIDS;

CREATE TABLE  SBI_EXT_ROLES_DS_CATEGORY (
  EXT_ROLE_ID INTEGER NOT NULL,
  CATEGORY_ID INTEGER NOT NULL,
  PRIMARY KEY (EXT_ROLE_ID, CATEGORY_ID)
) WITHOUT OIDS;


-- ALTER --
ALTER TABLE SBI_META_TABLE ADD CONSTRAINT FK_SBI_META_TABLE_1 FOREIGN KEY (SOURCE_ID) REFERENCES SBI_META_SOURCE (SOURCE_ID) ;
ALTER TABLE SBI_META_TABLE_COLUMN ADD CONSTRAINT FK_SBI_META_COLUMN_1 FOREIGN KEY (TABLE_ID) REFERENCES SBI_META_TABLE (TABLE_ID) ;
ALTER TABLE SBI_META_BC ADD CONSTRAINT FK_SBI_META_BC_1 FOREIGN KEY (MODEL_ID) REFERENCES SBI_META_MODELS(ID) ;
ALTER TABLE SBI_META_BC_ATTRIBUTE ADD CONSTRAINT FK_SBI_META_BC_ATTRIBUTE_1 FOREIGN KEY (BC_ID) REFERENCES SBI_META_BC(BC_ID) ;
ALTER TABLE SBI_META_BC_ATTRIBUTE ADD CONSTRAINT FK_SBI_META_BC_ATTRIBUTE_2 FOREIGN KEY (COLUMN_ID) REFERENCES SBI_META_TABLE_COLUMN(COLUMN_ID) ;
ALTER TABLE SBI_META_DS_BC ADD CONSTRAINT FK_SBI_META_DS_BC_1 FOREIGN KEY (DS_ID,VERSION_NUM,ORGANIZATION) REFERENCES SBI_DATA_SET(DS_ID,VERSION_NUM,ORGANIZATION);
ALTER TABLE SBI_META_DS_BC ADD CONSTRAINT FK_SBI_META_DS_BC_2 FOREIGN KEY (BC_ID) REFERENCES SBI_META_BC(BC_ID) ;
ALTER TABLE SBI_META_TABLE_BC ADD CONSTRAINT FK_SBI_META_TABLE_BC_1 FOREIGN KEY (TABLE_ID) REFERENCES SBI_META_TABLE(TABLE_ID) ;
ALTER TABLE SBI_META_TABLE_BC ADD CONSTRAINT FK_SBI_META_TABLE_BC_2 FOREIGN KEY (BC_ID) REFERENCES SBI_META_BC(BC_ID) ;
ALTER TABLE SBI_META_OBJ_DS ADD CONSTRAINT FK_SBI_META_OBJ_DS_1 FOREIGN KEY (DS_ID,VERSION_NUM,ORGANIZATION) REFERENCES SBI_DATA_SET(DS_ID,VERSION_NUM,ORGANIZATION);
ALTER TABLE SBI_META_OBJ_DS ADD CONSTRAINT FK_SBI_META_OBJ_DS_2 FOREIGN KEY (OBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID) ;
ALTER TABLE SBI_META_JOB_SOURCE ADD CONSTRAINT FK_SBI_META_JOB_SOURCE_1 FOREIGN KEY (JOB_ID) REFERENCES SBI_META_JOB(JOB_ID) ;
ALTER TABLE SBI_META_JOB_SOURCE ADD CONSTRAINT FK_SBI_META_JOB_SOURCE_2 FOREIGN KEY (SOURCE_ID) REFERENCES SBI_META_SOURCE(SOURCE_ID) ;
ALTER TABLE SBI_META_JOB_TABLE ADD CONSTRAINT FK_SBI_META_JOB_TABLE_1 FOREIGN KEY (JOB_ID) REFERENCES SBI_META_JOB(JOB_ID) ;
ALTER TABLE SBI_META_JOB_TABLE ADD CONSTRAINT FK_SBI_META_JOB_TABLE_2 FOREIGN KEY (TABLE_ID) REFERENCES SBI_META_TABLE(TABLE_ID) ;

DROP TABLE IF EXISTS SBI_KPI_COMMENTS CASCADE ;
DROP TABLE IF EXISTS SBI_ALARM_DISTRIBUTION CASCADE ;
DROP TABLE IF EXISTS SBI_ALARM_CONTACT CASCADE ;
DROP TABLE IF EXISTS SBI_ALARM_EVENT CASCADE ;
DROP TABLE IF EXISTS SBI_ALARM CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_MODEL_RESOURCES CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_ERROR CASCADE;
DROP TABLE IF EXISTS SBI_ORG_UNIT_GRANT_NODES CASCADE;
DROP TABLE IF EXISTS SBI_ORG_UNIT_NODES CASCADE;
DROP TABLE IF EXISTS SBI_ORG_UNIT CASCADE;
DROP TABLE IF EXISTS SBI_GOAL_KPI CASCADE ;
DROP TABLE IF EXISTS SBI_GOAL_HIERARCHY CASCADE ;
DROP TABLE IF EXISTS SBI_GOAL CASCADE ;
DROP TABLE IF EXISTS SBI_ORG_UNIT_GRANT CASCADE;
DROP TABLE IF EXISTS SBI_KPI_MODEL_INST CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_INST_PERIOD CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_INSTANCE_HISTORY CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_PERIODICITY CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_VALUE CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_MODEL CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_INSTANCE CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_DOCUMENTS CASCADE;
DROP TABLE IF EXISTS SBI_KPI_ROLE CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_REL CASCADE ;
DROP TABLE IF EXISTS SBI_KPI CASCADE ;
DROP TABLE IF EXISTS SBI_MEASURE_UNIT CASCADE ;
DROP TABLE IF EXISTS SBI_THRESHOLD_VALUE CASCADE ;
DROP TABLE IF EXISTS SBI_THRESHOLD CASCADE ;
DROP TABLE IF EXISTS SBI_RESOURCES CASCADE ;
DROP TABLE IF EXISTS SBI_ORG_UNIT_HIERARCHIES CASCADE;

CREATE TABLE SBI_KPI_ALIAS (
	ID 						INTEGER NOT NULL,
	NAME 					VARCHAR(40) NOT NULL,

	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (ID)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_RULE (
	ID 						INTEGER NOT NULL,
	VERSION					INTEGER NOT NULL,
	NAME 					VARCHAR(40) NOT NULL,
	DEFINITION 				VARCHAR(4000) NOT NULL,
	DATASOURCE_ID 			INTEGER NOT NULL,
	ACTIVE                  VARCHAR(1) DEFAULT NULL,

	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (ID,VERSION)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_KPI (
	ID 						INTEGER NOT NULL,
	VERSION					INTEGER NOT NULL,
	NAME 					VARCHAR(40) NOT NULL,
	DEFINITION 				VARCHAR(1024) NOT NULL,
	CARDINALITY 			VARCHAR(4000) NOT NULL,
	PLACEHOLDER 			VARCHAR(1024) NULL,
	CATEGORY_ID 			INTEGER NULL,
	THRESHOLD_ID 			INTEGER NOT NULL,
	ACTIVE                  VARCHAR(1) DEFAULT NULL,

	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (ID,VERSION)
) WITHOUT OIDS;


CREATE TABLE SBI_KPI_PLACEHOLDER (
	ID 						INTEGER NOT NULL,
	NAME 					VARCHAR(40) NOT NULL,

	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (ID)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_THRESHOLD (
	ID 						INTEGER NOT NULL,
	NAME 					VARCHAR(40) DEFAULT NULL,
	DESCRIPTION 			VARCHAR(1024),
	TYPE_ID 				INTEGER DEFAULT NULL,

	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (ID)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_THRESHOLD_VALUE (
	ID 						INTEGER NOT NULL,
	THRESHOLD_ID 			INTEGER NOT NULL,
	POSITION 				INTEGER DEFAULT NULL,
	LABEL 					VARCHAR(40) DEFAULT NULL,
	MIN_VALUE 				DECIMAL(22,0) DEFAULT NULL,
	INCLUDE_MIN 			VARCHAR(1) DEFAULT NULL,
	MAX_VALUE 				DECIMAL(22,0) DEFAULT NULL,
	INCLUDE_MAX 			VARCHAR(1) DEFAULT NULL,
	COLOR 					VARCHAR(20) DEFAULT NULL,
	SEVERITY_ID 			INTEGER DEFAULT NULL,

	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (ID)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_RULE_OUTPUT (
	ID 						INTEGER NOT NULL,
	RULE_ID 				INTEGER NOT NULL,
	RULE_VERSION			INTEGER NOT NULL,
	TYPE_ID 				INTEGER NOT NULL,
	ALIAS_ID 				INTEGER NOT NULL,
	CATEGORY_ID 			INTEGER NULL,
	HIERARCHY_ID 			INTEGER NULL,

	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (ID)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_KPI_RULE_OUTPUT (
  KPI_ID 					INTEGER NOT NULL,
  KPI_VERSION 				INTEGER NOT NULL,
  RULE_OUTPUT_ID 			INTEGER NOT NULL,
  PRIMARY KEY (KPI_ID,KPI_VERSION,RULE_OUTPUT_ID)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_RULE_PLACEHOLDER (
	RULE_ID 				INTEGER NOT NULL,
	RULE_VERSION			INTEGER NOT NULL,
	PLACEHOLDER_ID 			INTEGER NOT NULL,

	PRIMARY KEY (RULE_ID,RULE_VERSION,PLACEHOLDER_ID)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_TARGET (
	TARGET_ID				INTEGER NOT NULL,
	NAME 					VARCHAR(40),
	CATEGORY_ID 			INTEGER NULL,
	START_VALIDITY_DAY		TIMESTAMP NULL DEFAULT NULL,
	END_VALIDITY_DAY		TIMESTAMP NULL DEFAULT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (TARGET_ID)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_TARGET_VALUE (
	TARGET_ID			INTEGER NOT NULL,
	KPI_ID 				INTEGER NOT NULL,
	KPI_VERSION			INTEGER NOT NULL,
	TARGET_VALUE		DOUBLE PRECISION,
	USER_IN 			VARCHAR(100) NOT NULL,
	USER_UP 			VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 			VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 			TIMESTAMP NOT NULL,
	TIME_UP 			TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 			TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 		VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 		VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 		VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 		VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 		VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (TARGET_ID,KPI_ID,KPI_VERSION)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_EXECUTION_KPI (
    KPI_ID                 	INTEGER NOT NULL,
    KPI_VERSION            	INTEGER NOT NULL,
    EXECUTION_ID        	INTEGER NOT NULL,

    PRIMARY KEY (KPI_ID, KPI_VERSION, EXECUTION_ID)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_SCORECARD_KPI (
    KPI_ID                 INTEGER NOT NULL,
    KPI_VERSION            INTEGER NOT NULL,
    SCORECARD_ID         INTEGER NOT NULL,

    PRIMARY KEY (KPI_ID, KPI_VERSION, SCORECARD_ID)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_EXECUTION_FILTER (
  	PLACEHOLDER_ID 		INTEGER NOT NULL,
  	EXECUTION_ID 		INTEGER NOT NULL,
  	KPI_ID 				INTEGER NOT NULL,
  	KPI_VERSION 		INTEGER NOT NULL,
  	TYPE_ID 			INTEGER DEFAULT NULL,
  	VALUE 				VARCHAR(40) DEFAULT NULL,

	USER_IN 			VARCHAR(100) NOT NULL,
	USER_UP 			VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 			VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 			TIMESTAMP NOT NULL,
	TIME_UP 			TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 			TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 		VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 		VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 		VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 		VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 		VARCHAR(20) NULL DEFAULT NULL,

  	PRIMARY KEY (PLACEHOLDER_ID,EXECUTION_ID,KPI_ID,KPI_VERSION)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_EXECUTION (
  	ID 					INTEGER NOT NULL,
  	NAME				VARCHAR(40) NOT NULL,
	START_DATE 			TIMESTAMP NULL DEFAULT NULL,
  	END_DATE 			TIMESTAMP NULL DEFAULT NULL,
  	DELTA 				VARCHAR(1) DEFAULT NULL,
	USER_IN 			VARCHAR(100) NOT NULL,
	USER_UP 			VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 			VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 			TIMESTAMP NOT NULL ,
	TIME_UP 			TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 			TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 		VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 		VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 		VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 		VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 		VARCHAR(20) NULL DEFAULT NULL,

  	PRIMARY KEY (ID)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_SCORECARD (
  	ID 					INTEGER NOT NULL,
  	PARENT_ID 			INTEGER DEFAULT NULL,
  	NAME 				VARCHAR(40) NOT NULL,
  	CRITERION_ID 		INTEGER DEFAULT NULL,
  	OPTIONS 			VARCHAR(1000) DEFAULT NULL,

	USER_IN 			VARCHAR(100) NOT NULL,
	USER_UP 			VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 			VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 			TIMESTAMP NOT NULL,
	TIME_UP 			TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 			TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 		VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 		VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 		VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 		VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 		VARCHAR(20) NULL DEFAULT NULL,

  	PRIMARY KEY (ID)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_VALUE (
  	ID 					INTEGER NOT NULL,
  	KPI_ID 				INTEGER NOT NULL,
  	KPI_VERSION 		INTEGER NOT NULL,
  	LOGICAL_KEY 		VARCHAR(4096),
  	TIME_RUN 			TIMESTAMP NOT NULL,
  	COMPUTED_VALUE 		DOUBLE PRECISION NOT NULL,
  	MANUAL_VALUE 		DOUBLE PRECISION,
    MANUAL_NOTE			VARCHAR(1000) NULL,
  	THE_DAY 			VARCHAR(3) NOT NULL,
  	THE_WEEK 			VARCHAR(3) NOT NULL,
  	THE_MONTH 			VARCHAR(3) NOT NULL,
  	THE_QUARTER 		VARCHAR(3) NOT NULL,
  	THE_YEAR 			VARCHAR(4) NOT NULL,
    STATE				VARCHAR(1) NOT NULL DEFAULT '0',

    PRIMARY KEY (ID)
) WITHOUT OIDS;

CREATE TABLE SBI_KPI_VALUE_EXEC_LOG (
	ID					INTEGER NOT NULL,
	SCHEDULER_ID		INTEGER NOT NULL,
	TIME_RUN			TIMESTAMP NOT NULL,
	OUTPUT				BYTEA NULL NULL,
	ERROR_COUNT			INTEGER NOT NULL,
	SUCCESS_COUNT		INTEGER NOT NULL,
	TOTAL_COUNT			INTEGER NOT NULL,

	PRIMARY KEY (ID)
) WITHOUT OIDS;


CREATE TABLE SBI_ALERT_ACTION (
	ID 					INTEGER NOT NULL,
    NAME 				VARCHAR(40) NOT NULL,
    CLASS_NAME 			VARCHAR(200) NOT NULL,
    TEMPLATE			VARCHAR(200) NOT NULL,
	USER_IN 			VARCHAR(100) NOT NULL,
	USER_UP 			VARCHAR(100),
	USER_DE 			VARCHAR(100),
	TIME_IN 			TIMESTAMP NOT NULL,
	TIME_UP 			TIMESTAMP,
	TIME_DE 			TIMESTAMP,
	SBI_VERSION_IN 		VARCHAR(10),
	SBI_VERSION_UP 		VARCHAR(10),
	SBI_VERSION_DE 		VARCHAR(10),
	META_VERSION 		VARCHAR(100),
	ORGANIZATION 		VARCHAR(20),
	PRIMARY KEY(ID)
) WITHOUT OIDS;

CREATE TABLE SBI_ALERT_LISTENER (
	ID 					INTEGER NOT NULL,
    NAME 				VARCHAR(40) NOT NULL,
    CLASS_NAME 			VARCHAR(200) NOT NULL,
    TEMPLATE			VARCHAR(200) NOT NULL,
	USER_IN 			VARCHAR(100) NOT NULL,
	USER_UP 			VARCHAR(100),
	USER_DE 			VARCHAR(100),
	TIME_IN 			TIMESTAMP NOT NULL,
	TIME_UP 			TIMESTAMP,
	TIME_DE 			TIMESTAMP,
	SBI_VERSION_IN 		VARCHAR(10),
	SBI_VERSION_UP 		VARCHAR(10),
	SBI_VERSION_DE 		VARCHAR(10),
	META_VERSION 		VARCHAR(100),
	ORGANIZATION 		VARCHAR(20),
	PRIMARY KEY(ID)
) WITHOUT OIDS;

CREATE TABLE SBI_ALERT (
	ID 					INTEGER NOT NULL,
	NAME 				VARCHAR(40) NOT NULL,
	LISTENER_ID			INTEGER NOT NULL,
	LISTENER_OPTIONS    VARCHAR(4000),
	USER_IN 			VARCHAR(100) NOT NULL,
	USER_UP 			VARCHAR(100),
	USER_DE 			VARCHAR(100),
	TIME_IN 			TIMESTAMP NOT NULL,
	TIME_UP 			TIMESTAMP,
	TIME_DE 			TIMESTAMP,
	SBI_VERSION_IN 		VARCHAR(10),
	SBI_VERSION_UP 		VARCHAR(10),
	SBI_VERSION_DE 		VARCHAR(10),
	META_VERSION 		VARCHAR(100),
	ORGANIZATION 		VARCHAR(20),
	PRIMARY KEY(ID)
) WITHOUT OIDS;

CREATE TABLE SBI_ALERT_LOG (
	ID					INTEGER NOT NULL,
    LISTENER_ID		 	INTEGER NOT NULL,
    ACTION_ID			INTEGER,
    LISTENER_PARAMS		VARCHAR(4000),
    ACTION_PARAMS		VARCHAR(4000),
    DETAIL				VARCHAR(4000),
    USER_IN 			VARCHAR(100) NOT NULL,
	USER_UP 			VARCHAR(100),
	USER_DE 			VARCHAR(100),
	TIME_IN 			TIMESTAMP NOT NULL,
	TIME_UP 			TIMESTAMP,
	TIME_DE 			TIMESTAMP,
	SBI_VERSION_IN 		VARCHAR(10),
	SBI_VERSION_UP 		VARCHAR(10),
	SBI_VERSION_DE 		VARCHAR(10),
	META_VERSION 		VARCHAR(100),
	ORGANIZATION 		VARCHAR(20),
    PRIMARY KEY(ID)
) WITHOUT OIDS;

ALTER TABLE SBI_KPI_EXECUTION_FILTER 		ADD CONSTRAINT FK_01_SBI_KPI_EXECUTION_FILTER 		FOREIGN KEY (EXECUTION_ID) 			REFERENCES SBI_KPI_EXECUTION (ID);
ALTER TABLE SBI_KPI_EXECUTION_FILTER 		ADD CONSTRAINT FK_02_SBI_KPI_EXECUTION_FILTER 		FOREIGN KEY (TYPE_ID) 			    REFERENCES SBI_DOMAINS (VALUE_ID);
ALTER TABLE SBI_KPI_EXECUTION_FILTER 		ADD CONSTRAINT FK_03_SBI_KPI_EXECUTION_FILTER 		FOREIGN KEY (PLACEHOLDER_ID)   	    REFERENCES SBI_KPI_PLACEHOLDER (ID);
ALTER TABLE SBI_KPI_SCORECARD 				ADD CONSTRAINT FK_02_SBI_KPI_SCORECARD 				FOREIGN KEY (CRITERION_ID) 			REFERENCES SBI_DOMAINS (VALUE_ID);
ALTER TABLE SBI_KPI_KPI 					ADD CONSTRAINT FK_01_SBI_KPI_KPI 					FOREIGN KEY (CATEGORY_ID) 			REFERENCES SBI_DOMAINS (VALUE_ID);
ALTER TABLE SBI_KPI_RULE					ADD CONSTRAINT FK_01_SBI_KPI_RULE					FOREIGN KEY (DATASOURCE_ID)			REFERENCES SBI_DATA_SOURCE (DS_ID);
ALTER TABLE SBI_KPI_THRESHOLD 				ADD CONSTRAINT FK_01_SBI_KPI_THRESHOLD 				FOREIGN KEY (TYPE_ID) 				REFERENCES SBI_DOMAINS (VALUE_ID);
ALTER TABLE SBI_KPI_THRESHOLD_VALUE 		ADD CONSTRAINT FK_01_SBI_KPI_THRESHOLD_VALUE 		FOREIGN KEY (SEVERITY_ID) 			REFERENCES SBI_DOMAINS (VALUE_ID);
ALTER TABLE SBI_KPI_THRESHOLD_VALUE			ADD CONSTRAINT FK_02_SBI_KPI_THRESHOLD_VALUE		FOREIGN KEY (THRESHOLD_ID)			REFERENCES SBI_KPI_THRESHOLD (ID);
ALTER TABLE SBI_KPI_RULE_OUTPUT 			ADD CONSTRAINT FK_01_SBI_KPI_RULE_OUTPUT 			FOREIGN KEY (TYPE_ID) 				REFERENCES SBI_DOMAINS (VALUE_ID);
ALTER TABLE SBI_KPI_RULE_OUTPUT 			ADD CONSTRAINT FK_02_SBI_KPI_RULE_OUTPUT 			FOREIGN KEY (RULE_ID,RULE_VERSION) 	REFERENCES SBI_KPI_RULE (ID,VERSION);
ALTER TABLE SBI_KPI_RULE_OUTPUT 			ADD CONSTRAINT FK_03_SBI_KPI_RULE_OUTPUT 			FOREIGN KEY (ALIAS_ID) 				REFERENCES SBI_KPI_ALIAS (ID);
ALTER TABLE SBI_KPI_RULE_OUTPUT 			ADD CONSTRAINT FK_04_SBI_KPI_RULE_OUTPUT 			FOREIGN KEY (CATEGORY_ID) 			REFERENCES SBI_DOMAINS (VALUE_ID);
ALTER TABLE SBI_KPI_RULE_PLACEHOLDER 		ADD CONSTRAINT FK_01_SBI_KPI_RULE_PLACEHOLDER 		FOREIGN KEY (RULE_ID,RULE_VERSION) 	REFERENCES SBI_KPI_RULE (ID,VERSION);
ALTER TABLE SBI_KPI_RULE_PLACEHOLDER 		ADD CONSTRAINT FK_02_SBI_KPI_RULE_PLACEHOLDER 		FOREIGN KEY (PLACEHOLDER_ID) 		REFERENCES SBI_KPI_PLACEHOLDER (ID);
ALTER TABLE SBI_KPI_KPI_RULE_OUTPUT         ADD CONSTRAINT FK_01_SBI_KPI_KPI_RULE_OUTPUT    	FOREIGN KEY (KPI_ID,KPI_VERSION)    REFERENCES SBI_KPI_KPI (ID,VERSION);
ALTER TABLE SBI_KPI_KPI_RULE_OUTPUT         ADD CONSTRAINT FK_02_SBI_KPI_KPI_RULE_OUTPUT    	FOREIGN KEY (RULE_OUTPUT_ID)        REFERENCES SBI_KPI_RULE_OUTPUT (ID);
ALTER TABLE SBI_KPI_TARGET_VALUE 			ADD CONSTRAINT FK_01_SBI_KPI_TARGET_VALUE 			FOREIGN KEY (TARGET_ID) 			REFERENCES SBI_KPI_TARGET (TARGET_ID);
ALTER TABLE SBI_KPI_TARGET_VALUE 			ADD CONSTRAINT FK_02_SBI_KPI_TARGET_VALUE 			FOREIGN KEY (KPI_ID,KPI_VERSION) 	REFERENCES SBI_KPI_KPI (ID,VERSION);
ALTER TABLE SBI_KPI_TARGET					ADD CONSTRAINT FK_03_SBI_KPI_TARGET 				FOREIGN KEY (CATEGORY_ID) 			REFERENCES SBI_DOMAINS (VALUE_ID);

ALTER TABLE SBI_EXT_ROLES_DS_CATEGORY 		ADD CONSTRAINT FK_SB_EXT_ROLES_DATA_SET_CATEGORY_1 	FOREIGN KEY (EXT_ROLE_ID) 			REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID);
ALTER TABLE SBI_EXT_ROLES_DS_CATEGORY 		ADD CONSTRAINT FK_SB_EXT_ROLES_DATA_SET_CATEGORY_2 	FOREIGN KEY (CATEGORY_ID) 			REFERENCES SBI_DOMAINS (VALUE_ID);
ALTER TABLE SBI_ALERT 						ADD CONSTRAINT FK_01_SBI_ALERT 						FOREIGN KEY (LISTENER_ID) 			REFERENCES SBI_ALERT_LISTENER(ID);
ALTER TABLE SBI_ALERT_LOG 					ADD CONSTRAINT FK_01_SBI_ALERT_LOG 					FOREIGN KEY (LISTENER_ID) 			REFERENCES SBI_ALERT_LISTENER(ID);
ALTER TABLE SBI_ALERT_LOG 					ADD CONSTRAINT FK_02_SBI_ALERT_LOG 					FOREIGN KEY (ACTION_ID) 			REFERENCES SBI_ALERT_ACTION(ID);



ALTER TABLE  SBI_META_BC ADD UNIQUE_NAME VARCHAR(100) NULL;

update SBI_ENGINES set MAIN_URL = '/knowagewhatifengine/restful-services/startwhatif' where LABEL = 'knowagewhatifengine';

INSERT INTO SBI_ENGINES
(ENGINE_ID,ENCRYPT,NAME,DESCR,MAIN_URL,SECN_URL,OBJ_UPL_DIR,OBJ_USE_DIR,DRIVER_NM,LABEL,ENGINE_TYPE,
CLASS_NM,BIOBJ_TYPE,USE_DATASET,USE_DATASOURCE,USER_IN,USER_UP,USER_DE,TIME_IN,
TIME_UP,TIME_DE,SBI_VERSION_IN,SBI_VERSION_UP,SBI_VERSION_DE,META_VERSION,ORGANIZATION)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_ENGINES'), 0, 'OLAP Engine',
'OLAP Engine', '/knowagewhatifengine/restful-services/startolap', NULL, NULL, NULL,
 'it.eng.spagobi.engines.drivers.whatif.OlapDriver', 'knowageolapengine',
 (SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ENGINE_TYPE' AND VALUE_CD = 'EXT'), NULL,
 (SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'OLAP'),
 false, true, 'system', NULL, NULL, current_date, NULL, NULL, '1.0', NULL, NULL, NULL, NULL);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ENGINES';

INSERT INTO SBI_PRODUCT_TYPE_ENGINE (PRODUCT_TYPE_ID, ENGINE_ID, USER_IN, USER_UP, USER_DE, TIME_IN, TIME_UP, TIME_DE, SBI_VERSION_IN, SBI_VERSION_UP, SBI_VERSION_DE, META_VERSION, ORGANIZATION)
VALUES ( (SELECT PRODUCT_TYPE_ID FROM SBI_PRODUCT_TYPE WHERE LABEL = 'KnowageSI'), (SELECT ENGINE_ID FROM SBI_ENGINES WHERE LABEL = 'knowageolapengine'), 'system', null, null, NOW(), null, null, 1.0, null, null, null, null );

CREATE TABLE SBI_CATALOG_FUNCTION (
  FUNCTION_ID INTEGER NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  LANGUAGE VARCHAR(100) NOT NULL,
  SCRIPT TEXT NOT NULL,
  USER_IN 				VARCHAR(100) NOT NULL,
  USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
  USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
  TIME_IN 				TIMESTAMP NOT NULL ,
  TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
  TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
  SBI_VERSION_IN 		VARCHAR(10) NULL DEFAULT NULL,
  SBI_VERSION_UP 		VARCHAR(10) NULL DEFAULT NULL,
  SBI_VERSION_DE 		VARCHAR(10) NULL DEFAULT NULL,
  ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,
  PRIMARY KEY (FUNCTION_ID)
  ) WITHOUT OIDS;


CREATE TABLE SBI_FUNCTION_INPUT_VARIABLE (
  FUNCTION_ID INTEGER NOT NULL,
  VAR_NAME VARCHAR(100) NOT NULL,
  VAR_VALUE VARCHAR(100) NOT NULL,
  USER_IN 				VARCHAR(100) NOT NULL,
  USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
  USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
  TIME_IN 				TIMESTAMP NOT NULL,
  TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
  TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
  SBI_VERSION_IN 		VARCHAR(10) NULL DEFAULT NULL,
  SBI_VERSION_UP 		VARCHAR(10) NULL DEFAULT NULL,
  SBI_VERSION_DE 		VARCHAR(10) NULL DEFAULT NULL,
  ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,
  PRIMARY KEY (FUNCTION_ID,VAR_NAME)
  ) WITHOUT OIDS;

CREATE TABLE SBI_FUNCTION_INPUT_DATASET (
  FUNCTION_ID INTEGER NOT NULL,
  DS_ID INTEGER NOT NULL,
  USER_IN 				VARCHAR(100) NOT NULL,
  USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
  USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
  TIME_IN 				TIMESTAMP NOT NULL,
  TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
  TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
  SBI_VERSION_IN 		VARCHAR(10) NULL DEFAULT NULL,
  SBI_VERSION_UP 		VARCHAR(10) NULL DEFAULT NULL,
  SBI_VERSION_DE 		VARCHAR(10) NULL DEFAULT NULL,
  ORGANIZATION 			VARCHAR(20) NULL DEFAULT  NULL,
  PRIMARY KEY (FUNCTION_ID, DS_ID)
  ) WITHOUT OIDS;



CREATE TABLE SBI_FUNCTION_OUTPUT (
 FUNCTION_ID INTEGER NOT NULL,
 LABEL VARCHAR(100) NOT NULL,
 OUT_TYPE INTEGER NOT NULL,
 USER_IN 				VARCHAR(100) NOT NULL,
 USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
 USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
 TIME_IN 				TIMESTAMP NOT NULL,
 TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
 TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
 SBI_VERSION_IN 		VARCHAR(10) NULL DEFAULT NULL,
 SBI_VERSION_UP 		VARCHAR(10) NULL DEFAULT NULL,
 SBI_VERSION_DE 		VARCHAR(10) NULL DEFAULT NULL,
 ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,
 PRIMARY KEY (FUNCTION_ID,LABEL)
 )  WITHOUT OIDS;

ALTER TABLE SBI_FUNCTION_OUTPUT 			ADD CONSTRAINT FK_SBI_FUNCTION_OUTPUT_1 			FOREIGN KEY ( OUT_TYPE ) 			REFERENCES SBI_DOMAINS ( VALUE_ID ) 		 ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_FUNCTION_OUTPUT 			ADD CONSTRAINT FK_SBI_FUNCTION_OUTPUT_2 			FOREIGN KEY ( FUNCTION_ID ) 		REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_FUNCTION_INPUT_DATASET 		ADD CONSTRAINT FK_FUNCTION_INPUT_DATASETS_2  		FOREIGN KEY (FUNCTION_ID) 			REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE 	ADD CONSTRAINT FK_FUNCTION_INPUT_VARIABLES_1  		FOREIGN KEY (FUNCTION_ID) 			REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;

INSERT INTO SBI_EXT_ROLES_CATEGORY SELECT * FROM SBI_EXT_ROLES_DS_CATEGORY;
DROP TABLE SBI_EXT_ROLES_DS_CATEGORY;

ALTER TABLE SBI_GL_TABLE_WLIST DROP CONSTRAINT FK_TABLE_ID;

ALTER TABLE SBI_GL_TABLE_WLIST
ADD CONSTRAINT TABLE_ID
  FOREIGN KEY (TABLE_ID)
  REFERENCES  SBI_META_TABLE (TABLE_ID)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;


ALTER TABLE SBI_GL_BNESS_CLS_WLIST  DROP CONSTRAINT FK_BC_ID;

ALTER TABLE SBI_GL_BNESS_CLS_WLIST
ADD CONSTRAINT BCID
  FOREIGN KEY (BC_ID)
  REFERENCES SBI_META_BC (BC_ID)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

DROP TABLE IF EXISTS SBI_GL_TABLE;
DROP TABLE IF EXISTS  SBI_GL_BNESS_CLS;

ALTER TABLE SBI_GL_TABLE_WLIST ADD COLUMN COLUMN_NAME VARCHAR(100) NOT NULL ;

ALTER TABLE SBI_GL_TABLE_WLIST DROP CONSTRAINT sbi_gl_table_wlist_pkey, ADD PRIMARY KEY (TABLE_ID, WORD_ID, COLUMN_NAME);


ALTER TABLE  SBI_GL_BNESS_CLS_WLIST
ALTER COLUMN_NAME  SET NOT NULL, DROP CONSTRAINT SBI_GL_BNESS_CLS_WLIST_pkey,
ADD PRIMARY KEY (BC_ID, WORD_ID, COLUMN_NAME);

-- 27.05.2016 Salvatore Lupo
ALTER TABLE SBI_ALERT ADD COLUMN SINGLE_EXECUTION VARCHAR(1),
ADD COLUMN EVENT_BEFORE_TRIGGER_ACTION INTEGER;

-- 09.06.2016 Vincenzo Gambino
ALTER TABLE SBI_PARUSE ADD COLUMN OPTIONS VARCHAR(4000) NULL DEFAULT NULL

-- 10.06.2016 Antonella Giachino: add hierarchy_name, level and member_name in SBI_GEO_MAP
ALTER TABLE  SBI_GEO_MAPS ADD HIERARCHY_NAME VARCHAR(100);
ALTER TABLE  SBI_GEO_MAPS ADD LEVEL INTEGER;
ALTER TABLE  SBI_GEO_MAPS ADD MEMBER_NAME VARCHAR(100);

ALTER TABLE SBI_USER_FUNC DISABLE TRIGGER ALL;
delete from SBI_USER_FUNC  where name = 'CreateWorksheetFromDatasetUserFunctionality';
ALTER TABLE SBI_USER_FUNC ENABLE TRIGGER ALL;

ALTER TABLE SBI_OBJECTS DISABLE TRIGGER ALL;
DELETE FROM SBI_OBJECTS WHERE ENGINE_ID = (select engine_id from SBI_ENGINES  where name = 'Worksheet Engine');
ALTER TABLE SBI_OBJECTS ENABLE TRIGGER ALL;

ALTER TABLE SBI_ENGINES DISABLE TRIGGER ALL;
delete from SBI_ENGINES  where name = 'Worksheet Engine';
ALTER TABLE SBI_ENGINES ENABLE TRIGGER ALL;

ALTER TABLE SBI_DOMAINS DISABLE TRIGGER ALL;
DELETE from SBI_DOMAINS where value_cd = 'WORKSHEET';
ALTER TABLE SBI_DOMAINS ENABLE TRIGGER ALL;

-- 22.06.2016 Antonella: rename LEVEL column to NUM_LEVEL
 ALTER TABLE SBI_GEO_MAPS RENAME COLUMN LEVEL TO NUM_LEVEL;

-- 27.06.2016 Francesco Lucchi: grant functionalities ConfigManagement & DomainManagement to superadmin only
DELETE FROM SBI_ROLE_TYPE_USER_FUNC WHERE USER_FUNCT_ID IN (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'ConfigManagement');
DELETE FROM SBI_ROLE_TYPE_USER_FUNC WHERE USER_FUNCT_ID IN (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'DomainManagement');
DELETE FROM SBI_USER_FUNC WHERE NAME = 'ConfigManagement';
DELETE FROM SBI_USER_FUNC WHERE NAME = 'DomainManagement';

-- 05.07.2016 Vincenzo Gambino: add column FILE_MODEL in SBI_META_MODELS_VERSIONS
ALTER TABLE SBI_META_MODELS_VERSIONS ALTER COLUMN CONTENT CONTENT MEDIUMBLOB NULL;
ALTER TABLE SBI_META_MODELS_VERSIONS ADD COLUMN FILE_MODEL MEDIUMBLOB NULL AFTER NAME;

-- 60.06.2016 Giulio Gavardi: change from Date to TIMESTAMP on Postgres two columns of SBI_CACHE_ITEMS
ALTER TABLE SBI_CACHE_ITEM ALTER COLUMN CREATION_DATE TYPE TIMESTAMP,
               ALTER COLUMN LAST_USED_DATE TYPE TIMESTAMP;


-- 13.07.2016 Alessandro Piovani: add column ADDITIONAL_INFO in SBI_OBJ_METACONTENT
ALTER TABLE SBI_OBJ_METACONTENTS ADD COLUMN ADDITIONAL_INFO VARCHAR(255) NULL DEFAULT NULL AFTER ORGANIZATION;

-- 14.07.2016 Alessandro Piovani: added some columns an constraints to SBI_CATALOG_FUNCTIONS table
ALTER TABLE SBI_CATALOG_FUNCTION
ADD COLUMN OWNER 	VARCHAR(50) NOT NULL AFTER ORGANIZATION,
ADD COLUMN KEYWORDS VARCHAR(255) NULL DEFAULT NULL AFTER OWNER;

ALTER TABLE SBI_CATALOG_FUNCTION
ADD COLUMN LABEL VARCHAR(50) NOT NULL AFTER KEYWORDS;

ALTER TABLE SBI_CATALOG_FUNCTION
ADD CONSTRAINT UNIQUE_LABEL_ORG UNIQUE (LABEL,ORGANIZATION);

ALTER TABLE SBI_CATALOG_FUNCTION
ADD COLUMN TYPE VARCHAR(50) NULL DEFAULT NULL;

-- 15.07.2016 Francesco Lucchi
ALTER TABLE SBI_OBJECTS ADD CONSTRAINT FK_SBI_OBJECTS_5 FOREIGN KEY  ( ENGINE_ID ) REFERENCES SBI_ENGINES ( ENGINE_ID ) ON DELETE RESTRICT;

CREATE TABLE SBI_WHATIF_WORKFLOW(
	ID INTEGER,
    MODEL_ID INTEGER,
    USER_ID INTEGER,
    SEQUENCE INTEGER,
    STATE VARCHAR(20),
    NOTES VARCHAR(100),
    INFO VARCHAR(100),
 	USER_IN 				VARCHAR(100) NOT NULL,
 	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
 	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
 	TIME_IN 				TIMESTAMP NOT NULL,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
 	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 		VARCHAR(10) NULL DEFAULT NULL,
 	SBI_VERSION_UP 		VARCHAR(10) NULL DEFAULT NULL,
 	SBI_VERSION_DE 		VARCHAR(10) NULL DEFAULT NULL,
 	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,
    PRIMARY KEY (ID)
);

ALTER TABLE SBI_WHATIF_WORKFLOW 				ADD CONSTRAINT FK_SBI_MODEL_WORKFLOW			FOREIGN KEY (MODEL_ID) 			REFERENCES SBI_ARTIFACTS(ID)	ON DELETE CASCADE ON UPDATE NO ACTION;
ALTER TABLE SBI_WHATIF_WORKFLOW 				ADD CONSTRAINT FK_SBI_USER_WORKFLOW			FOREIGN KEY (USER_ID) 				REFERENCES SBI_USER(ID) ON DELETE CASCADE ON UPDATE NO ACTION;

-- 09.08.2016 Alberto Ghedin: refactoring whatif start actions
update SBI_ENGINES set MAIN_URL="/knowagewhatifengine/restful-services/olap/startolap" where label = "knowageolapengine";
update SBI_ENGINES set MAIN_URL="/knowagewhatifengine/restful-services/olap/startwhatif" where label = "knowagewhatifengine";


-- 14.09.2016 Alessandro Piovani: add url, remote columns to SBI_CATALOG_FUNCTIONS and make SCRIPT field nullable

ALTER TABLE SBI_CATALOG_FUNCTION ADD COLUMN REMOTE TINYINT(1) DEFAULT 0;
ALTER TABLE SBI_CATALOG_FUNCTION ADD COLUMN URL VARCHAR(100);
ALTER TABLE SBI_CATALOG_FUNCTION CHANGE COLUMN SCRIPT SCRIPT TEXT NULL;

-- 14.10.2016 S.Lupo: fixed numeric precision of threshold value
ALTER TABLE SBI_KPI_THRESHOLD_VALUE ALTER MIN_VALUE TYPE DOUBLE PRECISION;
ALTER TABLE SBI_KPI_THRESHOLD_VALUE ALTER MAX_VALUE TYPE DOUBLE PRECISION;

-- 7.11.2016 Giulio Gavardi
ALTER TABLE SBI_OUTPUT_PARAMETER ADD COLUMN IS_USER_DEFINED BOOLEAN NULL DEFAULT FALSE;

-- Alessandro Piovani
CREATE TABLE SBI_FUNCTION_INPUT_FILE (
	FUNCTION_ID INTEGER		NOT NULL,
	FILE_NAME VARCHAR(100)	NOT NULL,
	FILE_CONTENT BYTEA		DEFAULT NULL,
	ALIAS VARCHAR(45)		DEFAULT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
  	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
  	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
  	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
  	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
  	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
  	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
  	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,
	PRIMARY KEY (FUNCTION_ID, FILE_NAME)
) WITHOUT OIDS;

ALTER TABLE SBI_FUNCTION_INPUT_FILE ADD CONSTRAINT FK_FUNCTION_INPUT_FILES_2 FOREIGN KEY (FUNCTION_ID) REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;

--30.11.2016 Ana Tomic

CREATE TABLE SBI_ACCESSIBILITY_PREFERENCES (
	 ID INT(11) UNSIGNED NOT NULL,
	 USER_ID INT(11) NOT NULL,
	 ENABLE_UIO TINYINT(1) NOT NULL,
	 ENABLE_RROBOBRAILLE TINYINT(1) NULL DEFAULT NULL,
	 ENABLE_GRAPH_SONIFICATION TINYINT(1) NULL DEFAULT NULL,
	 ENABLE_VOICE TINYINT(1) NULL DEFAULT NULL,
	 PREFERENCES TEXT NULL,
	 USER_IN VARCHAR(100) NULL DEFAULT NULL,
	 USER_UP VARCHAR(100) NULL DEFAULT NULL,
	 USER_DE VARCHAR(100) NULL DEFAULT NULL,
	 TIME_IN TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	 TIME_UP TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	 TIME_DE TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	 SBI_VERSION_IN VARCHAR(10) NULL DEFAULT NULL,
	 SBI_VERSION_UP VARCHAR(10) NULL DEFAULT NULL,
	 SBI_VERSION_DE VARCHAR(10) NULL DEFAULT NULL,
	 ORGANIZATION VARCHAR(20) NULL DEFAULT NULL,
	INDEX FK_SBI_ACCESSIBILITY_PREFERENCES_SBI_USER (USER_ID),
	PRIMARY KEY (ID),
	CONSTRAINT FK_SBI_ACCESSIBILITY_PREFERENCES_SBI_USER FOREIGN KEY (USER_ID) REFERENCES SBI_USER (ID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- 10.02.2017 ALberto Ghedin
-- added columns that link a snapshot with schedulation

ALTER TABLE SBI_SNAPSHOTS ADD COLUMN SCHEDULATION VARCHAR(100);
ALTER TABLE SBI_SNAPSHOTS ADD COLUMN SCHEDULER VARCHAR(100);
ALTER TABLE SBI_SNAPSHOTS ADD COLUMN SCHEDULATION_START INTEGER;
ALTER TABLE SBI_SNAPSHOTS ADD COLUMN SEQUENCE INTEGER;

-- 22.02.2017
-- added uniquiness constraint for kpi target

ALTER TABLE SBI_KPI_TARGET ADD CONSTRAINT XAK1SBI_KPI_TARGET UNIQUE (
	NAME,
	ORGANIZATION
);

-- 02.03.2017 Dragan Pirkovic
-- changed path for chart document execution
update SBI_ENGINES set MAIN_URL='/knowagecockpitengine/api/1.0/chart/pages/execute' where LABEL = 'knowagechartengine';

-- 20.03.2017 Marco Cortella
-- added TYPE column for SBI_CROSS_NAVIGATION
ALTER TABLE SBI_CROSS_NAVIGATION ADD COLUMN TYPE INTEGER NOT NULL;
	ADD COLUMN TYPE INT(10) NOT NULL AFTER NAME;

-- 09.06.2017 Alessandro Portosa
-- changed package for Alert actions
UPDATE SBI_ALERT_ACTION SET CLASS_NAME='it.eng.knowage.enterprise.tools.alert.action.ExecuteETLDocument' WHERE NAME = 'Execute ETL Document';
UPDATE SBI_ALERT_ACTION SET CLASS_NAME='it.eng.knowage.enterprise.tools.alert.action.SendMail' WHERE NAME = 'Send mail';

-- 13.07.2017 Francesco Lucchi
-- fix definition length, limiting varchars to 4000 (Oracle upper bound)
ALTER TABLE SBI_KPI_KPI ALTER DEFINITION TYPE VARCHAR(4000);
ALTER TABLE SBI_KPI_VALUE ALTER LOGICAL_KEY TYPE VARCHAR(4000);

-- 28.09.2017 Dragan Pirkovic
-- adding foreign key from sbi.metamodel.DATA_SOURCE_ID to sbi_data_source.DS_ID
ALTER TABLE SBI_META_MODELS add  Foreign Key (DATA_SOURCE_ID) references SBI_DATA_SOURCE (DS_ID);

-- 05.10.2015 Alberto Ghedin removed mobile. The engine is not deleted because there can be some chart document in installation
delete from SBI_PRODUCT_TYPE_ENGINE where ENGINE_ID in(select ENGINE_ID from SBI_ENGINES where NAME='Mobile Chart Engine');
delete from SBI_PRODUCT_TYPE_ENGINE where ENGINE_ID in(select ENGINE_ID from SBI_ENGINES where NAME='Mobile Cockpit Engine');
delete from SBI_PRODUCT_TYPE_ENGINE where ENGINE_ID in(select ENGINE_ID from SBI_ENGINES where NAME='Mobile Report Engine');
delete from SBI_ENGINES where NAME='Mobile Chart Engine';
delete from SBI_ENGINES where NAME='Mobile Cockpit Engine';
delete from SBI_ENGINES where NAME='Mobile Report Engine';
delete from SBI_DOMAINS where VALUE_CD='MOBILE_CHART';
delete from SBI_DOMAINS where VALUE_CD='MOBILE_COCKPIT';
delete from SBI_DOMAINS where VALUE_CD='MOBILE_REPORT';
commit;

-- 11.10.2015 Alberto Ghedin added dossier
CREATE TABLE SBI_DOSSIER_ACTIVITY(
		ID 					INTEGER NOT NULL,
		PROGRESS 			INTEGER NOT NULL,
		PPT					BYTEA,
	    DOCUMENT_ID 		INTEGER,
	    ACTIVITY 			VARCHAR(45) NOT NULL,
	    PARAMS 				VARCHAR(4000),
	 USER_IN VARCHAR(100) NULL DEFAULT NULL,
	 USER_UP VARCHAR(100) NULL DEFAULT NULL,
	 USER_DE VARCHAR(100) NULL DEFAULT NULL,
	 TIME_IN TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	 TIME_UP TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	 TIME_DE TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	 SBI_VERSION_IN VARCHAR(10) NULL DEFAULT NULL,
	 SBI_VERSION_UP VARCHAR(10) NULL DEFAULT NULL,
	 SBI_VERSION_DE VARCHAR(10) NULL DEFAULT NULL,
	 ORGANIZATION VARCHAR(20) NULL DEFAULT NULL,
	    PRIMARY KEY (ID)
) WITHOUT OIDS;

ALTER TABLE SBI_DOSSIER_ACTIVITY ADD CONSTRAINT FK_SBI_PROGRESS_THREAD	FOREIGN KEY (PROGRESS) 	REFERENCES SBI_PROGRESS_THREAD(PROGRESS_THREAD_ID)			ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE SBI_DOSSIER_ACTIVITY ADD CONSTRAINT FK_SBI_OBJECTS FOREIGN KEY  (DOCUMENT_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) ON DELETE CASCADE ON UPDATE CASCADE;
--- 24.11.2017 Marco Cortella added Date type in domains for file dataset support
INSERT into SBI_DOMAINS (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM,VALUE_DS, USER_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'Date', 'Date', 'DS_META_VALUE', 'Dataset Metadata Value', 'Dataset Metadata Value', '');
UPDATE hibernate_sequences SET next_val = (SELECT MAX(VALUE_ID) + 1 FROM SBI_DOMAINS) WHERE sequence_name = 'SBI_DOMAINS';

-- 13.03.2018 Giulio Gavardi
-- new column for roles , is_public

ALTER TABLE SBI_EXT_ROLES ADD COLUMN IS_PUBLIC BOOLEAN NULL;


-- 27.04.2018. Predrag Josipovic
-- Added new column into knowage.SBI_DATA_SOURCE table for Advanced JDBC Pool Configuration

ALTER TABLE SBI_DATA_SOURCE ADD COLUMN JDBC_ADVANCED_CONFIGURATION VARCHAR(4000);


-- 29.05.2018. Predrag Josipovic
-- Modifications on Knowage Metadata table SBI_I18N_MESSAGES, added new column ID as Primary Key

--- START ---
ALTER TABLE SBI_I18N_MESSAGES RENAME TO SBI_I18N_MESSAGES_OLD;

CREATE TABLE SBI_I18N_MESSAGES AS
SELECT ROW_NUMBER() OVER() AS ID, T.*
FROM SBI_I18N_MESSAGES_OLD T;

DROP TABLE SBI_I18N_MESSAGES_OLD;

ALTER TABLE SBI_I18N_MESSAGES ADD CONSTRAINT PK_SBI_I18N_MESSAGES PRIMARY KEY (ID);
ALTER TABLE SBI_I18N_MESSAGES ADD CONSTRAINT FK_SBI_I18N_MESSAGES FOREIGN KEY (LANGUAGE_CD) REFERENCES SBI_DOMAINS (VALUE_ID);
ALTER TABLE SBI_I18N_MESSAGES ADD CONSTRAINT SBI_I18N_MESSAGES_UNIQUE UNIQUE (LANGUAGE_CD, LABEL, ORGANIZATION);

INSERT INTO hibernate_sequences VALUES ('SBI_I18N_MESSAGES',
                                                            (SELECT COALESCE(MAX(m.ID) + 1, 1) FROM SBI_I18N_MESSAGES m));
COMMIT;
--- END ---

-- 29.05.2018 Francesco Lucchi
ALTER TABLE SBI_DATA_SET ADD CONSTRAINT XAK1SBI_DATA_SET UNIQUE (NAME, VERSION_NUM, ORGANIZATION);

-- 01.06.2018 Giulio Gavardi

INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, CATEGORY, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),
'KNOWAGE.WORKSPACE_SHOW_GRID', 'Show grid view as default in workspace', 'Show grid view as default in workspace', true, 'true',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'STRING' AND DOMAIN_CD = 'PAR_TYPE'), 'GENERIC_CONFIGURATION', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit;

-- 06.06.2018 Filip MIlosavljevic

ALTER TABLE SBI_ATTRIBUTE ADD COLUMN ALLOW_USER SMALLINT NULL,
						  ADD COLUMN MULTIVALUE SMALLINT NULL,
						  ADD COLUMN SYNTAX SMALLINT NULL,
						  ADD COLUMN LOV_ID INTEGER NULL,
	   					  ADD COLUMN VALUE_TYPE_ID INTEGER NULL,
	   					  ADD COLUMN VALUE_TYPE_CD VARCHAR(20),
	   					  ADD COLUMN VALUE_TYPE VARCHAR(50));

ALTER TABLE SBI_ATTRIBUTE ADD CONSTRAINT FK_LOV FOREIGN KEY (LOV_ID) REFERENCES SBI_LOV(LOV_ID);
ALTER TABLE SBI_ATTRIBUTE ADD CONSTRAINT ENUM_TYPE CHECK (VALUE_TYPE IN('STRING','DATE','NUM'));

ALTER TABLE SBI_ATTRIBUTE ALTER COLUMN DESCRIPTION DROP NOT NULL;

-- 07.06.2018 Antonella Giachino
DELETE FROM SBI_PRODUCT_TYPE_ENGINE WHERE ENGINE_ID = (
    SELECT ENGINE_ID FROM SBI_ENGINES WHERE BIOBJ_TYPE = (
        SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'ACCESSIBLE_HTML'
    )
);

DELETE FROM SBI_ENGINES WHERE BIOBJ_TYPE = (
    SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'ACCESSIBLE_HTML'
);

DELETE FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'ACCESSIBLE_HTML';
COMMIT;

ALTER TABLE SBI_EVENTS_LOG ADD COLUMN EVENT_TYPE VARCHAR(50) DEFAULT 'SCHEDULER' NOT NULL;

UPDATE SBI_EVENTS_LOG SET EVENT_TYPE = (
CASE HANDLER
	WHEN 'it.eng.spagobi.events.handlers.DefaultEventPresentationHandler' THEN 'SCHEDULER'
	WHEN 'it.eng.spagobi.events.handlers.CommonjEventPresentationHandler' THEN 'COMMONJ'
	WHEN 'it.eng.spagobi.events.handlers.TalendEventPresentationHandler' THEN 'ETL'
	WHEN 'it.eng.spagobi.events.handlers.WekaEventPresentationHandler' THEN 'DATA_MINING'
END
);
commit;

ALTER TABLE SBI_EVENTS_LOG DROP COLUMN HANDLER;

--21.06.2018 Antonella Giachino
ALTER TABLE SBI_OUTPUT_PARAMETER ALTER FORMAT_VALUE TYPE CHARACTER VARYING(30);

--04.07.2018 Filip Milosavljevic

CREATE TABLE SBI_METAMODEL_PAR (
       METAMODEL_PAR_ID           INTEGER NOT NULL ,
       PAR_ID               INTEGER NOT NULL,
       METAMODEL_ID             INTEGER NOT NULL,
       LABEL                VARCHAR(40) NOT NULL,
       REQ_FL               SMALLINT NULL,
       MOD_FL               SMALLINT NULL,
       VIEW_FL              SMALLINT NULL,
       MULT_FL              SMALLINT NULL,
       PROG                 INTEGER NOT NULL,
       PARURL_NM            VARCHAR(20) NULL,
       PRIORITY             INTEGER NULL,
       COL_SPAN             INTEGER NULL,
       THICK_PERC           INTEGER NULL,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       PRIMARY KEY (METAMODEL_PAR_ID)
) WITHOUT OIDS;

ALTER TABLE SBI_METAMODEL_PAR ADD CONSTRAINT FK_SBI_METAMODEL_PAR_1 FOREIGN KEY  ( METAMODEL_ID ) REFERENCES SBI_META_MODELS ( ID ) ON DELETE RESTRICT;
ALTER TABLE SBI_METAMODEL_PAR ADD CONSTRAINT FK_SBI_METAMODEL_PAR_2 FOREIGN KEY  ( PAR_ID ) REFERENCES SBI_PARAMETERS ( PAR_ID ) ON DELETE RESTRICT;

CREATE TABLE SBI_METAMODEL_PARUSE (
		PARUSE_ID			INTEGER NOT NULL,
		METAMODEL_PAR_ID          INTEGER NOT NULL,
		USE_ID              INTEGER NOT NULL,
		METAMODEL_PAR_FATHER_ID   INTEGER NOT NULL,
		FILTER_OPERATION    VARCHAR(20) NOT NULL,
		PROG 				INTEGER NOT NULL,
		FILTER_COLUMN       VARCHAR(30) NOT NULL,
		PRE_CONDITION 		VARCHAR(10),
	    POST_CONDITION 		VARCHAR(10),
	    LOGIC_OPERATOR 		VARCHAR(10),
        USER_IN             VARCHAR(100) NOT NULL,
        USER_UP             VARCHAR(100),
        USER_DE             VARCHAR(100),
        TIME_IN             TIMESTAMP NOT NULL,
        TIME_UP             TIMESTAMP NULL DEFAULT NULL,
        TIME_DE             TIMESTAMP NULL DEFAULT NULL,
        SBI_VERSION_IN      VARCHAR(10),
        SBI_VERSION_UP      VARCHAR(10),
        SBI_VERSION_DE      VARCHAR(10),
        META_VERSION        VARCHAR(100),
        ORGANIZATION        VARCHAR(20),
	    PRIMARY KEY(PARUSE_ID)
) WITHOUT OIDS;

ALTER TABLE SBI_METAMODEL_PARUSE ADD CONSTRAINT FK_SBI_METAMODEL_PARUSE_1 FOREIGN KEY  ( METAMODEL_PAR_ID ) REFERENCES SBI_METAMODEL_PAR ( METAMODEL_PAR_ID ) ON DELETE RESTRICT;
ALTER TABLE SBI_METAMODEL_PARUSE ADD CONSTRAINT FK_SBI_METAMODEL_PARUSE_2 FOREIGN KEY  ( USE_ID ) REFERENCES SBI_PARUSE ( USE_ID ) ON DELETE RESTRICT;
ALTER TABLE SBI_METAMODEL_PARUSE ADD CONSTRAINT FK_SBI_METAMODEL_PARUSE_3 FOREIGN KEY  ( METAMODEL_PAR_FATHER_ID ) REFERENCES SBI_METAMODEL_PAR ( METAMODEL_PAR_ID ) ON DELETE RESTRICT;

CREATE TABLE SBI_METAMODEL_PARVIEW (
		 PARVIEW_ID INTEGER NOT NULL,
         METAMODEL_PAR_ID         INTEGER NOT NULL,
         METAMODEL_PAR_FATHER_ID  INTEGER NOT NULL,
         OPERATION          VARCHAR(20) NOT NULL,
         COMPARE_VALUE      VARCHAR(200) NOT NULL,
         VIEW_LABEL         VARCHAR(50),
         PROG               INTEGER,
         USER_IN            VARCHAR(100) NOT NULL,
         USER_UP              VARCHAR(100),
         USER_DE              VARCHAR(100),
         TIME_IN              TIMESTAMP NOT NULL,
         TIME_UP              TIMESTAMP NULL DEFAULT NULL,
         TIME_DE              TIMESTAMP NULL DEFAULT NULL,
         SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
      PRIMARY KEY ( PARVIEW_ID )
) WITHOUT OIDS;

ALTER TABLE SBI_METAMODEL_PARVIEW ADD CONSTRAINT FK_SBI_METAMODEL_PARVIEW_1 FOREIGN KEY ( METAMODEL_PAR_ID ) REFERENCES SBI_METAMODEL_PAR ( METAMODEL_PAR_ID ) ON DELETE RESTRICT;
ALTER TABLE SBI_METAMODEL_PARVIEW ADD CONSTRAINT FK_SBI_METAMODEL_PARVIEW_2 FOREIGN KEY ( METAMODEL_PAR_FATHER_ID ) REFERENCES SBI_METAMODEL_PAR ( METAMODEL_PAR_ID ) ON DELETE RESTRICT;

---Filip Milosavljevic  09.07.2018---

ALTER TABLE SBI_METAMODEL_PAR
ALTER COLUMN REQ_FL SMALLINT SET DEFAULT '0' ,
ALTER COLUMN MOD_FL SMALLINT SET DEFAULT '0' ,
ALTER COLUMN VIEW_FL SMALLINT SET DEFAULT '1' ,
ALTER COLUMN MULT_FL SMALLINT SET DEFAULT '0' ;

ALTER TABLE SBI_OBJ_PAR
ALTER COLUMN REQ_FL SMALLINT SET DEFAULT '0' ,
ALTER COLUMN MOD_FL SMALLINT SET DEFAULT '0' ,
ALTER COLUMN VIEW_FL SMALLINT SET DEFAULT '1' ,
ALTER COLUMN MULT_FL SMALLINT SET DEFAULT '0' ;

---END---

--Dragan Pirkovic 09.07.2018---

ALTER TABLE SBI_FEDERATION_DEFINITION ADD COLUMN OWNER VARCHAR(100) NULL AFTER DEGENERATED;


--end--


-- 11.07.2018. Predrag Josipovic
-- STATEMENT START
DELETE FROM SBI_EXPORTERS WHERE ENGINE_ID IN (SELECT ENGINE_ID FROM SBI_ENGINES WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.qbe.QbeDriver')
AND
DOMAIN_ID IN (SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'EXPORT_TYPE' AND VALUE_CD IN ('PDF', 'RTF', 'JRXML', 'JSON'));

UPDATE SBI_EXPORTERS SET DEFAULT_VALUE = 1 WHERE ENGINE_ID IN (SELECT ENGINE_ID FROM SBI_ENGINES WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.qbe.QbeDriver')
AND
DOMAIN_ID IN (SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'EXPORT_TYPE' AND VALUE_CD = 'XLS');

commit;
-- STATEMENT END


-- 13.07.2018. Predrag Josipovic
-- STETEMENT START
ALTER TABLE SBI_DATA_SOURCE DROP CONSTRAINT XAK1SBI_DATA_SOURCE;

DROP INDEX IF EXISTS XAK1SBI_DATA_SOURCE;

ALTER TABLE SBI_DATA_SOURCE ADD CONSTRAINT XAK1SBI_DATA_SOURCE UNIQUE (LABEL);
-- STATEMENT END


-- 07.09.2018. Predrag Josipovic
---START---
ALTER TABLE SBI_OBJ_PARUSE RENAME TO SBI_OBJ_PARUSE_OLD;

CREATE TABLE SBI_OBJ_PARUSE AS
SELECT ROW_NUMBER() OVER() AS PARUSE_ID, T.*
FROM SBI_OBJ_PARUSE_OLD T;

ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT PK_SBI_OBJ_PARUSE PRIMARY KEY(PARUSE_ID);
ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT FK_SBI_OBJ_PARUSE_1 FOREIGN KEY (OBJ_PAR_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID);
ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT FK_SBI_OBJ_PARUSE_2 FOREIGN KEY (USE_ID) REFERENCES SBI_PARUSE (USE_ID);
ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT FK_SBI_OBJ_PARUSE_3 FOREIGN KEY (OBJ_PAR_FATHER_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID);

INSERT INTO hibernate_sequences VALUES ('SBI_OBJ_PARUSE',
                                                            (SELECT COALESCE(MAX(t.PARUSE_ID) + 1, 1) FROM SBI_OBJ_PARUSE t));

DROP TABLE SBI_OBJ_PARUSE_OLD;
--- END---


---START---
ALTER TABLE SBI_OBJ_PARVIEW RENAME TO SBI_OBJ_PARVIEW_OLD;

CREATE TABLE SBI_OBJ_PARVIEW AS
SELECT ROW_NUMBER() OVER() AS PARVIEW_ID, T.*
FROM SBI_OBJ_PARVIEW_OLD T;

ALTER TABLE SBI_OBJ_PARVIEW ADD CONSTRAINT PK_SBI_OBJ_PARVIEW PRIMARY KEY(PARVIEW_ID);
ALTER TABLE SBI_OBJ_PARVIEW ADD CONSTRAINT FK_SBI_OBJ_PARVIEW_1 FOREIGN KEY (OBJ_PAR_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID);
ALTER TABLE SBI_OBJ_PARVIEW ADD CONSTRAINT FK_SBI_OBJ_PARVIEW_2 FOREIGN KEY (OBJ_PAR_FATHER_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID);

INSERT INTO hibernate_sequences VALUES ('SBI_OBJ_PARVIEW',
                                                            (SELECT COALESCE(MAX(t.PARVIEW_ID) + 1, 1) FROM SBI_OBJ_PARVIEW t));

DROP TABLE SBI_OBJ_PARVIEW_OLD;
---END---

-- 07/09/2018 Antonella Giachino
DELETE FROM SBI_ROLE_TYPE_USER_FUNC WHERE ROLE_TYPE_ID = (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'TEST_ROLE') AND USER_FUNCT_ID IN (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC  WHERE  NAME IN ('TIMESPAN', 'FUNCTIONSCATALOGMANAGEMENT','MANAGECROSSNAVIGATION','EVENTSMANAGEMENT'));
COMMIT;

-- 12.10.2018. Predrag Josipovic
ALTER TABLE SBI_CROSS_NAVIGATION ADD CONSTRAINT CROSS_NAVIGATION_NAME_UNIQUE UNIQUE(NAME);

-- 14/12/2018 Davide Zerbetto
ALTER TABLE SBI_OBJECT_TEMPLATES ALTER COLUMN NAME TYPE varchar(1000);

-- 16/01/2019 Antonella Giachino
ALTER TABLE SBI_CROSS_NAVIGATION ADD COLUMN DESCRIPTION VARCHAR(200) NULL DEFAULT NULL,
								 ADD COLUMN BREADCRUMB VARCHAR(200) NULL DEFAULT NULL;


-- 11.02.2019. Predrag Josipovic
-- New Table on version 7.0
CREATE TABLE SBI_METAMODEL_VIEWPOINTS (
	VP_ID INTEGER NOT NULL,
	METAMODEL_ID INTEGER NOT NULL,
	VP_NAME VARCHAR(40) NOT NULL,
	VP_OWNER VARCHAR(40) DEFAULT NULL,
	VP_DESC VARCHAR(160) DEFAULT NULL,
	VP_SCOPE VARCHAR(20) NOT NULL,
	VP_VALUE_PARAMS TEXT,
	VP_CREATION_DATE TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	USER_IN VARCHAR(100) NOT NULL,
	USER_UP VARCHAR(100) DEFAULT NULL,
	USER_DE VARCHAR(100) DEFAULT NULL,
	TIME_IN TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	TIME_UP TIMESTAMP NULL DEFAULT NULL,
	TIME_DE TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_UP VARCHAR(10) DEFAULT NULL,
	SBI_VERSION_DE VARCHAR(10) DEFAULT NULL,
	META_VERSION VARCHAR(100) DEFAULT NULL,
	ORGANIZATION VARCHAR(20) DEFAULT NULL,
	PRIMARY KEY (VP_ID),
	CONSTRAINT FK_SBI_METAMODEL_VIEWPOINTS FOREIGN KEY (METAMODEL_ID) REFERENCES SBI_META_MODELS (ID)
) WITHOUT OIDS;

-- 11.02.2019 Predrag Josipovic
-- NEWS Functionality
CREATE TABLE SBI_NEWS (
	ID int NOT NULL,
	NAME varchar(200) DEFAULT NULL,
	DESCRIPTION varchar(400) DEFAULT NULL,
	ACTIVE boolean,
	NEWS varchar(4000) DEFAULT NULL,
	MANUAL boolean,
	EXPIRATION_DATE timestamp NULL DEFAULT NULL,
	USER_IN varchar(100) NOT NULL,
	USER_UP varchar(100) DEFAULT NULL,
	USER_DE varchar(100) DEFAULT NULL,
	TIME_IN timestamp NOT NULL,
	TIME_UP timestamp NULL DEFAULT NULL,
	TIME_DE timestamp NULL DEFAULT NULL,
	SBI_VERSION_IN varchar(10) DEFAULT NULL,
	SBI_VERSION_UP varchar(10) DEFAULT NULL,
	SBI_VERSION_DE varchar(10) DEFAULT NULL,
	META_VERSION varchar(100) DEFAULT NULL,
	ORGANIZATION varchar(20) DEFAULT NULL,
	CATEGORY_ID int DEFAULT NULL,
	PRIMARY KEY (ID),
	CONSTRAINT FK_SBI_NEWS_SBI_DOMAINS_1 FOREIGN KEY (CATEGORY_ID) REFERENCES sbi_domains (VALUE_ID) ON DELETE NO ACTION ON UPDATE NO ACTION
) WITHOUT OIDS;


CREATE TABLE SBI_NEWS_ROLES (
	NEWS_ID int NOT NULL,
	EXT_ROLE_ID int NOT NULL,
	PRIMARY KEY (NEWS_ID,EXT_ROLE_ID),
	CONSTRAINT EXT_ROLE_ID FOREIGN KEY (EXT_ROLE_ID) REFERENCES sbi_ext_roles (EXT_ROLE_ID) ON DELETE NO ACTION ON UPDATE NO ACTION,
	CONSTRAINT NEWS_ID FOREIGN KEY (NEWS_ID) REFERENCES sbi_news (ID) ON DELETE CASCADE ON UPDATE NO ACTION
) WITHOUT OIDS;


CREATE TABLE SBI_NEWS_READ (
	ID int NOT NULL,
	"USER" varchar(100) NOT NULL,
	NEWS_ID int NOT NULL,
	USER_IN varchar(100) NOT NULL,
	USER_UP varchar(100) DEFAULT NULL,
	USER_DE varchar(100) DEFAULT NULL,
	TIME_IN timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
	TIME_UP timestamp NULL DEFAULT NULL,
	TIME_DE timestamp NULL DEFAULT NULL,
	SBI_VERSION_IN varchar(10) DEFAULT NULL,
	SBI_VERSION_UP varchar(10) DEFAULT NULL,
	SBI_VERSION_DE varchar(10) DEFAULT NULL,
	META_VERSION varchar(100) DEFAULT NULL,
	ORGANIZATION varchar(20) DEFAULT NULL,
	PRIMARY KEY (ID),
	CONSTRAINT fk_news_id FOREIGN KEY (NEWS_ID) REFERENCES sbi_news (ID) ON DELETE CASCADE ON UPDATE NO ACTION
) WITHOUT OIDS;
-- NEWS Functionality End

-- 11.02.2019 Predrag Josipovic
-- Dataset Tags Functionality
CREATE TABLE SBI_TAG (
	TAG_ID               INTEGER NOT NULL,
	NAME                 VARCHAR(30) NOT NULL,
	USER_IN              VARCHAR(100) NOT NULL,
	USER_UP              VARCHAR(100),
	USER_DE              VARCHAR(100),
	TIME_IN              TIMESTAMP NOT NULL,
	TIME_UP              TIMESTAMP NULL DEFAULT NULL,
	TIME_DE              TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN       VARCHAR(10),
	SBI_VERSION_UP       VARCHAR(10),
	SBI_VERSION_DE       VARCHAR(10),
	META_VERSION         VARCHAR(100),
	ORGANIZATION         VARCHAR(20),
	PRIMARY KEY (TAG_ID),
	CONSTRAINT XAK1SBI_TAG UNIQUE (NAME, ORGANIZATION)
) WITHOUT OIDS;

CREATE TABLE SBI_DATA_SET_TAG (
	DS_ID                INTEGER NOT NULL,
	VERSION_NUM	     INTEGER NOT NULL,
	ORGANIZATION         VARCHAR(20),
	TAG_ID               INTEGER NOT NULL,
	PRIMARY KEY (DS_ID, VERSION_NUM, ORGANIZATION, TAG_ID),
	CONSTRAINT fk_sbi_data_set_tag_tag FOREIGN KEY (TAG_ID)
	REFERENCES SBI_TAG (TAG_ID) MATCH SIMPLE
	ON UPDATE NO ACTION ON DELETE RESTRICT,
	CONSTRAINT fk_sbi_data_set_tag_dataset FOREIGN KEY (DS_ID, VERSION_NUM, ORGANIZATION)
	REFERENCES SBI_DATA_SET (DS_ID, VERSION_NUM, ORGANIZATION) MATCH SIMPLE
	ON UPDATE NO ACTION ON DELETE RESTRICT
) WITHOUT OIDS;
-- Dataset Tags Functionality END

-- 12.02.2019. Predrag Josipovic
ALTER TABLE SBI_NEWS DROP CONSTRAINT FK_SBI_NEWS_SBI_DOMAINS_1;
ALTER TABLE SBI_NEWS ADD CONSTRAINT FK_SBI_DOMAINS_VALUE_ID FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_DOMAINS (VALUE_ID) ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE SBI_NEWS_READ DROP CONSTRAINT FK_NEWS_ID;
ALTER TABLE SBI_NEWS_READ ADD CONSTRAINT FK_SBI_NEWS_NEWS_ID FOREIGN KEY (NEWS_ID) REFERENCES SBI_NEWS (ID) ON DELETE CASCADE ON UPDATE NO ACTION;

ALTER TABLE SBI_NEWS_READ RENAME COLUMN "USER" TO USER_ID;

ALTER TABLE SBI_NEWS_ROLES DROP CONSTRAINT EXT_ROLE_ID;
ALTER TABLE SBI_NEWS_ROLES DROP CONSTRAINT NEWS_ID;
ALTER TABLE SBI_NEWS_ROLES ADD CONSTRAINT FK_SBI_EXT_ROLES_EXT_ROLE_ID FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) ON DELETE CASCADE ON UPDATE NO ACTION;
ALTER TABLE SBI_NEWS_ROLES ADD CONSTRAINT FK_SBI_NEWS_ID FOREIGN KEY (NEWS_ID) REFERENCES SBI_NEWS (ID) ON DELETE CASCADE ON UPDATE NO ACTION;

-- 08/07/2019 Marco Libanori
ALTER TABLE SBI_USER ADD COLUMN FAILED_LOGIN_ATTEMPTS INT DEFAULT 0 NOT NULL AFTER DT_LAST_ACCESS;

-- 17/07/2019 Marco Libanori
ALTER TABLE SBI_PARUSE ADD COLUMN MAX_LOV_ID INT DEFAULT NULL;

--22/07/2019 Radmila Selakovic
ALTER TABLE SBI_PARUSE ADD CONSTRAINT FK_SBI_PARUSE_4 FOREIGN KEY (MAX_LOV_ID) REFERENCES SBI_LOV(LOV_ID) ON DELETE RESTRICT;

-- 26/08/2019 Radmila Selakovic
DELETE FROM SBI_PRODUCT_TYPE_ENGINE WHERE ENGINE_ID IN (SELECT ENGINE_ID FROM SBI_ENGINES WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.network.NetworkDriver');
DELETE FROM SBI_EXPORTERS WHERE ENGINE_ID IN (SELECT ENGINE_ID FROM SBI_ENGINES WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.network.NetworkDriver');
DELETE FROM SBI_ENGINES WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.network.NetworkDriver';
DELETE FROM SBI_DOMAINS WHERE VALUE_CD = 'NETWORK' AND DOMAIN_CD = 'BIOBJ_TYPE';

--20/09/2019 Radmila Selakovic

ALTER TABLE SBI_META_MODELS 
	ADD TABLE_PREFIX_LIKE VARCHAR(4000) NULL;
ALTER TABLE SBI_META_MODELS 
	ADD TABLE_PREFIX_NOT_LIKE VARCHAR(4000) NULL;

-- 12/10/2019 Alberto Nale
ALTER TABLE SBI_USER ADD DEFAULT_ROLE_ID INTEGER DEFAULT NULL;
-- Create foreign key between SBI_USER and SBI_EXT_ROLES
ALTER TABLE SBI_USER ADD CONSTRAINT FK_SBI_USER_1 FOREIGN KEY (DEFAULT_ROLE_ID) REFERENCES SBI_EXT_ROLES(EXT_ROLE_ID);


--29/11/2019 Radmila Selakovic
-- deleting ProfileManagement and ProfileAttributeManagement functionalities 
delete from sbi_role_type_user_func where user_funct_id in (select user_funct_id from sbi_user_func where  name in ('ProfileAttributeManagement','ProfileManagement'))
and role_type_id = (select value_id from sbi_domains where  DOMAIN_CD='ROLE_TYPE' and value_cd='DEV_ROLE')

--adding POPUP_OPTIONS into SBI_CROSS_NAVIGATION table
ALTER TABLE SBI_CROSS_NAVIGATION ADD COLUMN POPUP_OPTIONS VARCHAR(4000) NULL DEFAULT NULL;

--- START ---
-- 15/01/2020 Radmila Selakovic
ALTER TABLE SBI_CROSS_NAVIGATION ADD FROM_DOC_ID INTEGER DEFAULT NULL;
-- Create foreign key between SBI_CROSS_NAVIGATION and SBI_OBJECTS
ALTER TABLE SBI_CROSS_NAVIGATION ADD CONSTRAINT FK_SBI_CROSS_NAVIGATION_1 FOREIGN KEY (FROM_DOC_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID);

ALTER TABLE SBI_CROSS_NAVIGATION ADD TO_DOC_ID INTEGER DEFAULT NULL;
-- Create foreign key between SBI_CROSS_NAVIGATION and SBI_OBJECTS
ALTER TABLE SBI_CROSS_NAVIGATION ADD CONSTRAINT FK_SBI_CROSS_NAVIGATION_2 FOREIGN KEY (TO_DOC_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID);

-- 25/02/2020 Radmila Selakovic
ALTER TABLE SBI_MENU ADD ICON VARCHAR(255) NULL;
ALTER TABLE SBI_MENU ADD CUST_ICON VARCHAR(4000) NULL; 

--14/04/2020 Radmila Selakovic KNOWAGE-5009
UPDATE SBI_ALERT_LISTENER SET TEMPLATE='angular_1.4/tools/alert/listeners/kpiListener/templates/kpiListener.html' WHERE NAME='KPI Listener';
UPDATE SBI_ALERT_ACTION SET TEMPLATE='angular_1.4/tools/alert/actions/executeETL/templates/executeETL.html' WHERE NAME= 'Execute ETL Document';
UPDATE SBI_ALERT_ACTION SET TEMPLATE='angular_1.4/tools/alert/actions/sendMail/templates/sendMail.html' WHERE NAME= 'Send mail';
UPDATE SBI_ALERT_ACTION SET TEMPLATE='angular_1.4/tools/alert/actions/contextBroker/templates/contextBroker.html' WHERE NAME= 'Context Broker';

--08/06/2020 Andrijana Predojevic
ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT XAK1SBI_OBJ_PARUSE UNIQUE (OBJ_PAR_ID,USE_ID,OBJ_PAR_FATHER_ID,FILTER_OPERATION);

--09/06/2020 Andrijana Predojevic
ALTER TABLE SBI_METAMODEL_PARUSE ADD CONSTRAINT XAK1SBI_METAMODEL_PARUSE UNIQUE (METAMODEL_PAR_ID,USE_ID,METAMODEL_PAR_FATHER_ID,FILTER_OPERATION); 

ALTER TABLE SBI_OBJECTS ADD CONSTRAINT XAK2SBI_OBJECTS UNIQUE (NAME, ORGANIZATION);
ALTER TABLE SBI_LOV ADD CONSTRAINT XAK2SBI_LOV UNIQUE (NAME, ORGANIZATION);
ALTER TABLE SBI_PARAMETERS ADD CONSTRAINT XAK2SBI_PARAMETERS UNIQUE (NAME, ORGANIZATION);

--15/06/2020 Andrijana Predojevic
ALTER TABLE SBI_META_MODELS ADD COLUMN SMART_VIEW BOOLEAN DEFAULT TRUE;

--28/12/2020 Alberto Nale
ALTER TABLE SBI_DOSSIER_ACTIVITY ADD DOC bytea NULL;
ALTER TABLE SBI_DOSSIER_ACTIVITY ADD CONFIG varchar(4000) NULL;

-- 22/12/2020 MARCO BALESTRI
-- CATALOG FUNCTION TABLES UPDATE

-- START

-- CLEAN OLD TABLES
DELETE FROM SBI_CATALOG_FUNCTION;
DELETE FROM SBI_FUNCTION_INPUT_VARIABLE;

-- DROP OLD TABLES
DROP TABLE IF EXISTS SBI_FUNCTION_OUTPUT, SBI_FUNCTION_INPUT_DATASET, SBI_FUNCTION_INPUT_FILE;

-- ------------------------- TABLE SBI_CATALOG_FUNCTION -------------------------
ALTER TABLE SBI_CATALOG_FUNCTION
ADD COLUMN BENCHMARKS TEXT,
ADD COLUMN FAMILY TEXT,
ADD COLUMN ONLINE_SCRIPT TEXT,
ADD COLUMN OFFLINE_SCRIPT_TRAIN TEXT,
ADD COLUMN OFFLINE_SCRIPT_USE TEXT,
DROP COLUMN SCRIPT,
DROP COLUMN URL,
DROP COLUMN REMOTE;

-- ----------------------- TABLE SBI_FUNCTION_INPUT_COLUMN -----------------------
CREATE TABLE IF NOT EXISTS SBI_FUNCTION_INPUT_COLUMN (LIKE SBI_FUNCTION_INPUT_VARIABLE);

ALTER TABLE SBI_FUNCTION_INPUT_COLUMN
ALTER COLUMN VAR_NAME TYPE VARCHAR(100),
ALTER COLUMN VAR_VALUE TYPE VARCHAR(100);


ALTER TABLE SBI_FUNCTION_INPUT_COLUMN
RENAME COLUMN VAR_NAME TO COL_NAME;

ALTER TABLE SBI_FUNCTION_INPUT_COLUMN
RENAME COLUMN VAR_VALUE TO COL_TYPE;

-- ---------------------- TABLE SBI_FUNCTION_INPUT_VARIABLE ---------------------
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE
ADD COLUMN VAR_TYPE VARCHAR(100);

-- ---------------------- TABLE SBI_FUNCTION_OUTPUT_COLUMN -----------------------
CREATE TABLE IF NOT EXISTS SBI_FUNCTION_OUTPUT_COLUMN (LIKE SBI_FUNCTION_INPUT_COLUMN);

ALTER TABLE SBI_FUNCTION_OUTPUT_COLUMN
ADD COLUMN COL_FIELD_TYPE VARCHAR(100);

-- --------------------------- TABLE SBI_OBJ_FUNCTION ---------------------------
CREATE TABLE IF NOT EXISTS SBI_OBJ_FUNCTION (LIKE SBI_OBJ_DATA_SET);

ALTER TABLE SBI_OBJ_FUNCTION
DROP IS_DETAIL;

ALTER TABLE SBI_OBJ_FUNCTION
ALTER COLUMN BIOBJ_DS_ID TYPE INT,
ALTER COLUMN DS_ID TYPE INT;

ALTER TABLE SBI_OBJ_FUNCTION
RENAME COLUMN BIOBJ_DS_ID TO BIOBJ_FUNCTION_ID;

ALTER TABLE SBI_OBJ_FUNCTION
RENAME COLUMN  DS_ID TO FUNCTION_ID;

ALTER TABLE SBI_OBJ_FUNCTION
ADD FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID),
ADD FOREIGN KEY (FUNCTION_ID) REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_ID);

-- END
-- 15/02/2021 - Cockpit complexity initializer
CREATE TABLE SBI_COCKPIT_ASSOCIATION (
	SBI_COCKPIT_ASSOCIATION_ID INT4 NOT NULL,
	BIOBJ_ID INT4 NULL,
	DS_ID_FROM INT4 NULL,
	COLUMN_NAME_FROM VARCHAR NULL,
	DS_ID_TO INT4 NULL,
	COLUMN_NAME_TO VARCHAR NULL,
	USER_IN VARCHAR(100) NOT NULL,
	USER_UP VARCHAR(100) NULL,
	USER_DE VARCHAR(100) NULL,
	TIME_IN TIMESTAMP NOT NULL,
	TIME_UP TIMESTAMP NULL,
	TIME_DE TIMESTAMP NULL,
	SBI_VERSION_IN VARCHAR(10) NULL,
	SBI_VERSION_UP VARCHAR(10) NULL,
	SBI_VERSION_DE VARCHAR(10) NULL,
	META_VERSION VARCHAR(100) NULL,
	ORGANIZATION VARCHAR(20) NULL,
	CONSTRAINT SBI_COCKPIT_ASSOCIATION_PK PRIMARY KEY (SBI_COCKPIT_ASSOCIATION_ID),
	CONSTRAINT SBI_COCKPIT_ASSOCIATION_FK FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID) ON DELETE CASCADE
);

CREATE TABLE SBI_COCKPIT_WIDGET (
	SBI_COCKPIT_WIDGET_ID INT4 NOT NULL,
	BIOBJ_ID INT4 NULL,
	TAB VARCHAR NULL,
	WIDGET_TYPE VARCHAR NULL,
	DS_ID INT4 NULL,
	ASSOCIATIVE BOOL NULL,
	"cache" BOOL NULL,
	FILTERS BOOL NULL,
	USER_IN VARCHAR(100) NOT NULL,
	USER_UP VARCHAR(100) NULL,
	USER_DE VARCHAR(100) NULL,
	TIME_IN TIMESTAMP NOT NULL,
	TIME_UP TIMESTAMP NULL,
	TIME_DE TIMESTAMP NULL,
	SBI_VERSION_IN VARCHAR(10) NULL,
	SBI_VERSION_UP VARCHAR(10) NULL,
	SBI_VERSION_DE VARCHAR(10) NULL,
	META_VERSION VARCHAR(100) NULL,
	ORGANIZATION VARCHAR(20) NULL,
	CONSTRAINT SBI_COCKPIT_WIDGET_PK PRIMARY KEY (SBI_COCKPIT_WIDGET_ID),
	CONSTRAINT SBI_COCKPIT_WIDGET_FK FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID) ON DELETE CASCADE
);

-- 06/04/2021
UPDATE SBI_CONFIG SC SET VALUE_CHECK = 'it-IT,en-US,fr-FR,es-ES,pt-BR,en-GB,zh-Hans-CN,de-DE' WHERE LABEL = 'SPAGOBI.LANGUAGE_SUPPORTED.LANGUAGES';
UPDATE SBI_CONFIG SC SET VALUE_CHECK = 'en-US' WHERE LABEL = 'SPAGOBI.LANGUAGE_SUPPORTED.LANGUAGE.default';

UPDATE SBI_DOMAINS SET VALUE_CD = 'it-IT', DOMAIN_NM='Language tag code', VALUE_NM = 'Italian (IT)', VALUE_DS=VALUE_NM WHERE DOMAIN_CD = 'LANG' AND VALUE_NM = 'Italian' AND DOMAIN_NM = 'Language ISO code';
UPDATE SBI_DOMAINS SET VALUE_CD = 'en-US', DOMAIN_NM='Language tag code', VALUE_NM = 'English (US)', VALUE_DS=VALUE_NM WHERE DOMAIN_CD = 'LANG' AND VALUE_NM = 'English' AND DOMAIN_NM = 'Language ISO code';
UPDATE SBI_DOMAINS SET VALUE_CD = 'es-ES', DOMAIN_NM='Language tag code', VALUE_NM = 'Spanish (ES)', VALUE_DS=VALUE_NM WHERE DOMAIN_CD = 'LANG' AND VALUE_NM = 'Spanish' AND DOMAIN_NM = 'Language ISO code';
UPDATE SBI_DOMAINS SET VALUE_CD = 'fr-FR', DOMAIN_NM='Language tag code', VALUE_NM = 'French (FR)', VALUE_DS=VALUE_NM WHERE DOMAIN_CD = 'LANG' AND VALUE_NM = 'French' AND DOMAIN_NM = 'Language ISO code';
UPDATE SBI_DOMAINS SET VALUE_CD = 'pt-BR', DOMAIN_NM='Language tag code', VALUE_NM = 'Portoguese (BR)', VALUE_DS=VALUE_NM WHERE DOMAIN_CD = 'LANG' AND VALUE_NM = 'Portoguese' AND DOMAIN_NM = 'Language ISO code';

ALTER TABLE SBI_MENU ALTER COLUMN CUST_ICON TYPE TEXT USING CUST_ICON::TEXT;

CREATE TABLE SBI_WIDGET_GALLERY (
  UUID CHAR(36) NOT NULL, -- primary key
  NAME VARCHAR(200) NOT NULL,
  DESCRIPTION VARCHAR(500) NULL,
  TYPE VARCHAR(45) NULL, -- HTML/CUSTOM CHART/PYTHON/R
  PREVIEW_IMAGE BYTEA NULL, -- binary of preview file
  TEMPLATE BYTEA NULL, -- text with template as a JSON
  AUTHOR VARCHAR(100) NULL,
  USAGE_COUNTER INT NULL, -- counter to see how many times the widgets was used
  USER_IN    VARCHAR(100) NOT NULL,
  USER_UP    VARCHAR(100),
  USER_DE    VARCHAR(100),
  TIME_IN    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  TIME_UP    TIMESTAMP NULL DEFAULT NULL,    
  TIME_DE    TIMESTAMP NULL DEFAULT NULL,
  SBI_VERSION_IN  VARCHAR(10),
  SBI_VERSION_UP  VARCHAR(10),
  SBI_VERSION_DE  VARCHAR(10),
  ORGANIZATION    VARCHAR(20),
  UNIQUE (NAME, ORGANIZATION),
  PRIMARY KEY (UUID, ORGANIZATION)
);

CREATE TABLE SBI_WIDGET_GALLERY_TAGS (
  WIDGET_ID CHAR(36) NOT NULL, -- widget id reference
  TAG VARCHAR(50) NOT NULL, -- tag name
  USER_IN    VARCHAR(100) NOT NULL,
  USER_UP    VARCHAR(100),
  USER_DE    VARCHAR(100),
  TIME_IN    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  TIME_UP    TIMESTAMP NULL DEFAULT NULL,    
  TIME_DE    TIMESTAMP NULL DEFAULT NULL,
  SBI_VERSION_IN  VARCHAR(10),
  SBI_VERSION_UP  VARCHAR(10),
  SBI_VERSION_DE  VARCHAR(10),
  ORGANIZATION    VARCHAR(20),
  PRIMARY KEY (WIDGET_ID, TAG, ORGANIZATION),
  CONSTRAINT FK_SBI_WIDGET_GALLERY_TAGS_1 FOREIGN KEY (WIDGET_ID, ORGANIZATION) REFERENCES SBI_WIDGET_GALLERY (UUID, ORGANIZATION) ON DELETE CASCADE
);

-- 21/06/2021
-- CATALOG FUNCTION REFACTORING - SUPPORT FOR UUIDS

-- DROP OLD FOREIGN KEYS
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE DROP FOREIGN KEY FK_FUNCTION_INPUT_VARIABLES_1;
ALTER TABLE SBI_FUNCTION_INPUT_COLUMN DROP FOREIGN KEY FK_FUNCTION_INPUT_COLUMNS_1;
ALTER TABLE SBI_FUNCTION_OUTPUT_COLUMN DROP FOREIGN KEY FK_FUNCTION_OUTPUT_COLUMNS_1;
ALTER TABLE SBI_OBJ_FUNCTION DROP FOREIGN KEY FK_SBI_OBJ_FUNCTION_1;

-- DROP OLD PRIMARY KEYS
ALTER TABLE SBI_CATALOG_FUNCTION DROP PRIMARY KEY;
ALTER TABLE SBI_FUNCTION_INPUT_COLUMN DROP PRIMARY KEY;
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE DROP PRIMARY KEY;
ALTER TABLE SBI_FUNCTION_OUTPUT_COLUMN DROP PRIMARY KEY;
ALTER TABLE SBI_OBJ_FUNCTION DROP KEY XAK1SBI_OBJ_FUNCTION;

-- ADD NEW UUID COLUMN
ALTER TABLE SBI_CATALOG_FUNCTION ADD COLUMN FUNCTION_UUID VARCHAR(36) FIRST;
ALTER TABLE SBI_FUNCTION_INPUT_COLUMN ADD COLUMN FUNCTION_UUID VARCHAR(36) FIRST;
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE ADD COLUMN FUNCTION_UUID VARCHAR(36) FIRST;
ALTER TABLE SBI_FUNCTION_OUTPUT_COLUMN ADD COLUMN FUNCTION_UUID VARCHAR(36) FIRST;
ALTER TABLE SBI_OBJ_FUNCTION ADD COLUMN FUNCTION_UUID VARCHAR(36) FIRST;

-- CONVERT ID TO UUID
DROP PROCEDURE IF EXISTS GENERATE_KNOWAGE_FUNCTIONS_CATALOG_UUIDS;
SET SQL_SAFE_UPDATES = 0;
DELIMITER //
CREATE PROCEDURE GENERATE_KNOWAGE_FUNCTIONS_CATALOG_UUIDS()
BEGIN
	DECLARE done BOOLEAN DEFAULT FALSE;
	DECLARE _function_id INTEGER;
	DECLARE cur CURSOR FOR SELECT FUNCTION_ID FROM SBI_CATALOG_FUNCTION;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done := TRUE;

	OPEN cur;

	functionLoop: LOOP
		FETCH cur INTO _function_id;
		IF done THEN
			LEAVE functionLoop;
		END IF;
        SELECT UUID() INTO @uuid;
        UPDATE SBI_CATALOG_FUNCTION SET FUNCTION_UUID=@uuid WHERE FUNCTION_ID=_function_id;
        UPDATE SBI_FUNCTION_INPUT_VARIABLE SET FUNCTION_UUID=@uuid WHERE FUNCTION_ID=_function_id;
        UPDATE SBI_FUNCTION_INPUT_COLUMN SET FUNCTION_UUID=@uuid WHERE FUNCTION_ID=_function_id;
        UPDATE SBI_FUNCTION_OUTPUT_COLUMN SET FUNCTION_UUID=@uuid WHERE FUNCTION_ID=_function_id;
        UPDATE SBI_OBJ_FUNCTION SET FUNCTION_UUID=@uuid WHERE FUNCTION_ID=_function_id;
	END LOOP functionLoop;
    
	CLOSE cur;
END //
DELIMITER ;
CALL GENERATE_KNOWAGE_FUNCTIONS_CATALOG_UUIDS();
SET SQL_SAFE_UPDATES = 1;
DROP PROCEDURE GENERATE_KNOWAGE_FUNCTIONS_CATALOG_UUIDS;

-- CREATE NEW PRIMARY KEYS
ALTER TABLE SBI_CATALOG_FUNCTION ADD CONSTRAINT PK_SBI_CATALOG_FUNCTION PRIMARY KEY(FUNCTION_UUID, ORGANIZATION);
ALTER TABLE SBI_FUNCTION_INPUT_COLUMN ADD CONSTRAINT PK_SBI_FUNCTION_INPUT_COLUMN PRIMARY KEY(FUNCTION_UUID, COL_NAME, ORGANIZATION);
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE ADD CONSTRAINT PK_SBI_FUNCTION_INPUT_VARIABLE PRIMARY KEY(FUNCTION_UUID, VAR_NAME, ORGANIZATION);
ALTER TABLE SBI_FUNCTION_OUTPUT_COLUMN ADD CONSTRAINT PK_SBI_FUNCTION_OUTPUT_COLUMN PRIMARY KEY(FUNCTION_UUID, COL_NAME, ORGANIZATION);
ALTER TABLE SBI_OBJ_FUNCTION ADD CONSTRAINT XAK1SBI_OBJ_FUNCTION UNIQUE(BIOBJ_ID, FUNCTION_UUID, ORGANIZATION);

-- CREATE NEW FOREIGN KEYS
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE 	ADD CONSTRAINT FK_FUNCTION_INPUT_VARIABLES_1  		FOREIGN KEY (FUNCTION_UUID) 			REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_UUID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_FUNCTION_INPUT_COLUMN	 	ADD CONSTRAINT FK_FUNCTION_INPUT_COLUMNS_1  		FOREIGN KEY (FUNCTION_UUID) 			REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_UUID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_FUNCTION_OUTPUT_COLUMN	 	ADD CONSTRAINT FK_FUNCTION_OUTPUT_COLUMNS_1  		FOREIGN KEY (FUNCTION_UUID) 			REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_UUID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;

-- DROP OLD ID COLUMNS
ALTER TABLE SBI_CATALOG_FUNCTION DROP COLUMN FUNCTION_ID;
ALTER TABLE SBI_FUNCTION_INPUT_COLUMN DROP COLUMN FUNCTION_ID;
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE DROP COLUMN FUNCTION_ID;
ALTER TABLE SBI_FUNCTION_OUTPUT_COLUMN DROP COLUMN FUNCTION_ID;
ALTER TABLE SBI_OBJ_FUNCTION DROP COLUMN FUNCTION_ID;

-- 2021/07/26
ALTER TABLE SBI_ALERT_ACTION DROP COLUMN TEMPLATE CASCADE;
ALTER TABLE SBI_ALERT_LISTENER DROP COLUMN TEMPLATE CASCADE;

-- 2021/08/27
-- UPDATED SBI_EXT_USER_ROLES ORGANIZATION FIELD WHERE NULL
UPDATE SBI_EXT_USER_ROLES SET ORGANIZATION = (SELECT ORGANIZATION FROM SBI_USER WHERE ID = SBI_EXT_USER_ROLES.ID), TIME_UP = CURRENT_TIMESTAMP 

--2021/10/14
ALTER TABLE SBI_DATA_SET ADD column DS_DERIVED_ID INTEGER;
WHERE SBI_EXT_USER_ROLES.ORGANIZATION IS NULL;

-- 2022/02/08
CREATE TABLE SBI_ORGANIZATION_THEME (
	UUID BPCHAR(36) NOT NULL,
	ORGANIZATION_ID INT4 NOT NULL,
	THEME_NAME VARCHAR NOT NULL,
	CONFIG TEXT NULL,
	ACTIVE BOOL NULL DEFAULT FALSE,
	USER_IN VARCHAR(100) NOT NULL,
	USER_UP VARCHAR(100) NULL DEFAULT NULL::CHARACTER VARYING,
	USER_DE VARCHAR(100) NULL DEFAULT NULL::CHARACTER VARYING,
	TIME_IN TIMESTAMP NULL,
	TIME_UP TIMESTAMP NULL,
	TIME_DE TIMESTAMP NULL,
	SBI_VERSION_IN VARCHAR(10) NULL DEFAULT NULL::CHARACTER VARYING,
	SBI_VERSION_UP VARCHAR(10) NULL DEFAULT NULL::CHARACTER VARYING,
	SBI_VERSION_DE VARCHAR(10) NULL DEFAULT NULL::CHARACTER VARYING,
	META_VERSION VARCHAR(100) NULL DEFAULT NULL::CHARACTER VARYING,
	ORGANIZATION VARCHAR(20) NOT NULL DEFAULT NULL::CHARACTER VARYING,
	CONSTRAINT "PK_SBI_ORGANIZATION_THEME" PRIMARY KEY (UUID, ORGANIZATION),
	CONSTRAINT FK_ORGANIZATION_1 FOREIGN KEY (ORGANIZATION_ID) REFERENCES SBI_ORGANIZATIONS(ID)
);
