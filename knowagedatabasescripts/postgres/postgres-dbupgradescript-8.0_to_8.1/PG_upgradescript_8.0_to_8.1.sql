-- 2021/07/26
ALTER TABLE SBI_ALERT_ACTION DROP COLUMN TEMPLATE CASCADE;
ALTER TABLE SBI_ALERT_LISTENER DROP COLUMN TEMPLATE CASCADE;

-- 2022/02/08
CREATE TABLE SBI_ORGANIZATION_THEME (
	UUID BPCHAR(36) NOT NULL,
	ORGANIZATION_ID INT4 NOT NULL,
	THEME_NAME VARCHAR NOT NULL,
	CONFIG TEXT NULL,
	ACTIVE BOOL NULL DEFAULT FALSE,
	USER_IN VARCHAR(100) NOT NULL,
	USER_UP VARCHAR(100) NULL DEFAULT NULL::CHARACTER VARYING,
	USER_DE VARCHAR(100) NULL DEFAULT NULL::CHARACTER VARYING,
	TIME_IN TIMESTAMP NULL,
	TIME_UP TIMESTAMP NULL,
	TIME_DE TIMESTAMP NULL,
	SBI_VERSION_IN VARCHAR(10) NULL DEFAULT NULL::CHARACTER VARYING,
	SBI_VERSION_UP VARCHAR(10) NULL DEFAULT NULL::CHARACTER VARYING,
	SBI_VERSION_DE VARCHAR(10) NULL DEFAULT NULL::CHARACTER VARYING,
	META_VERSION VARCHAR(100) NULL DEFAULT NULL::CHARACTER VARYING,
	ORGANIZATION VARCHAR(20) NOT NULL DEFAULT NULL::CHARACTER VARYING,
	CONSTRAINT "PK_SBI_ORGANIZATION_THEME" PRIMARY KEY (UUID, ORGANIZATION),
	CONSTRAINT FK_ORGANIZATION_1 FOREIGN KEY (ORGANIZATION_ID) REFERENCES SBI_ORGANIZATIONS(ID)
);

ALTER TABLE SBI_WIDGET_GALLERY ADD LABEL VARCHAR(200);
UPDATE SBI_WIDGET_GALLERY SET LABEL = NAME;
ALTER TABLE SBI_WIDGET_GALLERY ALTER COLUMN LABEL SET NOT NULL;

-- 2022/03/10 : Data preparation
ALTER TABLE SBI_DATA_SOURCE ADD USE_FOR_DATAPREP BOOLEAN DEFAULT FALSE;

-- 2022/03/10 : Update to Quartz 2.3
DROP PROCEDURE IF EXISTS CLEAR_INDEXES ;

CREATE OR REPLACE PROCEDURE CLEAR_INDEXES(mytablename VARCHAR)
LANGUAGE plpgsql
AS $$
DECLARE temprow record;
begin
	FOR temprow in (
		SELECT
			indexname 
		FROM
			pg_catalog.pg_indexes
		WHERE 
			schemaname = current_schema()
			AND tablename = mytablename
			AND indexname LIKE 'idx_%') LOOP

	     if (temprow is not NULL) then 
	     	EXECUTE CONCAT('DROP INDEX ', temprow.indexname, ';' );
		    commit;
		 end if;
	end loop;
end;
$$;

CALL CLEAR_INDEXES('QRTZ_BLOB_TRIGGERS');
CALL CLEAR_INDEXES('QRTZ_CALENDARS');
CALL CLEAR_INDEXES('QRTZ_CRON_TRIGGERS');
CALL CLEAR_INDEXES('QRTZ_FIRED_TRIGGERS');
CALL CLEAR_INDEXES('QRTZ_JOB_DETAILS');
CALL CLEAR_INDEXES('QRTZ_LOCKS');
CALL CLEAR_INDEXES('QRTZ_PAUSED_TRIGGER_GRPS');
CALL CLEAR_INDEXES('QRTZ_SCHEDULER_STATE');
CALL CLEAR_INDEXES('QRTZ_SIMPLE_TRIGGERS');
CALL CLEAR_INDEXES('QRTZ_SIMPROP_TRIGGERS');
CALL CLEAR_INDEXES('QRTZ_TRIGGERS');

DROP PROCEDURE CLEAR_INDEXES;

CREATE OR REPLACE PROCEDURE DROP_FK_WITH_UNKNOW_NAME(mytablename VARCHAR)
LANGUAGE plpgsql
AS $$
DECLARE temprow record;
begin
	FOR temprow in (
		SELECT
		    tc.constraint_name
		FROM 
		    information_schema.table_constraints AS tc 
		WHERE
			tc.constraint_type = 'FOREIGN KEY'
			AND tc.table_name = lower(mytablename) ) LOOP

	     if (temprow is not NULL) then 
	     	EXECUTE CONCAT('ALTER TABLE ', mytablename, ' DROP CONSTRAINT ' , temprow.constraint_name, ';' );
		    commit;
		 end if;
	end loop;
end;
$$;

CREATE OR REPLACE PROCEDURE DROP_PK_WITH_UNKNOWN_NAME(mytablename VARCHAR)
LANGUAGE plpgsql
AS $$
DECLARE temprow record;
begin
	FOR temprow in (
		SELECT
			* 
		FROM
			information_schema.table_constraints tc 
		WHERE
			constraint_type = 'PRIMARY KEY'
			AND tc.table_name = lower(mytablename) ) LOOP

	     if (temprow is not NULL) then 
	     	EXECUTE CONCAT('ALTER TABLE ', mytablename, ' DROP CONSTRAINT ' , temprow.constraint_name, ';' );
		    commit;
		 end if;
	end loop;
end;
$$;



DROP TABLE QRTZ_JOB_LISTENERS;
DROP TABLE QRTZ_TRIGGER_LISTENERS;

ALTER TABLE QRTZ_JOB_DETAILS    DROP COLUMN IS_VOLATILE;
ALTER TABLE QRTZ_TRIGGERS       DROP COLUMN IS_VOLATILE;
ALTER TABLE QRTZ_FIRED_TRIGGERS DROP COLUMN IS_VOLATILE;

ALTER TABLE QRTZ_JOB_DETAILS ADD COLUMN IS_NONCONCURRENT BOOL;
ALTER TABLE QRTZ_JOB_DETAILS ADD COLUMN IS_UPDATE_DATA BOOL;
UPDATE QRTZ_JOB_DETAILS SET IS_NONCONCURRENT = IS_STATEFUL;
UPDATE QRTZ_JOB_DETAILS SET IS_UPDATE_DATA = IS_STATEFUL;
ALTER TABLE QRTZ_JOB_DETAILS DROP COLUMN IS_STATEFUL;
ALTER TABLE QRTZ_FIRED_TRIGGERS ADD COLUMN IS_NONCONCURRENT BOOL;
UPDATE QRTZ_FIRED_TRIGGERS SET IS_NONCONCURRENT = IS_STATEFUL;
ALTER TABLE QRTZ_FIRED_TRIGGERS DROP COLUMN IS_STATEFUL;

ALTER TABLE QRTZ_BLOB_TRIGGERS       ADD COLUMN SCHED_NAME VARCHAR(120) NOT NULL DEFAULT 'DefaultQuartzScheduler';
ALTER TABLE QRTZ_CALENDARS           ADD COLUMN SCHED_NAME VARCHAR(120) NOT NULL DEFAULT 'DefaultQuartzScheduler';
ALTER TABLE QRTZ_CRON_TRIGGERS       ADD COLUMN SCHED_NAME VARCHAR(120) NOT NULL DEFAULT 'DefaultQuartzScheduler';
ALTER TABLE QRTZ_FIRED_TRIGGERS      ADD COLUMN SCHED_NAME VARCHAR(120) NOT NULL DEFAULT 'DefaultQuartzScheduler';
ALTER TABLE QRTZ_JOB_DETAILS         ADD COLUMN SCHED_NAME VARCHAR(120) NOT NULL DEFAULT 'DefaultQuartzScheduler';
ALTER TABLE QRTZ_LOCKS               ADD COLUMN SCHED_NAME VARCHAR(120) NOT NULL DEFAULT 'DefaultQuartzScheduler';
ALTER TABLE QRTZ_PAUSED_TRIGGER_GRPS ADD COLUMN SCHED_NAME VARCHAR(120) NOT NULL DEFAULT 'DefaultQuartzScheduler';
ALTER TABLE QRTZ_SCHEDULER_STATE     ADD COLUMN SCHED_NAME VARCHAR(120) NOT NULL DEFAULT 'DefaultQuartzScheduler';
ALTER TABLE QRTZ_SIMPLE_TRIGGERS     ADD COLUMN SCHED_NAME VARCHAR(120) NOT NULL DEFAULT 'DefaultQuartzScheduler';
ALTER TABLE QRTZ_TRIGGERS            ADD COLUMN SCHED_NAME VARCHAR(120) NOT NULL DEFAULT 'DefaultQuartzScheduler';

ALTER TABLE QRTZ_FIRED_TRIGGERS ADD COLUMN SCHED_TIME BIGINT NOT NULL;

CALL DROP_FK_WITH_UNKNOW_NAME('QRTZ_TRIGGERS');

CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_BLOB_TRIGGERS');
CALL DROP_FK_WITH_UNKNOW_NAME('QRTZ_BLOB_TRIGGERS');

CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_SIMPLE_TRIGGERS');
CALL DROP_FK_WITH_UNKNOW_NAME('QRTZ_SIMPLE_TRIGGERS');

CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_CRON_TRIGGERS');
CALL DROP_FK_WITH_UNKNOW_NAME('QRTZ_CRON_TRIGGERS');

CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_JOB_DETAILS');

ALTER TABLE QRTZ_JOB_DETAILS ADD PRIMARY KEY (SCHED_NAME, JOB_NAME, JOB_GROUP);

CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_TRIGGERS');

-- Fix length of TRIGGER_GROUP, TRIGGER_NAME, JOB_GROUP and JOB_NAME: we saw a lot of different sizes 
ALTER TABLE QRTZ_BLOB_TRIGGERS       ALTER COLUMN TRIGGER_GROUP TYPE VARCHAR(120);
ALTER TABLE QRTZ_BLOB_TRIGGERS       ALTER COLUMN TRIGGER_NAME  TYPE VARCHAR(120);
ALTER TABLE QRTZ_CRON_TRIGGERS       ALTER COLUMN TRIGGER_GROUP TYPE VARCHAR(120);
ALTER TABLE QRTZ_CRON_TRIGGERS       ALTER COLUMN TRIGGER_NAME  TYPE VARCHAR(120);
ALTER TABLE QRTZ_FIRED_TRIGGERS      ALTER COLUMN JOB_GROUP     TYPE VARCHAR(120);
ALTER TABLE QRTZ_FIRED_TRIGGERS      ALTER COLUMN JOB_NAME      TYPE VARCHAR(120);
ALTER TABLE QRTZ_FIRED_TRIGGERS      ALTER COLUMN TRIGGER_GROUP TYPE VARCHAR(120);
ALTER TABLE QRTZ_FIRED_TRIGGERS      ALTER COLUMN TRIGGER_NAME  TYPE VARCHAR(120);
ALTER TABLE QRTZ_JOB_DETAILS         ALTER COLUMN JOB_GROUP     TYPE VARCHAR(120);
ALTER TABLE QRTZ_JOB_DETAILS         ALTER COLUMN JOB_NAME      TYPE VARCHAR(120);
ALTER TABLE QRTZ_PAUSED_TRIGGER_GRPS ALTER COLUMN TRIGGER_GROUP TYPE VARCHAR(120);
ALTER TABLE QRTZ_SIMPLE_TRIGGERS     ALTER COLUMN TRIGGER_GROUP TYPE VARCHAR(120);
ALTER TABLE QRTZ_SIMPLE_TRIGGERS     ALTER COLUMN TRIGGER_NAME  TYPE VARCHAR(120);
ALTER TABLE QRTZ_TRIGGERS            ALTER COLUMN JOB_GROUP     TYPE VARCHAR(120);
ALTER TABLE QRTZ_TRIGGERS            ALTER COLUMN JOB_NAME      TYPE VARCHAR(120);
ALTER TABLE QRTZ_TRIGGERS            ALTER COLUMN TRIGGER_GROUP TYPE VARCHAR(120);
ALTER TABLE QRTZ_TRIGGERS            ALTER COLUMN TRIGGER_NAME  TYPE VARCHAR(120);
ALTER TABLE SBI_TRIGGER_PAUSED       ALTER COLUMN JOB_GROUP     TYPE VARCHAR(120);
ALTER TABLE SBI_TRIGGER_PAUSED       ALTER COLUMN JOB_NAME      TYPE VARCHAR(120);
ALTER TABLE SBI_TRIGGER_PAUSED       ALTER COLUMN TRIGGER_GROUP TYPE VARCHAR(120);
ALTER TABLE SBI_TRIGGER_PAUSED       ALTER COLUMN TRIGGER_NAME  TYPE VARCHAR(120);

ALTER TABLE QRTZ_TRIGGERS            ADD PRIMARY KEY                           (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
ALTER TABLE QRTZ_TRIGGERS            ADD FOREIGN KEY                           (SCHED_NAME, JOB_NAME, JOB_GROUP)          REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME, JOB_NAME, JOB_GROUP);
ALTER TABLE QRTZ_BLOB_TRIGGERS       ADD PRIMARY KEY                           (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
ALTER TABLE QRTZ_BLOB_TRIGGERS       ADD FOREIGN KEY                           (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
ALTER TABLE QRTZ_CRON_TRIGGERS       ADD PRIMARY KEY                           (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
ALTER TABLE QRTZ_CRON_TRIGGERS       ADD FOREIGN KEY                           (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
ALTER TABLE QRTZ_SIMPLE_TRIGGERS     ADD PRIMARY KEY                           (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
ALTER TABLE QRTZ_SIMPLE_TRIGGERS     ADD FOREIGN KEY                           (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);

CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_FIRED_TRIGGERS');
CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_FIRED_TRIGGERS');
CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_CALENDARS');
CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_CALENDARS');
CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_LOCKS');
CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_LOCKS');
CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_PAUSED_TRIGGER_GRPS');
CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_PAUSED_TRIGGER_GRPS');
CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_SCHEDULER_STATE');
CALL DROP_PK_WITH_UNKNOWN_NAME('QRTZ_SCHEDULER_STATE');

CREATE TABLE QRTZ_SIMPROP_TRIGGERS
(
  SCHED_NAME    VARCHAR(120)   NOT NULL,
  TRIGGER_NAME  VARCHAR(120)   NOT NULL,
  TRIGGER_GROUP VARCHAR(120)   NOT NULL,
  STR_PROP_1    VARCHAR(512)   NULL,
  STR_PROP_2    VARCHAR(512)   NULL,
  STR_PROP_3    VARCHAR(512)   NULL,
  INT_PROP_1    INT            NULL,
  INT_PROP_2    INT            NULL,
  LONG_PROP_1   BIGINT         NULL,
  LONG_PROP_2   BIGINT         NULL,
  DEC_PROP_1    NUMERIC(13, 4) NULL,
  DEC_PROP_2    NUMERIC(13, 4) NULL,
  BOOL_PROP_1   BOOL           NULL,
  BOOL_PROP_2   BOOL           NULL,
  PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
  FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
  REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);


CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY        ON QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_J_GRP                 ON QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_J                   ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_JG                  ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_C                   ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);
CREATE INDEX IDX_QRTZ_T_G                   ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_T_STATE               ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_STATE             ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_G_STATE           ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME      ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST              ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE         ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE      ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP  ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME     ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);
CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_FT_J_G                ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_JG                 ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_T_G                ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_FT_TG                 ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);

DROP PROCEDURE IF EXISTS DROP_FK_WITH_UNKNOW_NAME;
DROP PROCEDURE IF EXISTS DROP_PK_WITH_UNKNOWN_NAME;

-- 2022/06/17 : Add events table
CREATE TABLE SBI_ES (
	ORGANIZATION VARCHAR(20)  NOT NULL,
	"TIMESTAMP"  TIMESTAMP    NOT NULL,
	PROG         BIGINT       NOT NULL,
	"TYPE"       VARCHAR(100) NOT NULL,
	ID           CHAR(100)    NOT NULL,
	EVENT_ID     CHAR(36)     NOT NULL,
	"EVENT"      CHAR(100)    NOT NULL,
	"DATA"       TEXT         NOT NULL,
	CONSTRAINT "SBI_ES_PK" PRIMARY KEY (prog),
	CONSTRAINT "XAK1SBI_ES" UNIQUE (event_id)
);
CREATE INDEX SBI_ES_ORGANIZATION_IDX ON SBI_ES (ORGANIZATION,"TIMESTAMP",ID);

-- 2022/07/07 moving categories from SBI_DOMAINS into SBI_CATEGORY
CREATE TABLE SBI_CATEGORY (
	    ID 					INTEGER NOT NULL,
	    CODE                 VARCHAR(100),
	    NAME   				VARCHAR(100),
	    CATEGORY_TYPE		VARCHAR(100),
		USER_IN VARCHAR(100) NOT NULL,
		USER_UP VARCHAR(100) NULL DEFAULT NULL::CHARACTER VARYING,
		USER_DE VARCHAR(100) NULL DEFAULT NULL::CHARACTER VARYING,
		TIME_IN TIMESTAMP NULL,
		TIME_UP TIMESTAMP NULL,
		TIME_DE TIMESTAMP NULL,
		SBI_VERSION_IN VARCHAR(10) NULL DEFAULT NULL::CHARACTER VARYING,
		SBI_VERSION_UP VARCHAR(10) NULL DEFAULT NULL::CHARACTER VARYING,
		SBI_VERSION_DE VARCHAR(10) NULL DEFAULT NULL::CHARACTER VARYING,
		META_VERSION VARCHAR(100) NULL DEFAULT NULL::CHARACTER VARYING,
		ORGANIZATION VARCHAR(20) NOT NULL DEFAULT NULL::CHARACTER VARYING,
	    CONSTRAINT "U_SBI_CATEGORY_CODE" UNIQUE (CODE, CATEGORY_TYPE, ORGANIZATION),
	    CONSTRAINT "U_SBI_CATEGORY_NAME" UNIQUE (NAME, CATEGORY_TYPE, ORGANIZATION),
		CONSTRAINT "SBI_CATEGORY_PK" PRIMARY KEY (ID)
);

INSERT INTO SBI_CATEGORY (ID, CODE, NAME, CATEGORY_TYPE, USER_IN, USER_UP, TIME_IN, TIME_UP, SBI_VERSION_IN, SBI_VERSION_UP, ORGANIZATION)
SELECT 
    row_number() OVER ()  AS ID,
    d.VALUE_CD AS CODE,
    d.VALUE_NM AS NAME,
	d.DOMAIN_CD AS CATEGORY_TYPE,
	d.USER_IN AS USER_IN,
	d.USER_UP AS USER_UP,
	d.TIME_IN AS TIME_IN,
	d.TIME_UP AS TIME_UP,
	d.SBI_VERSION_IN AS SBI_VERSION_IN,
	d.SBI_VERSION_UP AS SBI_VERSION_UP,
    o.NAME AS ORGANIZATION
FROM
    SBI_DOMAINS d
    cross join SBI_ORGANIZATIONS o
WHERE
    domain_cd IN (
		'CATEGORY_TYPE', 
		'BM_CATEGORY',
        'GEO_CATEGORY',
        'KPI_KPI_CATEGORY',
        'KPI_TARGET_CATEGORY',
        'KPI_MEASURE_CATEGORY');

COMMIT;

ALTER TABLE SBI_DATA_SET DROP CONSTRAINT FK_DATA_SET_CATEGORY;

UPDATE SBI_DATA_SET ds SET CATEGORY_ID = ( 
select c.ID from SBI_CATEGORY c,SBI_DOMAINS d
where 	ds.CATEGORY_ID=d.VALUE_ID 
		and c.CODE = d.VALUE_CD 
		and c.CATEGORY_TYPE = d.DOMAIN_CD 
		and ds.ORGANIZATION=c.ORGANIZATION );


COMMIT;

ALTER TABLE SBI_DATA_SET ADD CONSTRAINT FK_DATA_SET_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_CATEGORY(ID);

ALTER TABLE SBI_META_MODELS DROP CONSTRAINT FK_META_MODELS_CATEGORY;

UPDATE 
	SBI_META_MODELS mm
SET 
	CATEGORY_ID = (select c.ID from SBI_CATEGORY c,SBI_DOMAINS d
where 	d.VALUE_ID = mm.CATEGORY_ID 
		and c.CODE = d.VALUE_CD
		and c.CATEGORY_TYPE = d.DOMAIN_CD 
		and c.ORGANIZATION = mm.ORGANIZATION );

COMMIT;

ALTER TABLE SBI_META_MODELS ADD CONSTRAINT FK_META_MODELS_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_CATEGORY (ID);

-- FK for GEO layers was missing

UPDATE 
	SBI_GEO_LAYERS gl
SET 
	GEO_CATEGORY = ( select c.ID	
from 
	SBI_DOMAINS d, SBI_CATEGORY c
where d.VALUE_ID = gl.GEO_CATEGORY
and c.CODE = d.VALUE_CD 
and c.CATEGORY_TYPE = d.DOMAIN_CD 
and c.ORGANIZATION = gl.ORGANIZATION);

COMMIT;

ALTER TABLE SBI_GEO_LAYERS ADD CONSTRAINT FK_SBI_GEO_LAYERS_CATEGORY FOREIGN KEY (GEO_CATEGORY) REFERENCES SBI_CATEGORY(ID);

ALTER TABLE SBI_KPI_KPI DROP CONSTRAINT FK_01_SBI_KPI_KPI;

UPDATE 
	SBI_KPI_KPI kk
SET 
	CATEGORY_ID = (select c.ID from	SBI_DOMAINS d ,SBI_CATEGORY c
where d.VALUE_ID = kk.CATEGORY_ID
and c.CODE = d.VALUE_CD 
and c.CATEGORY_TYPE = d.DOMAIN_CD 
and c.ORGANIZATION = kk.ORGANIZATION);

COMMIT;

ALTER TABLE SBI_KPI_KPI ADD CONSTRAINT FK_01_SBI_KPI_KPI FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_CATEGORY(ID);

ALTER TABLE SBI_KPI_TARGET DROP CONSTRAINT FK_03_SBI_KPI_TARGET;

UPDATE 
	SBI_KPI_TARGET kt
SET 
	CATEGORY_ID = (select c.ID from SBI_DOMAINS d,SBI_CATEGORY c	
where d.VALUE_ID = kt.CATEGORY_ID
and c.CODE = d.VALUE_CD 
and c.CATEGORY_TYPE = d.DOMAIN_CD 
and c.ORGANIZATION = kt.ORGANIZATION);

COMMIT;

ALTER TABLE SBI_KPI_TARGET ADD CONSTRAINT FK_03_SBI_KPI_TARGET FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_CATEGORY (ID);

ALTER TABLE SBI_KPI_RULE_OUTPUT DROP CONSTRAINT FK_04_SBI_KPI_RULE_OUTPUT;

UPDATE 
	SBI_KPI_RULE_OUTPUT kro
SET 
	CATEGORY_ID = ( select c.ID from SBI_DOMAINS d,SBI_CATEGORY c
where d.VALUE_ID = kro.CATEGORY_ID
and c.CODE = d.VALUE_CD 
and c.CATEGORY_TYPE = d.DOMAIN_CD 
and c.ORGANIZATION = kro.ORGANIZATION);

COMMIT;

ALTER TABLE SBI_KPI_RULE_OUTPUT ADD CONSTRAINT FK_04_SBI_KPI_RULE_OUTPUT FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_CATEGORY (ID);

ALTER TABLE SBI_EXT_ROLES_CATEGORY DROP CONSTRAINT FK_SB_EXT_ROLES_META_MODEL_CATEGORY_1;

ALTER TABLE SBI_EXT_ROLES_CATEGORY DROP CONSTRAINT FK_SB_EXT_ROLES_META_MODEL_CATEGORY_2;

ALTER TABLE SBI_EXT_ROLES_CATEGORY DROP CONSTRAINT SBI_EXT_ROLES_CATEGORY_pkey;

UPDATE 
	SBI_EXT_ROLES_CATEGORY erc
SET 
	CATEGORY_ID = ( select c.ID from SBI_DOMAINS d,	SBI_EXT_ROLES er,SBI_CATEGORY c
where   d.VALUE_ID = erc.CATEGORY_ID
and er.EXT_ROLE_ID = erc.EXT_ROLE_ID
and c.CODE = d.VALUE_CD and c.CATEGORY_TYPE = d.DOMAIN_CD and c.ORGANIZATION = er.ORGANIZATION)

COMMIT;

ALTER TABLE SBI_EXT_ROLES_CATEGORY ADD PRIMARY KEY(EXT_ROLE_ID,CATEGORY_ID);


ALTER TABLE SBI_EXT_ROLES_CATEGORY ADD CONSTRAINT FK_SB_EXT_ROLES_META_MODEL_CATEGORY_1 FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID);

ALTER TABLE SBI_EXT_ROLES_CATEGORY ADD CONSTRAINT FK_SB_EXT_ROLES_META_MODEL_CATEGORY_2 FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_CATEGORY(ID);


insert into hibernate_sequences(next_val,sequence_name) values ((select max(ID)+1 from SBI_CATEGORY) ,'SBI_CATEGORY');
COMMIT;

DELETE 
FROM 
	SBI_DOMAINS 
WHERE
    domain_cd IN (
		'CATEGORY_TYPE', 
		'BM_CATEGORY',
        'GEO_CATEGORY',
        'KPI_KPI_CATEGORY',
        'KPI_TARGET_CATEGORY',
        'KPI_MEASURE_CATEGORY');

COMMIT;

UPDATE SBI_CATEGORY SET CATEGORY_TYPE = 'DATASET_CATEGORY' WHERE CATEGORY_TYPE = 'CATEGORY_TYPE';
COMMIT;

-- 17/10/2022 Alberto Nale
ALTER TABLE SBI_DOSSIER_ACTIVITY ADD PPT_V2 bytea NULL;

ALTER TABLE SBI_FUNCTIONS ALTER COLUMN NAME TYPE VARCHAR(100);
ALTER TABLE SBI_FUNCTIONS ALTER COLUMN CODE TYPE VARCHAR(100);