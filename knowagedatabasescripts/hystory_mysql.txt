Every items must have:
- The Developer who has made the change
- The SQL script that updates the schema ( schema, index and FK )
- The Date

###################################################################################################
- DBMS changes After 2.0
- Angelo
- 27/02/2009

ALTER TABLE `spagobi`.`sbi_audit` MODIFY COLUMN `DOC_PARAMETERS` TEXT CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL;

ALTER TABLE `spagobi`.`sbi_viewpoints` MODIFY COLUMN `VP_VALUE_PARAMS` TEXT CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL;

ALTER TABLE `spagobi`.`sbi_remember_me` MODIFY COLUMN `PARAMETERS` TEXT CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL;

ALTER TABLE `spagobi`.`sbi_data_set` MODIFY COLUMN `NUM_ROWS` BOOLEAN DEFAULT FALSE;

ALTER TABLE `spagobi`.`sbi_menu` MODIFY COLUMN `BIOBJ_PARAMETERS` TEXT CHARACTER SET latin1 COLLATE latin1_swedish_ci;

ALTER TABLE `spagobi`.`sbi_kpi` ADD COLUMN `kpi_type` INTEGER AFTER `flg_is_father`,
 ADD COLUMN `metric_scale_type` INTEGER AFTER `kpi_type`,
 ADD COLUMN `measure_type` INTEGER AFTER `metric_scale_type`,
 ADD COLUMN `interpretation` VARCHAR(1000) AFTER `measure_type`,
 ADD COLUMN `input_attributes` VARCHAR(1000) AFTER `interpretation`,
 ADD COLUMN `model_reference` VARCHAR(255) AFTER `input_attributes`,
 ADD COLUMN `target_audience` VARCHAR(1000) AFTER `model_reference`;


ALTER TABLE `spagobi`.`sbi_kpi_inst_period` CHANGE COLUMN `DEFAULT` `DEFAULT_VALUE` BOOLEAN DEFAULT NULL;

ALTER TABLE `spagobi`.`sbi_kpi_model_inst` ADD COLUMN `label` VARCHAR(100) BINARY NOT NULL AFTER `description`,
 ADD COLUMN `start_date` DATETIME AFTER `label`,
 ADD COLUMN `end_date` DATETIME AFTER `start_date`;


ALTER TABLE `spagobi`.`sbi_alarm_event` ADD COLUMN `KPI_DESCRIPTION` VARCHAR(100) AFTER `RESOURCES`,
 ADD COLUMN `RESOURCE_ID` INTEGER UNSIGNED AFTER `KPI_DESCRIPTION`,
 ADD COLUMN `KPI_INSTANCE_ID` INTEGER UNSIGNED AFTER `RESOURCE_ID`;


 CREATE UNIQUE INDEX XAK2SBI_KPI_MODEL_INST ON SBI_KPI_MODEL_INST
(
       LABEL						ASC
);

Alter table `SBI_KPI_INSTANCE` add Foreign Key (`KPI_ID`) references `SBI_KPI` (`KPI_ID`) on delete  restrict on update  restrict;

Alter table `SBI_KPI` add Foreign Key (`kpi_type`) references `SBI_DOMAINS` (`VALUE_ID`) on delete  restrict on update  restrict;
Alter table `SBI_KPI` add Foreign Key (`metric_scale_type`) references `SBI_DOMAINS` (`VALUE_ID`) on delete  restrict on update  restrict;
Alter table `SBI_KPI` add Foreign Key (`measure_type`) references `SBI_DOMAINS` (`VALUE_ID`) on delete  restrict on update  restrict;

ALTER TABLE `spagobi`.`sbi_data_set` ADD COLUMN `LANGUAGE_SCRIPT` VARCHAR(50) AFTER `num_rows`;

- gigavard
- 12/03/2009
ALTER TABLE `spagobi`.`sbi_domains` MODIFY COLUMN `VALUE_CD` VARCHAR(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;


- gigavard
- 13/03/2009
ALTER TABLE `spagobi`.`sbi_functions` MODIFY COLUMN `CODE` VARCHAR(40) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;

###################################################################################################
- DBMS changes After 2.1
- gigavard
- 20/04/2009
ALTER TABLE SBI_DATA_SOURCE MODIFY COLUMN `URL_CONNECTION` VARCHAR(500) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL;


 - gigavard
 - 29/04/2009

 ALTER TABLE `spagobi`.`SBI_ALARM` ADD UNIQUE INDEX `label_unique`(`LABEL`);

ALTER TABLE `spagobi`.`SBI_ALARM_CONTACT` ADD UNIQUE INDEX `name_unique`(`NAME`);

ALTER TABLE `spagobi`.`SBI_KPI` ADD UNIQUE INDEX `code_unique`(`code`);

ALTER TABLE `spagobi`.`SBI_KPI_MODEL` ADD UNIQUE INDEX `unique_kpi_model_cd`(`KPI_MODEL_CD`);

ALTER TABLE `spagobi`.`SBI_KPI_PERIODICITY` ADD UNIQUE INDEX `name_unique`(`name`);

ALTER TABLE `spagobi`.`SBI_THRESHOLD` ADD UNIQUE INDEX `code_unique`(`code`);

ALTER TABLE `spagobi`.`SBI_THRESHOLD_VALUE` ADD UNIQUE INDEX `label_thId_unique`(`label`, `THRESHOLD_ID`);

ALTER TABLE `spagobi`.`SBI_RESOURCES` ADD UNIQUE INDEX `unique_resource_name`(`RESOURCE_NAME`);



ALTER TABLE `spagobi`.`SBI_KPI_MODEL` MODIFY COLUMN `KPI_MODEL_CD` VARCHAR(40) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;

ALTER TABLE `spagobi`.`SBI_ALARM` MODIFY COLUMN `LABEL` VARCHAR(50) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;

ALTER TABLE `spagobi`.`SBI_KPI_PERIODICITY` MODIFY COLUMN `name` VARCHAR(400) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;

ALTER TABLE `spagobi`.`SBI_RESOURCES` MODIFY COLUMN `RESOURCE_NAME` VARCHAR(40) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;

ALTER TABLE `spagobi`.`SBI_THRESHOLD` MODIFY COLUMN `code` VARCHAR(45) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;

ALTER TABLE `spagobi`.`SBI_THRESHOLD_VALUE` MODIFY COLUMN `label` VARCHAR(20) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;


 - gigavard
 - 15/06/2009

 CREATE TABLE SBI_EXPORTERS (
  ENGINE_ID INTEGER NOT NULL,
  DOMAIN_ID INTEGER NOT NULL,
  DEFAULT_VALUE BOOLEAN,
  PRIMARY KEY (ENGINE_ID, DOMAIN_ID)) type = InnoDB;

CREATE UNIQUE INDEX XAK1SBI_EXPORTERS ON SBI_EXPORTERS
(
       ENGINE_ID                         ASC,
       DOMAIN_ID                          ASC
);

ALTER TABLE SBI_EXPORTERS ADD CONSTRAINT FK_sbi_exporters_domain FOREIGN KEY FK_sbi_exporters_domain ( DOMAIN_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID ) ON DELETE RESTRICT;
ALTER TABLE SBI_EXPORTERS ADD CONSTRAINT FK_sbi_exporters_engine FOREIGN KEY FK_sbi_exporters_engine ( ENGINE_ID ) REFERENCES SBI_ENGINES ( ENGINE_ID ) ON DELETE RESTRICT;

###################################################################################################
- DBMS changes After 2.2

- angelo
-31/07/09
ALTER TABLE SBI_DATA_SOURCE ADD COLUMN MULTI_SCHEMA TINYINT(1) NOT NULL DEFAULT '0';
ALTER TABLE SBI_DATA_SOURCE ADD COLUMN ATTR_SCHEMA VARCHAR(45) DEFAULT NULL;

- davide
-07/09/09
ALTER TABLE SBI_EXT_ROLES ADD COLUMN BUILD_QBE_QUERY BOOLEAN DEFAULT TRUE;

-chiara
-09/09/2009
ALTER TABLE SBI_KPI_VALUE ADD COLUMN XML_DATA TEXT;

###################################################################################################
- DBMS changes After 2.3

-giulio
-05/11/2009
ALTER TABLE SBI_DATA_SET ADD COLUMN DS_METADATA VARCHAR(2000) DEFAULT NULL;

-antonella
-12/11/2009
ALTER TABLE SBI_OBJECT_NOTES ADD COLUMN OWNER VARCHAR(50);
ALTER TABLE SBI_OBJECT_NOTES ADD COLUMN ISPUBLIC BOOLEAN;
ALTER TABLE SBI_OBJECT_NOTES ADD COLUMN CREATION_DATE TIMESTAMP NOT NULL;
ALTER TABLE SBI_OBJECT_NOTES ADD COLUMN LAST_CHANGE_DATE TIMESTAMP NOT NULL;

/* force a valid value for date fields in existing records: */
UPDATE SBI_OBJECT_NOTES SET LAST_CHANGE_DATE = NOW(),CREATION_DATE = NOW();

/* force a valid value for owner field in existing records:
***************************** ATTENTION **********************************
* The OWNER value depends from your context...
we suggest 'biadmin' because is the classic admin user in SpaogoBI demo:
you should change this value with a valid user in your platfrom, in this way
he may change or delete the EXISTING notes!!*/
UPDATE SBI_OBJECT_NOTES SET OWNER = 'biadmin';
/*************************************************************************/
COMMIT;

-19/11/2009
DELETE FROM SBI_REMEMBER_ME WHERE SUBOBJ_ID IN (SELECT SUBOBJ_ID FROM SBI_SUBOBJECTS WHERE NAME IS NULL OR NAME ='');
DELETE FROM SBI_AUDIT WHERE SUBOBJ_ID IN (SELECT SUBOBJ_ID FROM SBI_SUBOBJECTS WHERE NAME IS NULL OR NAME ='');
DELETE FROM SBI_MENU WHERE SUBOBJ_NAME IN (SELECT NAME FROM SBI_SUBOBJECTS WHERE NAME IS NULL OR NAME ='');
DELETE FROM SBI_BINARY_CONTENTS WHERE BIN_ID IN (SELECT BIN_ID FROM SBI_SUBOBJECTS WHERE NAME IS NULL OR NAME ='');
DELETE FROM SBI_SUBOBJECTS WHERE NAME IS NULL OR NAME ='';
COMMIT;
ALTER TABLE SBI_SUBOBJECTS MODIFY COLUMN NAME VARCHAR(50) NOT NULL;

-24/11/2009
ALTER TABLE SBI_OBJECTS DROP COLUMN DESCR_EXT;
ALTER TABLE SBI_OBJECTS DROP COLUMN OBJECTIVE;
ALTER TABLE SBI_OBJECTS DROP COLUMN LANGUAGE;
ALTER TABLE SBI_OBJECTS DROP COLUMN KEYWORDS;

ALTER TABLE SBI_EXT_ROLES ADD COLUMN SAVE_METADATA BOOLEAN DEFAULT TRUE;

CREATE TABLE SBI_OBJ_METADATA (
	OBJ_META_ID 		INTEGER NOT NULL AUTO_INCREMENT,
    LABEL	 	        VARCHAR(20) NOT NULL,
    NAME 	            VARCHAR(40) NOT NULL,
    DESCRIPTION	        VARCHAR(100),
    DATA_TYPE_ID			INTEGER NOT NULL,
    CREATION_DATE 	    TIMESTAMP NOT NULL,
    PRIMARY KEY (OBJ_META_ID)
)TYPE=INNODB;

CREATE UNIQUE INDEX XAK1SBI_OBJ_METADATA ON SBI_OBJ_METADATA
(
       OBJ_META_ID                          ASC
);
ALTER TABLE SBI_OBJ_METADATA ADD CONSTRAINT FK_SBI_OBJ_METADATA_1 FOREIGN KEY FK_SBI_OBJ_METADATA_1 ( DATA_TYPE_ID ) REFERENCES SBI_DOMAINS(VALUE_ID);

CREATE TABLE SBI_OBJ_METACONTENTS (
  OBJ_METACONTENT_ID INTEGER  NOT NULL AUTO_INCREMENT,
  OBJMETA_ID 		 INTEGER  NOT NULL ,
  BIOBJ_ID 			 INTEGER  NOT NULL,
  SUBOBJ_ID 		 INTEGER,
  BIN_ID 			 INTEGER,
  CREATION_DATE 	 TIMESTAMP NOT NULL,
  LAST_CHANGE_DATE   TIMESTAMP NOT NULL,
    PRIMARY KEY (OBJ_METACONTENT_ID)
)ENGINE=INNODB;


CREATE UNIQUE INDEX XAK1SBI_OBJ_METACONTENTS ON SBI_OBJ_METACONTENTS
(
        OBJMETA_ID                          ASC,
        BIOBJ_ID                            ASC,
        SUBOBJ_ID                           ASC
);

ALTER TABLE SBI_OBJ_METACONTENTS ADD CONSTRAINT FK_SBI_OBJ_METACONTENTS_1 FOREIGN KEY FK_SBI_OBJ_METACONTENTS_1 ( OBJMETA_ID ) REFERENCES SBI_OBJ_METADATA (  OBJ_META_ID );
ALTER TABLE SBI_OBJ_METACONTENTS ADD CONSTRAINT FK_SBI_OBJ_METACONTENTS_2 FOREIGN KEY FK_SBI_OBJ_METACONTENTS_2 ( BIOBJ_ID )   REFERENCES SBI_OBJECTS (  BIOBJ_ID );
ALTER TABLE SBI_OBJ_METACONTENTS ADD CONSTRAINT FK_SBI_OBJ_METACONTENTS_3 FOREIGN KEY FK_SBI_OBJ_METACONTENTS_3 ( SUBOBJ_ID )  REFERENCES SBI_SUBOBJECTS (  SUBOBJ_ID ) ;
ALTER TABLE SBI_OBJ_METACONTENTS ADD CONSTRAINT FK_SBI_OBJ_METACONTENTS_4 FOREIGN KEY FK_SBI_OBJ_METACONTENTS_4 ( BIN_ID )     REFERENCES SBI_BINARY_CONTENTS(BIN_ID);

--adds new funcionality for metadata management
INSERT INTO SBI_USER_FUNC (NAME, DESCRIPTION) VALUES ('ObjMetadataManagement', 'ObjMetadataManagement');
INSERT INTO  SBI_ROLE_TYPE_USER_FUNC values((SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ROLE_TYPE' AND VALUE_CD = 'ADMIN'), (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME='ObjMetadataManagement'))
COMMIT;

-chiara
ALTER TABLE SBI_SUBOBJECTS MODIFY COLUMN DESCRIPTION VARCHAR(1000) DEFAULT NULL;

- DBMS changes After 2.4
-- Nicola 21/12/2009

/* Modifies to add Model Label */
ALTER TABLE SBI_KPI_MODEL ADD COLUMN KPI_MODEL_LBL VARCHAR(100) NOT NULL AFTER KPI_MODEL_DESC;
UPDATE SBI_KPI_MODEL SET KPI_MODEL_LBL = KPI_MODEL_CD;
ALTER TABLE SBI_KPI_MODEL DROP INDEX KPI_MODEL_CD;
ALTER TABLE SBI_KPI_MODEL ADD UNIQUE INDEX UNIQUE_LABEL(KPI_MODEL_LBL);
ALTER TABLE SBI_KPI_MODEL ADD UNIQUE INDEX UNIQUE_PAR_ID_CD(KPI_PARENT_MODEL_ID, KPI_MODEL_CD);

/* Modifies SBI_THRESHOLD_VALUE TABLE to add the selection to specify if the range is open or closed */
ALTER TABLE SBI_THRESHOLD_VALUE ADD COLUMN min_closed BOOLEAN ,
 ADD COLUMN max_closed BOOLEAN ,
 ADD COLUMN th_value DOUBLE ;

/* Modifies SBI_KPI_MODEL_INST to specify a KPI INSTANCE or a MODEL INSTANCE LABEL */
ALTER TABLE SBI_KPI_MODEL_INST ADD COLUMN modelUUID VARCHAR(400);


-- Giulio 4/1/2010
ALTER TABLE sbi_lov MODIFY COLUMN LOV_PROVIDER VARCHAR TEXT DEFAULT NULL;

--Monica 11/01/2010
CREATE TABLE SBI_USER (
	USER_ID CHAR(100) NOT NULL,
	PASSWORD VARCHAR(150),
	FULL_NAME VARCHAR(255),
	DT_PWD_BEGIN DATETIME,
	DT_PWD_END DATETIME,
	FLG_PWD_BLOCKED BOOLEAN,
	DT_LAST_ACCESS DATETIME,
	ID INT NOT NULL,
 PRIMARY KEY (ID));

CREATE TABLE SBI_ATTRIBUTE (
	ATTRIBUTE_NAME VARCHAR(255) NOT NULL,
	DESCRIPTION VARCHAR(500) NOT NULL,
	ATTRIBUTE_ID INT NOT NULL,
 PRIMARY KEY (ATTRIBUTE_ID));

CREATE TABLE SBI_USER_ATTRIBUTES (
	ID INT NOT NULL,
	ATTRIBUTE_ID INT NOT NULL,
	ATTRIBUTE_VALUE VARCHAR(500),
 PRIMARY KEY (ID,ATTRIBUTE_ID));


CREATE TABLE SBI_EXT_USER_ROLES (
	ID INT NOT NULL,
	EXT_ROLE_ID INT NOT NULL,
 PRIMARY KEY (ID,EXT_ROLE_ID));


ALTER TABLE SBI_USER_ATTRIBUTES ADD FOREIGN KEY (ID) REFERENCES SBI_USER (ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_EXT_USER_ROLES ADD FOREIGN KEY (ID) REFERENCES SBI_USER (ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_USER_ATTRIBUTES ADD FOREIGN KEY (ATTRIBUTE_ID) REFERENCES SBI_ATTRIBUTE (ATTRIBUTE_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_EXT_USER_ROLES ADD FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;

--Antonella 20/01/2010
/** configuration table*/
CREATE TABLE SBI_CONFIG (
	ID 				INTEGER  NOT NULL AUTO_INCREMENT,
	LABEL			VARCHAR(100) NOT NULL,
	NAME			VARCHAR(100) NULL,
	DESCRIPTION 	VARCHAR(500) NULL,
	IS_ACTIVE 		BOOLEAN DEFAULT TRUE,
	VALUE_CHECK 	VARCHAR(1000) NULL,
	VALUE_TYPE_ID 	INTEGER NULL,
 PRIMARY KEY (ID));


CREATE UNIQUE INDEX XAK1SBI_CONFIG ON SBI_CONFIG
(
       LABEL                          ASC
);


ALTER TABLE SBI_CONFIG ADD CONSTRAINT FK_sbi_config_1 FOREIGN KEY FK_sbi_config_1 ( VALUE_TYPE_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID ) ON DELETE RESTRICT;


--Antonella 27/01/2010
/** change creation date datatype (date --> timestamp) */
ALTER TABLE SBI_VIEWPOINTS MODIFY COLUMN VP_CREATION_DATE TIMESTAMP NOT NULL;


--Chiara 03/02/2010
CREATE TABLE SBI_ACTIVITY_MONITORING (
  ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  ACTION_TIME TIMESTAMP,
  USERNAME 	 	VARCHAR(40) NOT NULL,
  USERGROUP		VARCHAR(400),
  LOG_LEVEL 	VARCHAR(10) ,
  ACTION_CODE 	VARCHAR(45) NOT NULL,
  INFO 			VARCHAR(400),
  PRIMARY KEY (ID)
)ENGINE=INNODB;

CREATE UNIQUE INDEX XAK1SBI_USER ON SBI_USER
(
       USER_ID                          ASC
);

ALTER TABLE SBI_ALARM MODIFY COLUMN ID_KPI_INSTANCE INTEGER,
 MODIFY COLUMN ID_THRESHOLD_VALUE INTEGER;

-- ##################################################################################################
-- 	From 2.5
-- ##################################################################################################

 --Chiara 27/05/2010
ALTER TABLE SBI_RESOURCES ADD COLUMN RESOURCE_CODE VARCHAR(45);
UPDATE SBI_RESOURCES SET RESOURCE_CODE = RESOURCE_NAME;
ALTER TABLE SBI_RESOURCES ADD UNIQUE INDEX UNIQUE_RES_CODE (RESOURCE_CODE);
ALTER TABLE SBI_RESOURCES MODIFY COLUMN RESOURCE_CODE VARCHAR(45) NOT NULL;

--Chiara 28/08/2010
Create table `SBI_KPI_DOCUMENTS` (
	`ID_KPI_DOC` Int NOT NULL AUTO_INCREMENT,
	`BIOBJ_ID` Int NOT NULL,
	`KPI_ID` Int NOT NULL,
 Primary Key (`ID_KPI_DOC`)) ENGINE = InnoDB;

Alter table `SBI_KPI_DOCUMENTS` add Foreign Key (`BIOBJ_ID`) references `SBI_OBJECTS` (`BIOBJ_ID`) on delete  restrict on update  restrict;
Alter table `SBI_KPI_DOCUMENTS` add Foreign Key (`KPI_ID`) references `SBI_KPI` (`KPI_ID`) on delete  restrict on update  restrict;

INSERT INTO SBI_KPI_DOCUMENTS(KPI_ID,BIOBJ_ID)
SELECT k.KPI_ID, o.BIOBJ_ID
FROM sbi_kpi k,sbi_Objects o
WHERE
k.DOCUMENT_LABEL = o.LABEL
and k.DOCUMENT_LABEL IS NOT NULL;

ALTER TABLE SBI_KPI DROP COLUMN document_label;

--Antonella 08/09/2010: generic user defined property management
CREATE TABLE SBI_UDP (
	UDP_ID	        INTEGER  NOT NULL AUTO_INCREMENT,
	TYPE_ID			INTEGER NOT NULL,
	FAMILY_ID		INTEGER NOT NULL,
	LABEL           VARCHAR(20) NOT NULL,
	NAME            VARCHAR(40) NOT NULL,
	DESCRIPTION     VARCHAR(1000) NULL,
	IS_MULTIVALUE   BOOLEAN DEFAULT FALSE,
 PRIMARY KEY (UDP_ID));


CREATE UNIQUE INDEX XAK1SBI_UDP ON SBI_UDP
(
       LABEL                          ASC
);

CREATE INDEX XIF3_SBI_SBI_UDP ON SBI_UDP
(
       TYPE_ID                  ASC
);

CREATE INDEX XIF2SBI_SBI_UDP ON SBI_UDP
(
       FAMILY_ID                  ASC
);

ALTER TABLE SBI_UDP ADD CONSTRAINT FK_SBI_SBI_UDP_1 FOREIGN KEY FK_SBI_UDP_1 ( TYPE_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID ) ON DELETE RESTRICT;
ALTER TABLE SBI_UDP ADD CONSTRAINT FK_SBI_SBI_UDP_2 FOREIGN KEY FK_SBI_UDP_2 ( FAMILY_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID ) ON DELETE RESTRICT;


CREATE TABLE SBI_UDP_VALUE (
	UDP_VALUE_ID       INTEGER  NOT NULL AUTO_INCREMENT,
	UDP_ID			   INTEGER NOT NULL,
	VALUE              VARCHAR(1000) NOT NULL,
	PROG               INTEGER NULL,
	LABEL              VARCHAR(20) NOT NULL,
	NAME               VARCHAR(40) NULL,
	FAMILY			   VARCHAR(40) NULL,
    BEGIN_TS           TIMESTAMP NOT NULL,
    END_TS             TIMESTAMP NULL,
    REFERENCE_ID	   INTEGER NULL,
 PRIMARY KEY (UDP_VALUE_ID));

CREATE INDEX XIF2SBI_SBI_UDP_VALUE ON SBI_UDP_VALUE
(
       UDP_ID            ASC
);

ALTER TABLE SBI_UDP_VALUE ADD CONSTRAINT FK_SBI_UDP_VALUE_2 FOREIGN KEY FK_SBI_UDP_VALUE_2 ( UDP_ID ) REFERENCES SBI_UDP ( UDP_ID ) ON DELETE RESTRICT;

--adds new funcionality for udp management
INSERT INTO SBI_USER_FUNC (NAME, DESCRIPTION) VALUES ('UserDefinedPropertyManagement', 'UserDefinedPropertyManagement');
COMMIT;
INSERT INTO  SBI_ROLE_TYPE_USER_FUNC values((SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ROLE_TYPE' AND VALUE_CD = 'ADMIN'), (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME='UserDefinedPropertyManagement'))
COMMIT;
--Monica : KPI RELATIONS
CREATE TABLE SBI_KPI_REL (
  KPI_REL_ID INT(11) NOT NULL AUTO_INCREMENT,
  KPI_FATHER_ID INT(11)  NOT NULL,
  KPI_CHILD_ID INT(11)  NOT NULL,
  PARAMETER VARCHAR(100),
  PRIMARY KEY (KPI_REL_ID)
)ENGINE=INNODB;

ALTER TABLE SBI_KPI_REL ADD CONSTRAINT FK_SBI_KPI_REL_3 FOREIGN KEY FK_SBI_KPI_REL_3 ( KPI_FATHER_ID ) REFERENCES SBI_KPI ( KPI_ID ) ON DELETE RESTRICT;
ALTER TABLE SBI_KPI_REL ADD CONSTRAINT FK_SBI_KPI_REL_4 FOREIGN KEY FK_SBI_KPI_REL_4 ( KPI_CHILD_ID ) REFERENCES SBI_KPI ( KPI_ID ) ON DELETE RESTRICT;


-- ggavardi 28/09/2010
 CREATE TABLE SBI_KPI_ERROR (
  KPI_ERROR_ID INTEGER NOT NULL AUTO_INCREMENT,
  KPI_MODEL_INST_ID INTEGER NOT NULL,
  USER_MSG VARCHAR(1000),
  FULL_MSG TEXT,
  TS_DATE TIMESTAMP ,
  LABEL_MOD_INST VARCHAR(100) ,
  PARAMETERS VARCHAR(1000),
  PRIMARY KEY (KPI_ERROR_ID)
);
ALTER TABLE SBI_KPI_ERROR ADD CONSTRAINT FK_SBI_KPI_ERROR_MODEL_1 FOREIGN KEY FK_SBI_KPI_ERROR_MODEL_1 ( KPI_MODEL_INST_ID ) REFERENCES SBI_KPI_MODEL_INST ( KPI_MODEL_INST ) ON DELETE RESTRICT;

--Chiara 28/09/2010
DROP TABLE SBI_KPI_MODEL_ATTR_VAL;
DROP TABLE SBI_KPI_MODEL_ATTR;

--new column on SBI_KPI
ALTER TABLE SBI_KPI ADD COLUMN IS_ADDITIVE CHAR(1);

--Davide 29/09/2010 (Organizationl Unit)
CREATE TABLE SBI_ORG_UNIT (
  ID            INTEGER NOT NULL,
  LABEL            VARCHAR(200) NOT NULL,
  NAME             VARCHAR(400) NOT NULL,
  DESCRIPTION      VARCHAR(1000),
  UNIQUE (LABEL),
  PRIMARY KEY(ID)
)ENGINE=INNODB;

CREATE TABLE SBI_ORG_UNIT_HIERARCHIES (
  ID            INTEGER NOT NULL,
  LABEL            VARCHAR(100) NOT NULL,
  NAME             VARCHAR(200) NOT NULL,
  DESCRIPTION      VARCHAR(1000),
  TARGET     VARCHAR(1000),
  COMPANY    VARCHAR(100) NOT NULL,
  UNIQUE (LABEL, COMPANY),
  PRIMARY KEY(ID)
)ENGINE=INNODB;

CREATE TABLE SBI_ORG_UNIT_NODES (
  NODE_ID            INTEGER NOT NULL,
  OU_ID           INTEGER NOT NULL,
  HIERARCHY_ID  INTEGER NOT NULL,
  PARENT_NODE_ID INTEGER NULL,
  PATH VARCHAR(4000) NOT NULL,
  PRIMARY KEY(NODE_ID)
)ENGINE=INNODB;

CREATE TABLE SBI_ORG_UNIT_GRANT (
  ID INTEGER NOT NULL,
  HIERARCHY_ID  INTEGER NOT NULL,
  KPI_MODEL_INST_NODE_ID INTEGER NOT NULL,
  START_DATE  DATE,
  END_DATE  DATE,
  LABEL            VARCHAR(200) NOT NULL,
  NAME             VARCHAR(400) NOT NULL,
  DESCRIPTION      VARCHAR(1000),
  UNIQUE (LABEL),
  PRIMARY KEY(ID)
)ENGINE=INNODB;

CREATE TABLE SBI_ORG_UNIT_GRANT_NODES (
  NODE_ID INTEGER NOT NULL,
  KPI_MODEL_INST_NODE_ID INTEGER NOT NULL,
  GRANT_ID INTEGER NOT NULL,
  PRIMARY KEY(NODE_ID, KPI_MODEL_INST_NODE_ID, GRANT_ID)
)ENGINE=INNODB;


ALTER TABLE SBI_ORG_UNIT_NODES ADD CONSTRAINT FK_SBI_ORG_UNIT_NODES_1 FOREIGN KEY FK_SBI_ORG_UNIT_NODES_1 ( OU_ID ) REFERENCES SBI_ORG_UNIT ( ID ) ON DELETE CASCADE;
ALTER TABLE SBI_ORG_UNIT_NODES ADD CONSTRAINT FK_SBI_ORG_UNIT_NODES_2 FOREIGN KEY FK_SBI_ORG_UNIT_NODES_2 ( HIERARCHY_ID ) REFERENCES SBI_ORG_UNIT_HIERARCHIES ( ID ) ON DELETE CASCADE;
ALTER TABLE SBI_ORG_UNIT_NODES ADD CONSTRAINT FK_SBI_ORG_UNIT_NODES_3 FOREIGN KEY FK_SBI_ORG_UNIT_NODES_3 ( PARENT_NODE_ID ) REFERENCES SBI_ORG_UNIT_NODES ( NODE_ID ) ON DELETE CASCADE;

ALTER TABLE SBI_ORG_UNIT_GRANT ADD CONSTRAINT FK_SBI_ORG_UNIT_GRANT_2 FOREIGN KEY FK_SBI_ORG_UNIT_GRANT_2 ( HIERARCHY_ID ) REFERENCES SBI_ORG_UNIT_HIERARCHIES ( ID ) ON DELETE CASCADE;
ALTER TABLE SBI_ORG_UNIT_GRANT ADD CONSTRAINT FK_SBI_ORG_UNIT_GRANT_3 FOREIGN KEY FK_SBI_ORG_UNIT_GRANT_3 ( KPI_MODEL_INST_NODE_ID ) REFERENCES SBI_KPI_MODEL_INST ( KPI_MODEL_INST ) ON DELETE CASCADE;

ALTER TABLE SBI_ORG_UNIT_GRANT_NODES ADD CONSTRAINT FK_SBI_ORG_UNIT_GRANT_NODES_1 FOREIGN KEY FK_SBI_ORG_UNIT_GRANT_NODES_1 ( NODE_ID ) REFERENCES SBI_ORG_UNIT_NODES ( NODE_ID ) ON DELETE CASCADE;
ALTER TABLE SBI_ORG_UNIT_GRANT_NODES ADD CONSTRAINT FK_SBI_ORG_UNIT_GRANT_NODES_2 FOREIGN KEY FK_SBI_ORG_UNIT_GRANT_NODES_2 ( KPI_MODEL_INST_NODE_ID ) REFERENCES SBI_KPI_MODEL_INST ( KPI_MODEL_INST ) ON DELETE CASCADE;
ALTER TABLE SBI_ORG_UNIT_GRANT_NODES ADD CONSTRAINT FK_SBI_ORG_UNIT_GRANT_NODES_3 FOREIGN KEY FK_SBI_ORG_UNIT_GRANT_NODES_3 ( GRANT_ID ) REFERENCES SBI_ORG_UNIT_GRANT ( ID ) ON DELETE CASCADE;

 --MONICA 18/10/10: KPI OU
ALTER TABLE SBI_KPI_VALUE ADD COLUMN ORG_UNIT_ID INTEGER;
--Davide 12/10/2010: analytical drivers are visible by default
UPDATE SBI_OBJ_PAR SET VIEW_FL = 1;

--Davide 05/11/2010: added COMPANY column to SBI_ORG_UNIT_HIERARCHIES
ALTER TABLE SBI_ORG_UNIT_HIERARCHIES ADD COLUMN COMPANY VARCHAR(200);

--MONICA  05/11/2010:BUG ON DUPLICATE ROLE NAMES
ALTER TABLE SBI_EXT_ROLES MODIFY COLUMN NAME VARCHAR(100) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL,
 ADD UNIQUE INDEX NAME(NAME);

--MONICA  05/11/2010: KPI ENGINE : added hierarchy as parameter to filter grants and added company
 ALTER TABLE SBI_KPI_VALUE ADD COLUMN HIERARCHY_ID INT(11) AFTER `ORG_UNIT_ID`,
 ADD COLUMN `COMPANY` VARCHAR(200) AFTER `HIERARCHY_ID`;

--Davide 11/11/2010 (Organizationl Unit: colums LABEL and NAME resized to 100; unique key is (LABEL,NAME))
ALTER TABLE SBI_ORG_UNIT MODIFY COLUMN LABEL VARCHAR(100) NOT NULL;
ALTER TABLE SBI_ORG_UNIT MODIFY COLUMN NAME VARCHAR(100) NOT NULL;
ALTER TABLE SBI_ORG_UNIT DROP INDEX LABEL;
ALTER TABLE SBI_ORG_UNIT ADD INDEX XAK1SBI_ORG_UNIT(LABEL, NAME);

--Davide 16/11/2010: added url to external application in menu configuration
ALTER TABLE SBI_MENU ADD COLUMN EXT_APP_URL VARCHAR(1000);

--Andrea 20/12/2010: added to solve bug SPAGOBI-433
ALTER TABLE SBI_EVENTS_LOG MODIFY COLUMN DESCR TEXT;

COMMIT;
--Monica 10/01/2011: error in OU name filed too short
alter table sbi_org_unit modify column NAME varchar(200);

--Alberto 11/01/2011: goal scripts


CREATE TABLE SBI_GOAL (
  GOAL_ID       INTEGER NOT NULL AUTO_INCREMENT,
  GRANT_ID      INTEGER NOT NULL,
  START_DATE    DATE NOT NULL,
  END_DATE      DATE NOT NULL,
  NAME          VARCHAR(20) NOT NULL,
  LABEL          VARCHAR(20),
  DESCRIPTION		VARCHAR(1000),
  PRIMARY KEY (GOAL_ID)
);


CREATE TABLE SBI_GOAL_HIERARCHY (
  GOAL_HIERARCHY_ID INTEGER NOT NULL AUTO_INCREMENT,
  ORG_UNIT_ID       INTEGER NOT NULL,
  GOAL_ID           INTEGER NOT NULL,
  PARENT_ID         INTEGER,
  NAME              VARCHAR(50) NOT NULL,
  LABEL             VARCHAR(50),
  GOAL              VARCHAR(1000) ,
  PRIMARY KEY (GOAL_HIERARCHY_ID)
);


CREATE TABLE SBI_GOAL_KPI (
  GOAL_KPI_ID         INTEGER NOT NULL AUTO_INCREMENT,
  KPI_INSTANCE_ID     INTEGER NOT NULL,
  GOAL_HIERARCHY_ID   INTEGER NOT NULL,
  WEIGHT1             DOUBLE,
  WEIGHT2             DOUBLE,
  THRESHOLD1          DOUBLE,
  THRESHOLD2          DOUBLE,
  THRESHOLD1SIGN      INTEGER,
  THRESHOLD2SIGN      INTEGER,
  PRIMARY KEY (GOAL_KPI_ID)
);

ALTER TABLE SBI_GOAL_KPI ENGINE = InnoDB;
ALTER TABLE SBI_GOAL_HIERARCHY ENGINE = InnoDB;
ALTER TABLE SBI_GOAL ENGINE = InnoDB;

ALTER TABLE SBI_GOAL ADD CONSTRAINT FK_GRANT_ID_GRANT  FOREIGN KEY FK_GRANT_ID_GRANT (GRANT_ID) REFERENCES SBI_ORG_UNIT_GRANT (ID) ON DELETE CASCADE ON UPDATE RESTRICT;

ALTER TABLE SBI_GOAL_HIERARCHY ADD CONSTRAINT FK_SBI_GOAL_HIERARCHY_GOAL  FOREIGN KEY FK_SBI_GOAL_HIERARCHY_GOAL (GOAL_ID) REFERENCES SBI_GOAL (GOAL_ID) ON DELETE CASCADE ON UPDATE RESTRICT;
ALTER TABLE SBI_GOAL_HIERARCHY ADD CONSTRAINT FK_SBI_GOAL_HIERARCHY_PARENT  FOREIGN KEY FK_SBI_GOAL_HIERARCHY_PARENT (PARENT_ID) REFERENCES SBI_GOAL_HIERARCHY (GOAL_HIERARCHY_ID) ON DELETE CASCADE ON UPDATE RESTRICT;

ALTER TABLE SBI_GOAL_KPI ADD CONSTRAINT FK_SBI_GOAL_KPI_GOAL  FOREIGN KEY FK_SBI_GOAL_KPI_GOAL (GOAL_HIERARCHY_ID) REFERENCES SBI_GOAL_HIERARCHY (GOAL_HIERARCHY_ID)  ON DELETE CASCADE ON UPDATE RESTRICT;
ALTER TABLE SBI_GOAL_KPI ADD CONSTRAINT FK_SBI_GOAL_KPI_KPI  FOREIGN KEY FK_SBI_GOAL_KPI_KPI (KPI_INSTANCE_ID) REFERENCES SBI_KPI_MODEL_INST (KPI_MODEL_INST) ON DELETE CASCADE ON UPDATE RESTRICT;

--Chiara 22/03/2011: dataset scripts
ALTER TABLE SBI_DATA_SET ADD COLUMN CATEGORY_ID INTEGER;

ALTER TABLE SBI_DATA_SET ADD CONSTRAINT FK_SBI_DATA_SET_CAT  FOREIGN KEY FK_SBI_DATA_SET_CAT (CATEGORY_ID) REFERENCES SBI_DOMAINS (VALUE_ID) ON DELETE CASCADE ON UPDATE RESTRICT;
--Chiara 30/03/2011
ALTER TABLE SBI_DATA_SET DROP COLUMN EXECUTOR_CLASS;

INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('groovy','Groovy','SCRIPT_TYPE','Script Type','Script Type');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('rhino-nonjdk','Javascript','SCRIPT_TYPE','Script Type','Script Type');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('ejs','Embedded Javascript','SCRIPT_TYPE','Script Type','Script Type');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('File','SbiFileDataSet','DATA_SET_TYPE','Data Set Type','SbiFileDataSet');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('Query','SbiQueryDataSet','DATA_SET_TYPE','Data Set Type','SbiQueryDataSet');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('Java Class','SbiJClassDataSet','DATA_SET_TYPE','Data Set Type','SbiJClassDataSet');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('Web Service','SbiWSDataSet','DATA_SET_TYPE','Data Set Type','SbiWSDataSet');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('Script','SbiScriptDataSet','DATA_SET_TYPE','Data Set Type','SbiScriptDataSet');
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('Qbe','SbiQbeDataSet','DATA_SET_TYPE','Data Set Type','SbiQbeDataSet');

CREATE TABLE SBI_DATA_SET_HISTORY (
	DS_H_ID 	   INTEGER NOT NULL AUTO_INCREMENT,
	DS_ID 		   INTEGER NOT NULL,
	ACTIVE		   BOOLEAN NOT NULL,
	VERSION_NUM	   INTEGER NOT NULL,
	OBJECT_TYPE    VARCHAR(50),
	DS_METADATA    VARCHAR(2000),
	PARAMS         VARCHAR(1000),
	CATEGORY_ID    INTEGER,
    FILE_NAME	   VARCHAR(300),
    QUERY   	   TEXT,
    DATA_SOURCE_ID INTEGER,
    ADRESS   	   VARCHAR(250),
    OPERATION      VARCHAR(50),
    JCLASS_NAME    VARCHAR(100),
    LANGUAGE_SCRIPT VARCHAR(50),
	SCRIPT   	   TEXT,
	JSON_QUERY     TEXT,
    TRANSFORMER_ID INTEGER,
    PIVOT_COLUMN   VARCHAR(50),
	PIVOT_ROW      VARCHAR(50),
	PIVOT_VALUE    VARCHAR(50),
	NUM_ROWS	   BOOLEAN DEFAULT FALSE,
	USER_IN              VARCHAR(100) NOT NULL,
	TIME_IN              TIMESTAMP NOT NULL,
	META_VERSION         VARCHAR(100),
	SBI_VERSION_IN       VARCHAR(10),
    PRIMARY KEY (DS_H_ID)
)TYPE=INNODB;

ALTER TABLE SBI_DATA_SET_HISTORY ADD CONSTRAINT FK_SBI_DATA_SET_T  FOREIGN KEY FK_SBI_DATA_SET_T ( TRANSFORMER_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID ) ON DELETE CASCADE;
ALTER TABLE SBI_DATA_SET_HISTORY ADD CONSTRAINT FK_SBI_DATA_SET_CAT  FOREIGN KEY FK_SBI_DATA_SET_CAT (CATEGORY_ID) REFERENCES SBI_DOMAINS (VALUE_ID) ON DELETE CASCADE ON UPDATE RESTRICT;
ALTER TABLE SBI_DATA_SET_HISTORY ADD CONSTRAINT FK_SBI_DATA_SET_DS  FOREIGN KEY FK_SBI_DATA_SET_DS ( DATA_SOURCE_ID ) REFERENCES SBI_DATA_SOURCE ( DS_ID ) ON DELETE CASCADE;
ALTER TABLE SBI_DATA_SET_HISTORY ADD CONSTRAINT FK_SBI_DATA_SET_DS2  FOREIGN KEY FK_SBI_DATA_SET_DS2 (DS_ID) REFERENCES SBI_DATA_SET (DS_ID) ON DELETE CASCADE ON UPDATE RESTRICT;

INSERT INTO SBI_DATA_SET_HISTORY
(DS_ID,ACTIVE,VERSION_NUM,FILE_NAME,QUERY,JCLASS_NAME,SCRIPT,PARAMS,DS_METADATA,DATA_SOURCE_ID
,OBJECT_TYPE,OPERATION,TRANSFORMER_ID,PIVOT_COLUMN,PIVOT_ROW,PIVOT_VALUE,NUM_ROWS,LANGUAGE_SCRIPT
,USER_IN, TIME_IN)
SELECT DS_ID,true ACTIVE,1 VERSION_NUM,FILE_NAME,QUERY,JCLASS_NAME,SCRIPT,PARAMS,DS_METADATA,DATA_SOURCE_ID
,OBJECT_TYPE,OPERATION,TRANSFORMER_ID,PIVOT_COLUMN,PIVOT_ROW,PIVOT_VALUE,NUM_ROWS,LANGUAGE_SCRIPT
,'biadmin' USER_IN, now() TIME_IN
FROM SBI_DATA_SET;

commit;

--Drop all SBI_DATA_SET foreign keys
ALTER TABLE SBI_DATA_SET DROP FOREIGN KEY FK_SBI_DATA_SET_1;
ALTER TABLE SBI_DATA_SET DROP FOREIGN KEY FK_SBI_DATA_SET_CAT;

ALTER TABLE SBI_DATA_SET DROP COLUMN CATEGORY_ID;
ALTER TABLE SBI_DATA_SET DROP COLUMN FILE_NAME;
ALTER TABLE SBI_DATA_SET DROP COLUMN QUERY;
ALTER TABLE SBI_DATA_SET DROP COLUMN JCLASS_NAME;
ALTER TABLE SBI_DATA_SET DROP COLUMN SCRIPT;
ALTER TABLE SBI_DATA_SET DROP COLUMN PARAMS;
ALTER TABLE SBI_DATA_SET DROP COLUMN DS_METADATA;
ALTER TABLE SBI_DATA_SET DROP COLUMN DATA_SOURCE_ID;
ALTER TABLE SBI_DATA_SET DROP COLUMN OBJECT_TYPE;
ALTER TABLE SBI_DATA_SET DROP COLUMN OPERATION;
ALTER TABLE SBI_DATA_SET DROP COLUMN TRANSFORMER_ID;
ALTER TABLE SBI_DATA_SET DROP COLUMN PIVOT_COLUMN;
ALTER TABLE SBI_DATA_SET DROP COLUMN PIVOT_ROW;
ALTER TABLE SBI_DATA_SET DROP COLUMN PIVOT_VALUE;
ALTER TABLE SBI_DATA_SET DROP COLUMN NUM_ROWS;
ALTER TABLE SBI_DATA_SET DROP COLUMN LANGUAGE_SCRIPT;
ALTER TABLE SBI_DATA_SET DROP COLUMN ADRESS;

ALTER TABLE SBI_DATA_SET ADD COLUMN USER_IN VARCHAR(100) NOT NULL;
ALTER TABLE SBI_DATA_SET ADD COLUMN USER_UP VARCHAR(100);
ALTER TABLE SBI_DATA_SET ADD COLUMN USER_DE VARCHAR(100);
ALTER TABLE SBI_DATA_SET ADD COLUMN TIME_IN TIMESTAMP NOT NULL;
ALTER TABLE SBI_DATA_SET ADD COLUMN TIME_UP TIMESTAMP;
ALTER TABLE SBI_DATA_SET ADD COLUMN TIME_DE TIMESTAMP;
ALTER TABLE SBI_DATA_SET ADD COLUMN SBI_VERSION_IN VARCHAR(10);
ALTER TABLE SBI_DATA_SET ADD COLUMN SBI_VERSION_UP VARCHAR(10);
ALTER TABLE SBI_DATA_SET ADD COLUMN SBI_VERSION_DE VARCHAR(10);
ALTER TABLE SBI_DATA_SET ADD COLUMN META_VERSION VARCHAR(100);
ALTER TABLE SBI_DATA_SET ADD COLUMN ORGANIZATION VARCHAR(20);

UPDATE SBI_DATA_SET SET USER_IN = 'biadmin';

--Chiara 4/4/2011
ALTER TABLE SBI_DATA_SET DROP COLUMN TIME_UP;
ALTER TABLE SBI_DATA_SET DROP COLUMN TIME_DE;
ALTER TABLE SBI_DATA_SET ADD COLUMN TIME_UP TIMESTAMP NULL DEFAULT NULL;
ALTER TABLE SBI_DATA_SET ADD COLUMN TIME_DE TIMESTAMP NULL DEFAULT NULL;

--Davide 12/04/2011
delete from SBI_DOMAINS WHERE VALUE_CD = 'Qbe' AND DOMAIN_CD = 'DATA_SET_TYPE';
INSERT into SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) values ('Qbe','SbiQbeDataSet','DATA_SET_TYPE','Data Set Type','SbiQbeDataSet');

ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN DATAMARTS VARCHAR(400);

Angelo 13/04/2011

CREATE TABLE `hibernate_sequences` (
  `sequence_name` varchar(200) NOT NULL,
  `next_val` int(11) NOT NULL,
  PRIMARY KEY (`sequence_name`)
);

Chiara 15/04/2011
INSERT INTO SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) VALUES ('groovy','Groovy','SCRIPT_TYPE','Script Type','Script Type');
INSERT INTO SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) VALUES ('rhino-nonjdk','Javascript','SCRIPT_TYPE','Script Type','Script Type');
INSERT INTO SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) VALUES ('ejs','Embedded Javascript','SCRIPT_TYPE','Script Type','Script Type');
INSERT INTO SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) VALUES ('File','SbiFileDataSet','DATA_SET_TYPE','Data Set Type','SbiFileDataSet');
INSERT INTO SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) VALUES ('Query','SbiQueryDataSet','DATA_SET_TYPE','Data Set Type','SbiQueryDataSet');
INSERT INTO SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) VALUES ('Java Class','SbiJClassDataSet','DATA_SET_TYPE','Data Set Type','SbiJClassDataSet');
INSERT INTO SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) VALUES ('Web Service','SbiWSDataSet','DATA_SET_TYPE','Data Set Type','SbiWSDataSet');
INSERT INTO SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) VALUES ('Script','SbiScriptDataSet','DATA_SET_TYPE','Data Set Type','SbiScriptDataSet');
INSERT INTO SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) VALUES ('Qbe','SbiQbeDataSet','DATA_SET_TYPE','Data Set Type','SbiQbeDataSet');
INSERT INTO SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) VALUES ('WORKSHEET','sbidomains.nm.worksheet','BIOBJ_TYPE','BI Object types','sbidomains.ds.worksheet');
INSERT INTO SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) VALUES ('DEVELOPMENT', 'sbidomains.permissiononfolder.nm.dev','PERMISSION_ON_FOLDER','Permission on folder','sbidomains.permissiononfolder.ds.dev');
INSERT INTO SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) VALUES ('TEST', 'sbidomains.permissiononfolder.nm.test','PERMISSION_ON_FOLDER','Permission on folder','sbidomains.permissiononfolder.ds.test');
INSERT INTO SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) VALUES ('EXECUTION', 'sbidomains.permissiononfolder.nm.execute','PERMISSION_ON_FOLDER','Permission on folder','sbidomains.permissiononfolder.ds.execute');
INSERT INTO SBI_DOMAINS (VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS) VALUES ('CREATION', 'sbidomains.permissiononfolder.nm.create','PERMISSION_ON_FOLDER','Permission on folder','sbidomains.permissiononfolder.ds.create');
UPDATE SBI_FUNC_ROLE SET STATE_ID = (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'DEVELOPMENT' AND DOMAIN_CD = 'PERMISSION_ON_FOLDER'), STATE_CD = 'DEVELOPMENT' WHERE STATE_ID = (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'DEV' AND DOMAIN_CD = 'STATE');
UPDATE SBI_FUNC_ROLE SET STATE_ID = (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'TEST' AND DOMAIN_CD = 'PERMISSION_ON_FOLDER'), STATE_CD = 'TEST' WHERE STATE_ID = (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'TEST' AND DOMAIN_CD = 'STATE');
UPDATE SBI_FUNC_ROLE SET STATE_ID = (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'EXECUTION' AND DOMAIN_CD = 'PERMISSION_ON_FOLDER'), STATE_CD = 'EXECUTION' WHERE STATE_ID = (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'REL' AND DOMAIN_CD = 'STATE');

INSERT INTO SBI_USER_FUNC (NAME, DESCRIPTION) VALUES ('DomainManagement', 'DomainManagement');
INSERT INTO SBI_ROLE_TYPE_USER_FUNC values((SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ROLE_TYPE' AND VALUE_CD = 'ADMIN'), (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME='DomainManagement'));
INSERT INTO SBI_USER_FUNC (NAME, DESCRIPTION) VALUES ('ConfigManagement', 'ConfigManagement');
INSERT INTO SBI_ROLE_TYPE_USER_FUNC values((SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ROLE_TYPE' AND VALUE_CD = 'ADMIN'), (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME='ConfigManagement'));
INSERT INTO SBI_USER_FUNC (NAME, DESCRIPTION) VALUES ('UserSaveDocumentFunctionality', 'UserSaveDocumentFunctionality');
INSERT INTO SBI_ROLE_TYPE_USER_FUNC values((SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ROLE_TYPE' AND VALUE_CD = 'ADMIN'), (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME='UserSaveDocumentFunctionality'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC values((SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ROLE_TYPE' AND VALUE_CD = 'USER'), (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME='UserSaveDocumentFunctionality'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC values((SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ROLE_TYPE' AND VALUE_CD = 'DEV_ROLE'), (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME='UserSaveDocumentFunctionality'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC values((SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ROLE_TYPE' AND VALUE_CD = 'TEST_ROLE'), (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME='UserSaveDocumentFunctionality'));
INSERT INTO SBI_ENGINES (NAME,ENCRYPT, LABEL,MAIN_URL, DRIVER_NM, ENGINE_TYPE,BIOBJ_TYPE,USE_DATASOURCE,USE_DATASET) VALUES
 ('Worksheet Engine', 0,'WorksheetEngine','/SpagoBIQbeEngine/servlet/AdapterHTTP','it.eng.spagobi.engines.drivers.worksheet.WorksheetDriver',(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ENGINE_TYPE' AND VALUE_CD = 'EXT'),(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'WORKSHEET'),true,false);

CREATE TABLE SBI_DATA_SET_HISTORY (
	DS_H_ID 	   INTEGER NOT NULL AUTO_INCREMENT,
	DS_ID 		   INTEGER NOT NULL,
	ACTIVE		   BOOLEAN NOT NULL,
	VERSION_NUM	   INTEGER NOT NULL,
	OBJECT_TYPE    VARCHAR(50),
	DS_METADATA    VARCHAR(2000),
	PARAMS         VARCHAR(1000),
	CATEGORY_ID    INTEGER,
    FILE_NAME	   VARCHAR(300),
    QUERY   	   TEXT,
    DATA_SOURCE_ID INTEGER,
    ADRESS   	   VARCHAR(250),
    OPERATION      VARCHAR(50),
    JCLASS_NAME    VARCHAR(100),
    LANGUAGE_SCRIPT VARCHAR(50),
	SCRIPT   	   TEXT,
	JSON_QUERY     TEXT,
	DATAMARTS	   VARCHAR(400),
    TRANSFORMER_ID INTEGER,
    PIVOT_COLUMN   VARCHAR(50),
	PIVOT_ROW      VARCHAR(50),
	PIVOT_VALUE    VARCHAR(50),
	NUM_ROWS	   BOOLEAN DEFAULT FALSE,
	USER_IN              VARCHAR(100) NOT NULL,
	TIME_IN              TIMESTAMP NOT NULL,
	META_VERSION         VARCHAR(100),
	SBI_VERSION_IN       VARCHAR(10),
    PRIMARY KEY (DS_H_ID)
)TYPE=INNODB;

ALTER TABLE SBI_DATA_SET_HISTORY ADD CONSTRAINT FK_SBI_DATA_SET_T  FOREIGN KEY ( TRANSFORMER_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID ) ON DELETE CASCADE;
ALTER TABLE SBI_DATA_SET_HISTORY ADD CONSTRAINT FK_SBI_DATA_SET_CAT  FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_DOMAINS (VALUE_ID) ON DELETE CASCADE ON UPDATE RESTRICT;
ALTER TABLE SBI_DATA_SET_HISTORY ADD CONSTRAINT FK_SBI_DATA_SET_DS  FOREIGN KEY ( DATA_SOURCE_ID ) REFERENCES SBI_DATA_SOURCE ( DS_ID ) ON DELETE CASCADE;
ALTER TABLE SBI_DATA_SET_HISTORY ADD CONSTRAINT FK_SBI_DATA_SET_DS2  FOREIGN KEY (DS_ID) REFERENCES SBI_DATA_SET (DS_ID) ON DELETE CASCADE ON UPDATE RESTRICT;

INSERT INTO SBI_DATA_SET_HISTORY
(DS_H_ID,DS_ID,ACTIVE,VERSION_NUM,FILE_NAME,QUERY,JCLASS_NAME,SCRIPT,PARAMS,DS_METADATA
	,DATA_SOURCE_ID,OBJECT_TYPE,OPERATION,TRANSFORMER_ID,PIVOT_COLUMN,PIVOT_ROW
	,PIVOT_VALUE,NUM_ROWS,LANGUAGE_SCRIPT,USER_IN, TIME_IN)
SELECT DS_ID, DS_ID,true ACTIVE,1 VERSION_NUM,FILE_NAME,QUERY,JCLASS_NAME,SCRIPT,PARAMS,DS_METADATA,DATA_SOURCE_ID
,OBJECT_TYPE,OPERATION,TRANSFORMER_ID,PIVOT_COLUMN,PIVOT_ROW,PIVOT_VALUE,NUM_ROWS,LANGUAGE_SCRIPT
,'biadmin' USER_IN, NOW() TIME_IN
FROM SBI_DATA_SET;

commit;

Angelo 19/04/2011

AGGIUNTI I CAMPI TECNICI , ESEGUIRE  UpdateTecnologyFields.sql


--Davide 23/05/2011: permissions on folders
INSERT into SBI_DOMAINS (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM,VALUE_DS, USER_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'DEVELOPMENT', 'sbidomains.permissiononfolder.nm.dev','PERMISSION_ON_FOLDER','Permission on folder','sbidomains.permissiononfolder.ds.dev', '');
UPDATE hibernate_sequences SET next_val = (SELECT MAX(VALUE_ID) + 1 FROM SBI_DOMAINS) WHERE sequence_name = 'SBI_DOMAINS';
INSERT into SBI_DOMAINS (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM,VALUE_DS, USER_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'TEST', 'sbidomains.permissiononfolder.nm.test','PERMISSION_ON_FOLDER','Permission on folder','sbidomains.permissiononfolder.ds.test', '');
UPDATE hibernate_sequences SET next_val = (SELECT MAX(VALUE_ID) + 1 FROM SBI_DOMAINS) WHERE sequence_name = 'SBI_DOMAINS';
INSERT into SBI_DOMAINS (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM,VALUE_DS, USER_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'EXECUTION', 'sbidomains.permissiononfolder.nm.execute','PERMISSION_ON_FOLDER','Permission on folder','sbidomains.permissiononfolder.ds.execute', '');
UPDATE hibernate_sequences SET next_val = (SELECT MAX(VALUE_ID) + 1 FROM SBI_DOMAINS) WHERE sequence_name = 'SBI_DOMAINS';
INSERT into SBI_DOMAINS (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM,VALUE_DS, USER_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'CREATION', 'sbidomains.permissiononfolder.nm.create','PERMISSION_ON_FOLDER','Permission on folder','sbidomains.permissiononfolder.ds.create', '');
UPDATE hibernate_sequences SET next_val = (SELECT MAX(VALUE_ID) + 1 FROM SBI_DOMAINS) WHERE sequence_name = 'SBI_DOMAINS';
UPDATE SBI_FUNC_ROLE set STATE_ID = (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'DEVELOPMENT' AND DOMAIN_CD = 'PERMISSION_ON_FOLDER'), STATE_CD = 'DEVELOPMENT' WHERE STATE_ID = (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'DEV' AND DOMAIN_CD = 'STATE');
UPDATE SBI_FUNC_ROLE set STATE_ID = (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'TEST' AND DOMAIN_CD = 'PERMISSION_ON_FOLDER'), STATE_CD = 'TEST' WHERE STATE_ID = (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'TEST' AND DOMAIN_CD = 'STATE');
UPDATE SBI_FUNC_ROLE set STATE_ID = (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'EXECUTION' AND DOMAIN_CD = 'PERMISSION_ON_FOLDER'), STATE_CD = 'EXECUTION' WHERE STATE_ID = (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'REL' AND DOMAIN_CD = 'STATE');

--Chiara 30/05/2011
INSERT INTO  SBI_EXPORTERS (ENGINE_ID,DOMAIN_ID,DEFAULT_VALUE)values((SELECT ENGINE_ID FROM SBI_ENGINES WHERE LABEL='WorksheetEngine'),(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'EXPORT_TYPE' AND VALUE_CD = 'XLS'), false);

--Monia 30/05/2011
ALTER TABLE SBI_CONFIG ADD COLUMN CATEGORY VARCHAR( 50 ) NULL

--Chiara 15/06/2011
--If this is not the correct name of your foreign key delete it manually
ALTER TABLE SBI_KPI_DOCUMENTS DROP FOREIGN KEY sbi_kpi_documents_ibfk_1;
ALTER TABLE SBI_KPI_DOCUMENTS  ADD CONSTRAINT FK_SBI_KPI_DOCUMENTS_1 FOREIGN KEY ( BIOBJ_ID ) REFERENCES  SBI_OBJECTS  ( BIOBJ_ID ) ON DELETE CASCADE ON UPDATE CASCADE;
--Monica 11/07/2011
ALTER TABLE SBI_ORG_UNIT_GRANT ADD COLUMN IS_AVAILABLE INTEGER DEFAULT 1;

-- GIULIO 20/07/2011
CREATE TABLE SBI_OBJ_PARVIEW (
  OBJ_PAR_ID INTEGER NOT NULL,
   OBJ_PAR_FATHER_ID  INTEGER NOT NULL,
   OPERATION  VARCHAR(20) NOT NULL,
   COMPARE_VALUE  VARCHAR(200) NOT NULL,
   VIEW_LABEL  VARCHAR(50),
   PROG INTEGER,
          USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
  PRIMARY KEY ( OBJ_PAR_ID ,  OBJ_PAR_FATHER_ID ,  OPERATION, COMPARE_VALUE )
);

CREATE INDEX XAK1SBI_PARVIEW ON SBI_OBJ_PARVIEW
(
       OBJ_PAR_ID                         ASC,
       OBJ_PAR_FATHER_ID           		  ASC
);

ALTER TABLE SBI_OBJ_PARVIEW ADD CONSTRAINT FK_SBI_OBJ_PARVIEW_1 FOREIGN KEY ( OBJ_PAR_ID ) REFERENCES SBI_OBJ_PAR ( OBJ_PAR_ID ) ON DELETE RESTRICT;
ALTER TABLE SBI_OBJ_PARVIEW ADD CONSTRAINT FK_SBI_OBJ_PARVIEW_2 FOREIGN KEY ( OBJ_PAR_FATHER_ID ) REFERENCES SBI_OBJ_PAR ( OBJ_PAR_ID ) ON DELETE RESTRICT;


-- Change after 3.1  14/9/2011 Giulio

ALTER TABLE sbi_data_set_history ADD COLUMN CUSTOM_DATA TEXT AFTER DATAMARTS;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'Custom','SbiCustomDataSet','DATA_SET_TYPE','Data Set Type','SbiCustomDataSet', 'biadmin');


-- 6/10/2011 Giulio
ALTER TABLE sbi_data_set_history MODIFY COLUMN DS_METADATA TEXT;

-- 20/10/2011 Davide : il motore worksheet puo' lavorare con i dataset
UPDATE SBI_ENGINES SET USE_DATASET = TRUE WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.worksheet.WorksheetDriver';

-- 06/12/2011 Davide : exporter XLSX per Qbe e Worksheet
INSERT INTO SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS,USER_IN)
	VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'XLSX','XLSX','EXPORT_TYPE','Exporters type','Export type', 'biadmin');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_DOMAINS';
commit;
INSERT INTO SBI_EXPORTERS (ENGINE_ID,DOMAIN_ID,DEFAULT_VALUE)
	VALUES ((SELECT ENGINE_ID FROM SBI_ENGINES WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.worksheet.WorksheetDriver'),
	(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'EXPORT_TYPE' AND VALUE_CD = 'XLSX'),
	false);
commit;
INSERT INTO SBI_EXPORTERS (ENGINE_ID,DOMAIN_ID,DEFAULT_VALUE)
	VALUES ((SELECT ENGINE_ID FROM SBI_ENGINES WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.qbe.QbeDriver'),
	(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'EXPORT_TYPE' AND VALUE_CD = 'XLSX'),
	false);
commit;

Change after 3.1  14/9/2011 Giulio

-- 6/12/2011 Giulio
CREATE TABLE SBI_I18N_MESSAGES (
  LANGUAGE_CD INTEGER NOT NULL,
  LABEL VARCHAR(200) NOT NULL,
  MESSAGE TEXT,
  PRIMARY KEY (LANGUAGE_CD, LABEL)
);

ALTER TABLE SBI_I18N_MESSAGES ADD CONSTRAINT FK_SBI_I18N_MESSAGES FOREIGN KEY (LANGUAGE_CD) REFERENCES SBI_DOMAINS(VALUE_ID);


INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'ITA','Italian','LANG','language ISO Code','Italian', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'ENG','English','LANG','language ISO Code','English', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'FRA','French','LANG','language ISO Code','French', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
VALUES ((SELECT next_val FROM hibRernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'SPA','Spanish','LANG','language ISO Code','Spanish', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;
--Monica 20/12/11
CREATE TABLE  SBI_KPI_COMMENTS(
  KPI_COMMENT_ID int(11) NOT NULL AUTO_INCREMENT,
  KPI_INST_ID int(11) DEFAULT NULL,
  BIN_ID int(11) DEFAULT NULL,
  EXEC_REQ varchar(500) DEFAULT NULL,
  OWNER varchar(50) DEFAULT NULL,
  ISPUBLIC tinyint(1) DEFAULT NULL,
  CREATION_DATE timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  LAST_CHANGE_DATE timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  USER_IN varchar(100) NOT NULL,
  USER_UP varchar(100) DEFAULT NULL,
  USER_DE varchar(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  TIME_UP timestamp NULL DEFAULT NULL,
  TIME_DE timestamp NULL DEFAULT NULL,
  SBI_VERSION_IN varchar(10) DEFAULT NULL,
  SBI_VERSION_UP varchar(10) DEFAULT NULL,
  SBI_VERSION_DE varchar(10) DEFAULT NULL,
  META_VERSION varchar(100) DEFAULT NULL,
  ORGANIZATION varchar(20) DEFAULT NULL,
  PRIMARY KEY (KPI_COMMENT_ID),
  UNIQUE KEY XAK1SBI_KPI_COMMENT (KPI_COMMENT_ID),
  KEY FK_SBI_KPI_COMMENT_1 (BIN_ID),
  KEY FK_SBI_KPI_COMMENT_2 (KPI_INST_ID),
  CONSTRAINT FK_SBI_KPI_COMMENT_1 FOREIGN KEY (BIN_ID) REFERENCES SBI_BINARY_CONTENTS (BIN_ID),
  CONSTRAINT FK_SBI_KPI_COMMENT_2 FOREIGN KEY (KPI_INST_ID) REFERENCES SBI_KPI_INSTANCE (ID_KPI_INSTANCE)
);
// 23/01/2012   Giulio

CREATE TABLE SBI_PROGRESS_THREAD (
       PROGRESS_THREAD_ID   INTEGER NOT NULL,
       USER_ID              VARCHAR(100) NOT NULL,
       PARTIAL              INTEGER,
       TOTAL        	      INTEGER,
       FUNCTION_CD         VARCHAR(200),
       STATUS              VARCHAR(4000),
       RANDOM_KEY			VARCHAR(4000),
       TYPE 				VARCHAR(200),
       PRIMARY KEY (PROGRESS_THREAD_ID)
)

insert into hibernate_sequences(next_val,sequence_name) values (ifnull((select max(PROGRESS_THREAD_ID)+1 from SBI_PROGRESS_THREAD) ,1),'SBI_PROGRESS_THREAD');


ALTER TABLE SBI_EXT_ROLES ADD COLUMN DO_MASSIVE_EXPORT BOOLEAN DEFAULT TRUE;

-- monica 03/02/2012
ALTER TABLE SBI_UDP_VALUE MODIFY COLUMN VALUE VARCHAR(1000) CHARACTER SET latin1 COLLATE latin1_swedish_ci DEFAULT NULL;


-- 6 febbraio
INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, USER_IN) VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),'JNDI_THREAD_MANAGER', 'JNDI_THREAD_MANAGER', 'Jndi to build work manager', true, 'java:comp/env/wm/SpagoWorkManager',(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'STRING' AND DOMAIN_CD = 'PAR_TYPE'), 'biadmin');=======

-- 22/02/2012 Monica
INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
	VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'MOBILE_TABLE','sbidomains.nm.mobile.table','BIOBJ_TYPE','BI Object types','sbidomains.ds.mobile.table', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
	VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'MOBILE_CHART','sbidomains.nm.mobile.chart','BIOBJ_TYPE','BI Object types','sbidomains.ds.mobile.chart', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
	VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
	'MOBILE_COMPOSED','sbidomains.nm.mobile.composed','BIOBJ_TYPE','BI Object types','sbidomains.ds.mobile.composed', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_ENGINES (ENGINE_ID,NAME, ENCRYPT, LABEL,MAIN_URL, DRIVER_NM, ENGINE_TYPE,BIOBJ_TYPE,USE_DATASOURCE,USE_DATASET, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_ENGINES'),'Table Mobile Engine', 0, 'TableMobileEngine','/SpagoBIMobileEngine/servlet/AdapterHTTP?ACTION_NAME=MOBILE_ENGINE_START_ACTION','it.eng.spagobi.engines.drivers.generic.GenericDriver',(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ENGINE_TYPE' AND VALUE_CD = 'EXT'),(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'MOBILE_TABLE'),false, true, 'biadmin', current_timestamp);
INSERT INTO SBI_ENGINES (ENGINE_ID, NAME, ENCRYPT, LABEL,MAIN_URL, DRIVER_NM, ENGINE_TYPE,BIOBJ_TYPE,USE_DATASOURCE,USE_DATASET, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_ENGINES'),'Chart Mobile Engine', 0, 'ChartMobileEngine','/SpagoBIMobileEngine/servlet/AdapterHTTP?ACTION_NAME=MOBILE_ENGINE_START_ACTION','it.eng.spagobi.engines.drivers.generic.GenericDriver',(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ENGINE_TYPE' AND VALUE_CD = 'EXT'),(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'MOBILE_CHART'),false, true, 'biadmin', current_timestamp);
INSERT INTO SBI_ENGINES (ENGINE_ID, NAME, ENCRYPT, LABEL,MAIN_URL, DRIVER_NM, ENGINE_TYPE,BIOBJ_TYPE,USE_DATASOURCE,USE_DATASET, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_ENGINES'),'Composed Mobile Engine', 0, 'ComposedMobileEngine','/SpagoBIMobileEngine/servlet/AdapterHTTP?ACTION_NAME=MOBILE_ENGINE_START_ACTION','it.eng.spagobi.engines.drivers.generic.GenericDriver',(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ENGINE_TYPE' AND VALUE_CD = 'EXT'),(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'MOBILE_COMPOSED'),false, true, 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+3 where sequence_name = 'SBI_ENGINES';
commit;

-- 12/03/2012 Antonella
INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
    'CHART','Chart','BIOBJ_TYPE','BI Object types','sbidomains.ds.chart', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_ENGINES (ENGINE_ID, NAME, ENCRYPT, LABEL,MAIN_URL, DRIVER_NM, ENGINE_TYPE,BIOBJ_TYPE,USE_DATASOURCE,USE_DATASET, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_ENGINES'),'ChartExternalEngine', 0, 'ChartExternalEngine','/SpagoBIChartEngine/servlet/AdapterHTTP','it.eng.spagobi.engines.drivers.chart.ChartDriver',(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ENGINE_TYPE' AND VALUE_CD = 'EXT'),(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'CHART'),false, true, 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ENGINES';
commit;

INSERT INTO SBI_EXPORTERS (ENGINE_ID,DOMAIN_ID,DEFAULT_VALUE)
	VALUES ((SELECT ENGINE_ID FROM SBI_ENGINES WHERE LABEL = 'ChartExternalEngine'),
	(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'EXPORT_TYPE' AND VALUE_CD = 'PDF'),
	false);
commit;
INSERT INTO SBI_EXPORTERS (ENGINE_ID,DOMAIN_ID,DEFAULT_VALUE)
	VALUES ((SELECT ENGINE_ID FROM SBI_ENGINES WHERE LABEL = 'ChartExternalEngine'),
	(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'EXPORT_TYPE' AND VALUE_CD = 'JPG'),
	true);
commit;

update sbi_engines set main_url = '/SpagoBIConsoleEngine/servlet/AdapterHTTP', driver_nm = 'it.eng.spagobi.engines.drivers.console.ConsoleDriver' where label = 'ConsoleEngine';
commit;

-- 02/05/2012 Marco
ALTER TABLE SBI_LOV ADD COLUMN DATASET_ID INT(11) AFTER ORGANIZATION,
 ADD CONSTRAINT FK_SBI_LOV_2 FOREIGN KEY FK_SBI_LOV_2 (DATASET_ID)
    REFERENCES SBI_DATA_SET (DS_ID)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
    'DATASET','sbidomains.nm.dataset','INPUT_TYPE','Input mode and values','sbidomains.ds.dataset', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

-- 07/05/2012 Alberto Ghedin
ALTER TABLE SBI_EXT_ROLES ADD COLUMN EDIT_WORKSHEET BOOLEAN DEFAULT TRUE;

-- 10/05/2012 Andrea Gioia
DELETE FROM SBI_DOMAINS WHERE domain_cd = 'SCRIPT_TYPE' AND value_cd='ejs';
UPDATE SBI_DOMAINS SET value_cd='ECMAScript' WHERE domain_cd = 'SCRIPT_TYPE' AND value_cd='rhino-nonjdk';
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN QUERY_SCRIPT TEXT DEFAULT NULL;
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN QUERY_SCRIPT_LANGUAGE VARCHAR(100) DEFAULT NULL;

-- 01/06/2012 Antonella
ALTER TABLE SBI_DATA_SET_HISTORY MODIFY COLUMN PARAMS VARCHAR(4000);

-- 14/06/2012 Davide (supporto per il multi-tenancy)
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN ORGANIZATION VARCHAR(20);
UPDATE SBI_DATA_SET_HISTORY set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_CHECKS set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_CHECKS  DROP INDEX XAK1SBI_CHECKS , ADD UNIQUE XAK1SBI_CHECKS (LABEL, ORGANIZATION);

UPDATE SBI_DOMAINS set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_ENGINES set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_ENGINES DROP INDEX XAK1SBI_ENGINES , ADD UNIQUE XAK1SBI_ENGINES (LABEL, ORGANIZATION);

UPDATE SBI_EXT_ROLES set ORGANIZATION = 'SPAGOBI';
commit;


DELIMITER $$

CREATE PROCEDURE UPGRADE_SBI_EXT_ROLES()
 BEGIN
 IF  ((
         select count(*)
         from INFORMATION_SCHEMA.TABLE_CONSTRAINTS
         WHERE CONSTRAINT_NAME = 'XAK1SBI_EXT_ROLES'
         AND TABLE_NAME = 'SBI_EXT_ROLES'
         and TABLE_SCHEMA = SCHEMA()
      ) > 0 )
       THEN
          ALTER TABLE SBI_EXT_ROLES DROP INDEX XAK1SBI_EXT_ROLES;
          ALTER TABLE SBI_EXT_ROLES ADD UNIQUE XAK1SBI_EXT_ROLES (NAME, ORGANIZATION);
       ELSE
          ALTER TABLE SBI_EXT_ROLES ADD UNIQUE XAK1SBI_EXT_ROLES (NAME, ORGANIZATION);
END IF;
END $$

DELIMITER ;
CALL UPGRADE_SBI_EXT_ROLES();

DROP PROCEDURE IF EXISTS UPGRADE_SBI_EXT_ROLES;

UPDATE SBI_FUNC_ROLE set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_FUNCTIONS set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_FUNCTIONS  DROP INDEX XAK1SBI_FUNCTIONS , ADD UNIQUE XAK1SBI_FUNCTIONS (CODE, ORGANIZATION);

UPDATE SBI_LOV set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_LOV DROP INDEX XAK1SBI_LOV  , ADD UNIQUE XAK1SBI_LOV (LABEL, ORGANIZATION);

UPDATE SBI_OBJ_FUNC set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_OBJ_PAR set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_OBJ_STATE set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_OBJECTS set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_OBJECTS DROP INDEX XAK1SBI_OBJECTS , ADD UNIQUE XAK1SBI_OBJECTS (LABEL, ORGANIZATION);

UPDATE SBI_OBJECTS_RATING set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_PARAMETERS set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_PARAMETERS DROP INDEX XAK1SBI_PARAMETERS , ADD UNIQUE XAK1SBI_PARAMETERS (LABEL, ORGANIZATION);

UPDATE SBI_PARUSE set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_PARUSE_CK set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_PARUSE_DET set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_SUBREPORTS set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_OBJ_PARUSE set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_EVENTS set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_EVENTS_LOG set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_AUDIT set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_GEO_MAPS set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_GEO_MAPS DROP INDEX XAK1SBI_GEO_MAPS , ADD UNIQUE XAK1SBI_GEO_MAPS (NAME, ORGANIZATION);

UPDATE SBI_GEO_FEATURES set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_GEO_FEATURES DROP INDEX XAK1SBI_GEO_FEATURES , ADD UNIQUE XAK1SBI_GEO_FEATURES (NAME, ORGANIZATION);

UPDATE SBI_GEO_MAP_FEATURES set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_VIEWPOINTS set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_DATA_SOURCE set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_DATA_SOURCE DROP INDEX XAK1SBI_DATA_SOURCE , ADD UNIQUE XAK1SBI_DATA_SOURCE (LABEL, ORGANIZATION);

UPDATE SBI_BINARY_CONTENTS set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_BINARY_CONTENTS DROP INDEX XAK1SBI_BINARY_CONTENTS;

UPDATE SBI_OBJECT_TEMPLATES set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_OBJECT_TEMPLATES DROP INDEX XAK1SBI_OBJECT_TEMPLATES;

UPDATE SBI_OBJECT_NOTES set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_OBJECT_NOTES DROP INDEX XAK1SBI_OBJECT_NOTES;

UPDATE SBI_SUBOBJECTS set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_SUBOBJECTS DROP INDEX XAK1SBI_SUBOBJECTS;

UPDATE SBI_SNAPSHOTS set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_SNAPSHOTS DROP INDEX XAK1SBI_SNAPSHOTS;

UPDATE SBI_USER_FUNC set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_USER_FUNC DROP INDEX XAK1SBI_USER_FUNC;

ALTER TABLE SBI_ROLE_TYPE_USER_FUNC DROP INDEX XAK1SBI_ROLE_TYPE_USER_FUNC;

UPDATE SBI_DOSSIER_PRES set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_DOSSIER_PRES DROP INDEX XAK1SBI_DOSSIER_PRES;

UPDATE SBI_DOSSIER_TEMP set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_DOSSIER_TEMP DROP INDEX XAK1SBI_DOSSIER_TEMP;

UPDATE SBI_DOSSIER_BIN_TEMP set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_DOSSIER_BIN_TEMP DROP INDEX XAK1SBI_DOSSIER_BIN_TEMP;

UPDATE SBI_DIST_LIST set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_DIST_LIST DROP INDEX XAK1SBI_SBI_DIST_LIST, ADD UNIQUE XAK1SBI_SBI_DIST_LIST (NAME, ORGANIZATION);

UPDATE SBI_DIST_LIST_USER set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_DIST_LIST_USER DROP INDEX XAK1SBI_DIST_LIST_USER;

UPDATE SBI_DIST_LIST_OBJECTS set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_DIST_LIST_OBJECTS DROP INDEX XAK1SBI_DIST_LIST_OBJECTS;

UPDATE SBI_REMEMBER_ME set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_REMEMBER_ME DROP INDEX XAK1SBI_REMEMBER_ME;

UPDATE SBI_DATA_SET set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_DATA_SET DROP INDEX XAK1SBI_DATA_SET , ADD UNIQUE XAK1SBI_DATA_SET (LABEL, ORGANIZATION);

UPDATE SBI_MENU set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_MENU_ROLE set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_KPI_ROLE set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_KPI_ROLE DROP INDEX XAK1SBI_KPI_ROLE;

UPDATE SBI_KPI set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_KPI DROP INDEX XAK1SBI_KPI , ADD UNIQUE XAK1SBI_KPI (CODE, ORGANIZATION);

UPDATE SBI_KPI_DOCUMENTS set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_MEASURE_UNIT set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_THRESHOLD set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_THRESHOLD DROP INDEX XIF1SBI_THRESHOLD , ADD UNIQUE XIF1SBI_THRESHOLD (CODE, ORGANIZATION);

UPDATE SBI_THRESHOLD_VALUE set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_KPI_MODEL set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_KPI_MODEL DROP INDEX XIF1SBI_KPI_MODEL ,  ADD UNIQUE XIF1SBI_KPI_MODEL (KPI_MODEL_LBL, ORGANIZATION);

UPDATE SBI_KPI_PERIODICITY set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_KPI_PERIODICITY DROP INDEX XIF1SBI_KPI_PERIODICITY , ADD UNIQUE XIF1SBI_KPI_PERIODICITY (NAME, ORGANIZATION);

UPDATE SBI_KPI_INSTANCE set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_KPI_INST_PERIOD set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_KPI_INSTANCE_HISTORY set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_KPI_INSTANCE_HISTORY DROP INDEX XIF1SBI_KPI_INST_HISTORY;

UPDATE SBI_KPI_VALUE set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_KPI_VALUE DROP INDEX XIF1SBI_KPI_VALUE;

UPDATE SBI_KPI_MODEL_INST set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_KPI_MODEL_INST DROP INDEX XAK2SBI_KPI_MODEL_INST , ADD UNIQUE XAK2SBI_KPI_MODEL_INST (LABEL, ORGANIZATION);

UPDATE SBI_RESOURCES set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_RESOURCES DROP INDEX XIF1SBI_RESOURCES , ADD UNIQUE XIF1SBI_RESOURCES (RESOURCE_CODE, ORGANIZATION);

UPDATE SBI_KPI_MODEL_RESOURCES set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_ALARM set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_ALARM DROP INDEX XIF1SBI_ALARM , ADD UNIQUE XIF1SBI_ALARM (LABEL, ORGANIZATION);

UPDATE SBI_ALARM_EVENT set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_ALARM_CONTACT set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_ALARM_CONTACT DROP INDEX XIF1SBI_ALARM_CONTACT , ADD UNIQUE XIF1SBI_ALARM_CONTACT (NAME, ORGANIZATION);

UPDATE SBI_OBJ_METADATA set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_OBJ_METADATA DROP INDEX XAK1SBI_OBJ_METADATA , ADD UNIQUE XAK1SBI_OBJ_METADATA (LABEL, ORGANIZATION);

UPDATE SBI_OBJ_METACONTENTS set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_CONFIG set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_USER set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_ATTRIBUTE set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_ATTRIBUTE ADD UNIQUE XAK1SBI_USER ( ATTRIBUTE_NAME, ORGANIZATION );

UPDATE SBI_USER_ATTRIBUTES set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_EXT_USER_ROLES set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_UDP set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_UDP DROP INDEX XAK1SBI_UDP , ADD UNIQUE XAK1SBI_UDP (LABEL, ORGANIZATION);

UPDATE SBI_UDP_VALUE set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_KPI_REL set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_KPI_ERROR set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_ORG_UNIT set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_ORG_UNIT DROP INDEX XIF1SBI_ORG_UNIT , ADD UNIQUE XIF1SBI_ORG_UNIT (LABEL, NAME, ORGANIZATION);

UPDATE SBI_ORG_UNIT_HIERARCHIES set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_ORG_UNIT_HIERARCHIES DROP INDEX XIF1SBI_ORG_UNIT_HIERARCHIES , ADD UNIQUE XIF1SBI_ORG_UNIT_HIERARCHIES (LABEL, COMPANY, ORGANIZATION);

commit;

UPDATE SBI_ORG_UNIT_NODES set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_ORG_UNIT_GRANT set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_ORG_UNIT_GRANT DROP INDEX XIF1SBI_ORG_UNIT_GRANT , ADD UNIQUE XIF1SBI_ORG_UNIT_GRANT (LABEL, ORGANIZATION);

UPDATE SBI_ORG_UNIT_GRANT_NODES set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_GOAL set ORGANIZATION = 'SPAGOBI';
commit;
ALTER TABLE SBI_GOAL ADD UNIQUE XIF1SBI_SBI_GOAL (NAME, ORGANIZATION);

UPDATE SBI_GOAL_HIERARCHY set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_GOAL_KPI set ORGANIZATION = 'SPAGOBI';
commit;

UPDATE SBI_OBJ_PARVIEW set ORGANIZATION = 'SPAGOBI';
commit;

ALTER TABLE SBI_I18N_MESSAGES ADD COLUMN USER_IN VARCHAR( 100 ) NOT NULL;
ALTER TABLE SBI_I18N_MESSAGES ADD COLUMN USER_UP VARCHAR( 100 );
ALTER TABLE SBI_I18N_MESSAGES ADD COLUMN USER_DE VARCHAR( 100 );
ALTER TABLE SBI_I18N_MESSAGES ADD COLUMN TIME_IN TIMESTAMP NOT NULL;
ALTER TABLE SBI_I18N_MESSAGES ADD COLUMN TIME_UP TIMESTAMP NULL DEFAULT NULL;
ALTER TABLE SBI_I18N_MESSAGES ADD COLUMN TIME_DE TIMESTAMP NULL DEFAULT NULL;
ALTER TABLE SBI_I18N_MESSAGES ADD COLUMN SBI_VERSION_IN VARCHAR( 10 );
ALTER TABLE SBI_I18N_MESSAGES ADD COLUMN SBI_VERSION_UP VARCHAR( 10 );
ALTER TABLE SBI_I18N_MESSAGES ADD COLUMN SBI_VERSION_DE VARCHAR( 10 );
ALTER TABLE SBI_I18N_MESSAGES ADD COLUMN META_VERSION VARCHAR( 100 );
ALTER TABLE SBI_I18N_MESSAGES ADD COLUMN ORGANIZATION VARCHAR( 20 );

UPDATE SBI_I18N_MESSAGES set ORGANIZATION = 'SPAGOBI';
commit;

ALTER TABLE SBI_I18N_MESSAGES DROP PRIMARY KEY , ADD PRIMARY KEY (LANGUAGE_CD, LABEL, ORGANIZATION);

UPDATE SBI_KPI_COMMENTS set ORGANIZATION = 'SPAGOBI';
commit;

CREATE TABLE SBI_ORGANIZATIONS (
       ID     INTEGER NOT NULL,
       NAME   VARCHAR(20),
       UNIQUE XAK1SBI_ORGANIZATIONS (NAME),
       PRIMARY KEY (ID)
)ENGINE=InnoDB;

INSERT INTO SBI_ORGANIZATIONS(ID,NAME) VALUES (1,'SPAGOBI');
INSERT INTO hibernate_sequences(NEXT_VAL,SEQUENCE_NAME) VALUES (2,'SBI_ORGANIZATIONS');
commit;

SET FOREIGN_KEY_CHECKS = 0;

update QRTZ_JOB_DETAILS set JOB_GROUP = CONCAT('SPAGOBI/' , JOB_GROUP);
update QRTZ_TRIGGERS set JOB_GROUP = CONCAT('SPAGOBI/' , JOB_GROUP);
update QRTZ_JOB_LISTENERS set JOB_GROUP = CONCAT('SPAGOBI/' , JOB_GROUP);
update QRTZ_FIRED_TRIGGERS set JOB_GROUP = CONCAT('SPAGOBI/' , JOB_GROUP);

commit;

SET FOREIGN_KEY_CHECKS = 1;

-- 19/06/2012 Davide: MAXIMIZER_ENABLED column for manual input on analytical drivers' modality
ALTER TABLE SBI_PARUSE ADD COLUMN MAXIMIZER_ENABLED BOOLEAN DEFAULT FALSE;
UPDATE SBI_PARUSE SET MAXIMIZER_ENABLED = FALSE;
commit;

-- 17/07/2012 Davide: new FinalUsersManagement user functionality
INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'FinalUsersManagement','FinalUsersManagement', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';
commit;

INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'USER' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'FinalUsersManagement'));
commit;

ALTER TABLE SBI_EXT_ROLES ADD COLUMN MANAGE_USERS BOOLEAN DEFAULT FALSE;

-- 30/07/2012 Antonella: Deleted 'DATE_DEFAULT' as parameter type. The only parameters types usable are: date, num and string!
update SBI_PARAMETERS set PAR_TYPE_CD = 'DATE', PAR_TYPE_ID =
	(select VALUE_ID from SBI_DOMAINS where value_cd = 'DATE' and domain_cd = 'PAR_TYPE') WHERE PAR_TYPE_CD = 'DATE_DEFAULT';
delete from SBI_DOMAINS  where VALUE_NM = 'sbidomains.nm.date.default';
commit;


-- 11/01/2014 Andrea: added some new selection modalities for analytical driver to domain table and moved multiplicity selction to document detail
-- see: SPAGOBI-1043
DELETE FROM sbi_domains WHERE domain_cd = 'SELECTION_TYPE';

INSERT INTO sbi_domains (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM, VALUE_DS, USER_IN, ORGANIZATION, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'LIST', 'sbidomains.nm.list', 'SELECTION_TYPE', 'Selection modality of parameter values', 'sbidomains.ds.list', 'SPAGOBI', 'SPAGOBI', current_timestamp);
UPDATE hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
COMMIT;

INSERT INTO sbi_domains (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM, VALUE_DS, USER_IN, ORGANIZATION, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'LOOKUP', 'sbidomains.nm.lookup', 'SELECTION_TYPE', 'Selection modality of parameter values', 'sbidomains.ds.lookup', 'SPAGOBI', 'SPAGOBI', current_timestamp);
UPDATE hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
COMMIT;

INSERT INTO sbi_domains (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM, VALUE_DS, USER_IN, ORGANIZATION, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'SLIDER', 'sbidomains.nm.slider', 'SELECTION_TYPE', 'Selection modality of parameter values', 'sbidomains.ds.slider', 'SPAGOBI', 'SPAGOBI', current_timestamp);
UPDATE hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
COMMIT;

INSERT INTO sbi_domains (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM, VALUE_DS, USER_IN, ORGANIZATION, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'TREE', 'sbidomains.nm.tree', 'SELECTION_TYPE', 'Selection modality of parameter values', 'sbidomains.ds.tree', 'SPAGOBI', 'SPAGOBI', current_timestamp);
UPDATE hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
COMMIT;

INSERT INTO sbi_domains (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM, VALUE_DS, USER_IN, ORGANIZATION, TIME_IN)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'COMBOBOX', 'sbidomains.nm.combobox', 'SELECTION_TYPE', 'Selection modality of parameter values', 'sbidomains.ds.combobox', 'SPAGOBI', 'SPAGOBI', current_timestamp);
UPDATE hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
COMMIT;

UPDATE sbi_obj_par SET MULT_FL=0;
UPDATE sbi_obj_par SET MULT_FL=1 WHERE par_id IN (SELECT a.par_id FROM   sbi_parameters a, sbi_paruse m
WHERE a.par_id = m.par_id and selection_type = 'CHECK_LIST');
UPDATE sbi_paruse SET selection_type='LOOKUP' WHERE selection_type = 'CHECK_LIST'OR selection_type = 'LIST'

COMMIT;

-- 11/01/2014 Andrea: moved mandatory selction to document detail
-- see: SPAGOBI-1043
UPDATE sbi_obj_par SET REQ_FL=0;
UPDATE sbi_obj_par SET REQ_FL=1 WHERE par_id IN (SELECT a.par_id FROM   sbi_parameters a, sbi_paruse m, sbi_paruse_ck r, sbi_checks c
WHERE a.par_id = m.par_id and m.use_id = r.use_id and r.check_id = c.check_id and c.value_type_cd = 'MANDATORY')

-- 29/01/2013 Davide: Catalogues for meta-models and artifacts
INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'ArtifactCatalogueManagement','ArtifactCatalogueManagement', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';
commit;

INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'ArtifactCatalogueManagement'));
commit;

INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'MetaModelsCatalogueManagement','MetaModelsCatalogueManagement', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';
commit;

INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'MetaModelsCatalogueManagement'));
commit;

CREATE TABLE SBI_META_MODELS (
       ID                   INTEGER NOT NULL,
       NAME                 VARCHAR(100) NOT NULL,
       DESCR                VARCHAR(500) NULL,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       CONSTRAINT XAK1SBI_META_MODELS UNIQUE (NAME, ORGANIZATION),
       PRIMARY KEY (ID)
) ENGINE=InnoDB;

CREATE TABLE SBI_META_MODELS_VERSIONS (
        ID                   INTEGER NOT NULL,
        MODEL_ID             INTEGER NOT NULL,
        CONTENT              MEDIUMBLOB NOT NULL,
        NAME                 VARCHAR(100),
        PROG                 INTEGER,
        CREATION_DATE        TIMESTAMP NULL DEFAULT NULL,
        CREATION_USER        VARCHAR(50) NOT NULL,
        ACTIVE               BOOLEAN,
        USER_IN              VARCHAR(100) NOT NULL,
        USER_UP              VARCHAR(100),
        USER_DE              VARCHAR(100),
        TIME_IN              TIMESTAMP NOT NULL,
        TIME_UP              TIMESTAMP NULL DEFAULT NULL,
        TIME_DE              TIMESTAMP NULL DEFAULT NULL,
        SBI_VERSION_IN       VARCHAR(10),
        SBI_VERSION_UP       VARCHAR(10),
        SBI_VERSION_DE       VARCHAR(10),
        META_VERSION         VARCHAR(100),
        ORGANIZATION         VARCHAR(20),
        PRIMARY KEY (ID)
) ENGINE=InnoDB;

ALTER TABLE SBI_META_MODELS_VERSIONS ADD CONSTRAINT FK_SBI_META_MODELS_VERSIONS_1 FOREIGN KEY ( MODEL_ID ) REFERENCES SBI_META_MODELS( ID ) ON DELETE CASCADE;

CREATE TABLE SBI_ARTIFACTS (
       ID                   INTEGER NOT NULL,
       NAME                 VARCHAR(100) NOT NULL,
       DESCR                VARCHAR(500) NULL,
       TYPE                 VARCHAR(50) NULL,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       CONSTRAINT XAK1SBI_ARTIFACTS UNIQUE (NAME, TYPE, ORGANIZATION),
       PRIMARY KEY (ID)
) ENGINE=InnoDB;

CREATE TABLE SBI_ARTIFACTS_VERSIONS (
        ID                   INTEGER NOT NULL,
        ARTIFACT_ID          INTEGER NOT NULL,
        CONTENT              MEDIUMBLOB NOT NULL,
        NAME                 VARCHAR(100),
        PROG                 INTEGER,
        CREATION_DATE        TIMESTAMP NULL DEFAULT NULL,
        CREATION_USER        VARCHAR(50) NOT NULL,
        ACTIVE               BOOLEAN,
        USER_IN              VARCHAR(100) NOT NULL,
        USER_UP              VARCHAR(100),
        USER_DE              VARCHAR(100),
        TIME_IN              TIMESTAMP NOT NULL,
        TIME_UP              TIMESTAMP NULL DEFAULT NULL,
        TIME_DE              TIMESTAMP NULL DEFAULT NULL,
        SBI_VERSION_IN       VARCHAR(10),
        SBI_VERSION_UP       VARCHAR(10),
        SBI_VERSION_DE       VARCHAR(10),
        META_VERSION         VARCHAR(100),
        ORGANIZATION         VARCHAR(20),
        PRIMARY KEY (ID)
) ENGINE=InnoDB;

ALTER TABLE SBI_ARTIFACTS_VERSIONS ADD CONSTRAINT FK_SBI_ARTIFACTS_VERSIONS_1 FOREIGN KEY ( ARTIFACT_ID ) REFERENCES SBI_ARTIFACTS( ID ) ON DELETE CASCADE;

-- 30/01/2013 Davide: analytical drivers' default values
ALTER TABLE SBI_PARUSE ADD COLUMN DEFAULT_LOV_ID INTEGER NULL;
ALTER TABLE SBI_PARUSE ADD COLUMN DEFAULT_FORMULA VARCHAR(4000) NULL;
ALTER TABLE SBI_PARUSE ADD CONSTRAINT FK_SBI_PARUSE_3 FOREIGN KEY ( DEFAULT_LOV_ID ) REFERENCES SBI_LOV ( LOV_ID ) ON DELETE RESTRICT;

-- 08/04/2013 Davide: definition of "create Worksheet from dataset user functionality"
INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'CreateWorksheetFromDatasetUserFunctionality','CreateWorksheetFromDatasetUserFunctionality', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';
commit;
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'USER' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'CreateWorksheetFromDatasetUserFunctionality'));
commit;

--- 23/04/2013 Marco: added column Category_Id on SBI_META_MODELS
ALTER TABLE SBI_META_MODELS ADD COLUMN CATEGORY_ID INTEGER NULL;

--- 23/04/2013 Anto: added column for persistence dataset management
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN IS_PERSISTED BOOLEAN DEFAULT FALSE;
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN DATA_SOURCE_PERSIST_ID INTEGER NULL;
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN IS_FLAT_DATASET BOOLEAN DEFAULT FALSE;
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN FLAT_TABLE_NAME VARCHAR(50) NULL;
ALTER TABLE SBI_DATA_SET_HISTORY ADD COLUMN DATA_SOURCE_FLAT_ID INTEGER NULL;

ALTER TABLE SBI_DATA_SET_HISTORY ADD CONSTRAINT FK_SBI_DATA_SET_DS3 FOREIGN KEY ( DATA_SOURCE_PERSIST_ID ) REFERENCES SBI_DATA_SOURCE( DS_ID ) ON DELETE CASCADE;
ALTER TABLE SBI_DATA_SET_HISTORY ADD CONSTRAINT FK_SBI_DATA_SET_DS4 FOREIGN KEY ( DATA_SOURCE_FLAT_ID ) REFERENCES SBI_DATA_SOURCE( DS_ID ) ON DELETE CASCADE;

--- 06/05/2013 Marco: added table SBI_EXT_ROLES_CATEGORY
CREATE TABLE  SBI_EXT_ROLES_CATEGORY (
  EXT_ROLE_ID INTEGER NOT NULL,
  CATEGORY_ID INTEGER NOT NULL,
  PRIMARY KEY (EXT_ROLE_ID,CATEGORY_ID),
  KEY FK_SB_EXT_ROLES_META_MODEL_CATEGORY_2 (CATEGORY_ID),
  CONSTRAINT FK_SB_EXT_ROLES_META_MODEL_CATEGORY_1 FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID),
  CONSTRAINT FK_SB_EXT_ROLES_META_MODEL_CATEGORY_2 FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_DOMAINS (VALUE_ID)
) ENGINE=InnoDB ;

-- 27/05/2013 Antonella: modifies for refactoring dataset:
CREATE TABLE SBI_DATA_SET_TEMP (
	   DS_ID 		   		        INTEGER NOT NULL ,
	   VERSION_NUM	   		 	  INTEGER NOT NULL,
	   ACTIVE		   		 	      BOOLEAN NOT NULL,
	   DESCR 		   		        VARCHAR(160),
	   LABEL	 	   		        VARCHAR(50) NOT NULL,
	   NAME	   	   			      VARCHAR(50) NOT NULL,

	   OBJECT_TYPE   		 	    VARCHAR(50),
	   DS_METADATA    		 	  TEXT,
	   PARAMS         		 	  VARCHAR(4000),
	   CATEGORY_ID    		 	  INTEGER,
	   TRANSFORMER_ID 		 	  INTEGER,
     PIVOT_COLUMN   		 	  VARCHAR(50),
	   PIVOT_ROW      		 	  VARCHAR(50),
	   PIVOT_VALUE   		 	    VARCHAR(50),
	   NUM_ROWS	   		 	      BOOLEAN DEFAULT FALSE,
	   IS_PERSISTED  		 	    BOOLEAN DEFAULT FALSE,
	   DATA_SOURCE_PERSIST_ID INTEGER NULL,
	   IS_FLAT_DATASET 		    BOOLEAN DEFAULT FALSE,
	   FLAT_TABLE_NAME 		    VARCHAR(50) NULL,
	   DATA_SOURCE_FLAT_ID 	  INTEGER NULL,

	   CONFIGURATION          TEXT NULL,

	   USER_IN                VARCHAR(100) NOT NULL,
	   USER_UP                VARCHAR(100),
	   USER_DE                VARCHAR(100),
	   TIME_IN                TIMESTAMP NOT NULL,
	   TIME_UP                TIMESTAMP NULL DEFAULT NULL,
	   TIME_DE                TIMESTAMP NULL DEFAULT NULL,
	   SBI_VERSION_IN         VARCHAR(10),
	   SBI_VERSION_UP         VARCHAR(10),
	   SBI_VERSION_DE         VARCHAR(10),
	   META_VERSION           VARCHAR(100),
	   ORGANIZATION           VARCHAR(20),

     UNIQUE XAK1SBI_DATA_SET (LABEL, VERSION_NUM, ORGANIZATION),
     PRIMARY KEY (DS_ID, VERSION_NUM)
) ENGINE=InnoDB;

INSERT SBI_DATA_SET_TEMP (DS_ID, VERSION_NUM, ACTIVE,  LABEL, DESCR, NAME, OBJECT_TYPE, DS_METADATA, PARAMS, CATEGORY_ID, TRANSFORMER_ID, PIVOT_COLUMN, PIVOT_ROW, PIVOT_VALUE, NUM_ROWS, IS_PERSISTED,
DATA_SOURCE_PERSIST_ID, IS_FLAT_DATASET, FLAT_TABLE_NAME, DATA_SOURCE_FLAT_ID, USER_IN, USER_UP, USER_DE, TIME_IN, TIME_UP, TIME_DE, SBI_VERSION_IN, SBI_VERSION_UP, SBI_VERSION_DE,
META_VERSION, ORGANIZATION, CONFIGURATION)
SELECT DS.DS_ID, ds_h.VERSION_NUM, ds_h.ACTIVE, ds.LABEL, ds.DESCR, ds.name,
ds_h.OBJECT_TYPE, ds_h.DS_METADATA,
ds_h.PARAMS, ds_h.CATEGORY_ID, ds_h.TRANSFORMER_ID, ds_h.PIVOT_COLUMN, ds_h.PIVOT_ROW,
ds_h.PIVOT_VALUE, ds_h.NUM_ROWS, ds_h.IS_PERSISTED, ds_h.DATA_SOURCE_PERSIST_ID,
ds_h.IS_FLAT_DATASET, ds_h.FLAT_TABLE_NAME, ds_h.DATA_SOURCE_FLAT_ID, ds_h.USER_IN,
null as USER_UP,null as USER_DE, ds_h.TIME_IN, null as TIME_UP, null as TIME_DE,
ds_h.SBI_VERSION_IN, null as SBI_VERSION_UP,  null as SBI_VERSION_DE, ds_h.META_VERSION,
ds_h.ORGANIZATION,
case when ds_h.OBJECT_TYPE = 'SbiQueryDataSet' then
concat('{"Query":"',REPLACE(ds_h.QUERY,'"','\\"'),'","queryScript":"',REPLACE(COALESCE(DS_H.QUERY_SCRIPT,''),'"','\\"'),'","queryScriptLanguage":"',COALESCE(QUERY_SCRIPT_LANGUAGE,''),'","dataSource":"',COALESCE(CAST((SELECT LABEL FROM SBI_DATA_SOURCE WHERE DS_ID = DATA_SOURCE_ID) AS CHAR),''),'"}')
WHEN ds_h.OBJECT_TYPE = 'SbiFileDataSet' then
CONCAT('{"fileName":"',COALESCE(DS_H.FILE_NAME,''),'"}')
WHEN ds_h.OBJECT_TYPE = 'SbiFileDataSet' then
CONCAT('{"SbiJClassDataSet":"',COALESCE(DS_H.JCLASS_NAME,''),'"}')
WHEN ds_h.OBJECT_TYPE = 'SbiWSDataSet' then
CONCAT('{"wsAddress":"',COALESCE(DS_H.ADRESS,''),'","wsOperation":"',COALESCE(DS_H.OPERATION,''),'"}')
WHEN ds_h.OBJECT_TYPE = 'SbiScriptDataSet' then
CONCAT('{"Script":"',REPLACE(COALESCE(DS_H.SCRIPT,''),'"','\\"'),'","scriptLanguage":"',COALESCE(DS_H.LANGUAGE_SCRIPT,''),'"}')
WHEN ds_h.OBJECT_TYPE = 'SbiCustomDataSet' then
CONCAT('{"customData":"',REPLACE(COALESCE(DS_H.CUSTOM_DATA,'"{}"'),'"','\\"'),'","jClassName":"',COALESCE(DS_H.JCLASS_NAME,''),'"}')
WHEN ds_h.OBJECT_TYPE = 'SbiQbeDataSet' then
CONCAT('{"qbeDatamarts":"',COALESCE(DS_H.DATAMARTS,''),'","qbeDataSource":"',COALESCE(CAST((SELECT LABEL FROM SBI_DATA_SOURCE WHERE DS_ID = DATA_SOURCE_ID) AS CHAR),''),'","qbeJSONQuery":"',REPLACE(COALESCE(DS_H.JSON_QUERY,''),'"','\\"'),'"}')
end AS CONFIGURATION
FROM
SBI_DATA_SET DS INNER JOIN SBI_DATA_SET_HISTORY DS_H ON (DS.DS_ID = DS_H.DS_ID)
order by ds_id, version_num;

commit;

--DROP TABLE SBI_DATA_SET_HISTORY CASCADE;   -- to do at the end, when all it's ended correctly!
--DROP TABLE SBI_DATA_SET CASCADE;           -- to do at the end, when all it's ended correctly!
RENAME TABLE SBI_DATA_SET TO SBI_DATA_SET_OLD;
RENAME TABLE SBI_DATA_SET_HISTORY TO SBI_DATA_SET_HISTORY_OLD;
RENAME TABLE SBI_DATA_SET_TEMP TO SBI_DATA_SET;
-- to do only after drop stmt
--ALTER TABLE SBI_DATA_SET ADD CONSTRAINT FK_SBI_DATA_SET_T  FOREIGN KEY ( TRANSFORMER_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID ) ON DELETE CASCADE;
--ALTER TABLE SBI_DATA_SET ADD CONSTRAINT FK_SBI_DATA_SET_CAT  FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_DOMAINS (VALUE_ID) ON DELETE CASCADE ON UPDATE RESTRICT;
--ALTER TABLE SBI_DATA_SET ADD CONSTRAINT FK_SBI_DATA_SET_DS3 FOREIGN KEY ( DATA_SOURCE_PERSIST_ID ) REFERENCES SBI_DATA_SOURCE( DS_ID ) ON DELETE CASCADE;
--ALTER TABLE SBI_DATA_SET ADD CONSTRAINT FK_SBI_DATA_SET_DS4 FOREIGN KEY ( DATA_SOURCE_FLAT_ID ) REFERENCES SBI_DATA_SOURCE( DS_ID ) ON DELETE CASCADE;

--DROP OLDER FK TO SBI_DATA_SET
ALTER TABLE SBI_LOV DROP FOREIGN KEY FK_SBI_LOV_2;
ALTER TABLE SBI_OBJECTS DROP FOREIGN KEY FK_SBI_OBJECTS_7;

--per la tabella sbi_kpi la fk non ha nome esplicito: bisogna rilevarlo tramite query e definire cosi' lo stmt di drop (per ora manualemnte!)
select constraint_name from INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE constraint_schema = '<SCHEMA_DB_NAME>' and
referenced_table_name = 'SBI_DATA_SET'  and table_name = 'SBI_KPI';
ALTER TABLE sbi_kpi DROP FOREIGN KEY <FK_NAME_GETTED>;

-- 28/05/2013 Antonella: insert records for selfservice dataset management
INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'SelfServiceDatasetManagement','SelfServiceDatasetManagement', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';
commit;
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'USER' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceDatasetManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceDatasetManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'DEV_ROLE' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceDatasetManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'TEST_ROLE' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceDatasetManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'MODEL_ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceDatasetManagement'));
commit;

-- 29/05/2013 Davide: Worksheet engine is able to use datasets
UPDATE SBI_ENGINES SET USE_DATASET = TRUE WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.worksheet.WorksheetDriver';
commit;


-- 07/06/2013 Alberto: insert records for selfservice metamodels management

INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'SelfServiceMetaModelManagement','SelfServiceMetaModelManagement', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';
commit;
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'USER' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceMetaModelManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceMetaModelManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'DEV_ROLE' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceMetaModelManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'TEST_ROLE' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceMetaModelManagement'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'MODEL_ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'SelfServiceMetaModelManagement'));
commit;

-- 11/06/2013 Alberto: add the data source column for the metamodels

ALTER TABLE SBI_META_MODELS add DATA_SOURCE_ID INTEGER;
ALTER TABLE SBI_META_MODELS ADD CONSTRAINT FK_SBIDATA_SOURCE FOREIGN KEY ( DATA_SOURCE_ID ) REFERENCES SBI_DATA_SOURCE( DS_ID );

-- 10/06/2013 Antonella: add columns for dataset PUBLIC / PRIVATE
ALTER TABLE SBI_DATA_SET ADD COLUMN OWNER VARCHAR(50);
ALTER TABLE SBI_DATA_SET ADD COLUMN IS_PUBLIC BOOLEAN DEFAULT FALSE;

UPDATE SBI_DATA_SET SET IS_PUBLIC = TRUE, OWNER = USER_IN;
COMMIT;

-- 20/06/2013 Davide: added DATASET_FILE_MAX_SIZE config parameter
INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, CATEGORY, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),
'SPAGOBI.DATASET_FILE_MAX_SIZE', 'DATASET FILE MAX SIZE', 'Max size for a file used as a dataset', true, '10485760',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'STRING' AND DOMAIN_CD = 'PAR_TYPE'), 'GENERIC_CONFIGURATION', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit;

-- 21/06/2013 Davide: fixed SPAGOBI.TIMESTAMP-FORMAT.format (was dd/MM/yyyy hh:mm:ss)
UPDATE SBI_CONFIG SET VALUE_CHECK = 'dd/MM/yyyy HH:mm:ss' WHERE LABEL = 'SPAGOBI.TIMESTAMP-FORMAT.format';
commit;

--21/06/2013 Anto: Added authorizations for final user management
ALTER TABLE SBI_EXT_ROLES ADD COLUMN SEE_DOCUMENT_BROWSER BOOLEAN DEFAULT TRUE;
ALTER TABLE SBI_EXT_ROLES ADD COLUMN SEE_FAVOURITES 	BOOLEAN DEFAULT TRUE;
ALTER TABLE SBI_EXT_ROLES ADD COLUMN SEE_SUBSCRIPTIONS 	BOOLEAN DEFAULT TRUE;
ALTER TABLE SBI_EXT_ROLES ADD COLUMN SEE_MY_DATA 		BOOLEAN DEFAULT TRUE;
ALTER TABLE SBI_EXT_ROLES ADD COLUMN SEE_TODO_LIST 		BOOLEAN DEFAULT TRUE;
ALTER TABLE SBI_EXT_ROLES ADD COLUMN CREATE_DOCUMENTS 	BOOLEAN DEFAULT TRUE;

-- 24/06/2013 Marco: Added default mandatory Dataset Metadata Properties
INSERT into SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'fieldType','fieldType','DS_META_PROPERTY','Data Set Metadata Property','Data Set Metadata Property','biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT into SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'type','type','DS_META_PROPERTY','Data Set Metadata Property','Data Set Metadata Property','biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

-- 25/06/2013 Marco: Added default mandatory Dataset Metadata Properties' Values
INSERT into SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'MEASURE','MEASURE','DS_META_VALUE','Data Set Metadata Value','Data Set Metadata Value','biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT into SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'ATTRIBUTE','ATTRIBUTE','DS_META_VALUE','Data Set Metadata Value','Data Set Metadata Value','biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT into SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'String','String','DS_META_VALUE','Data Set Metadata Value','Data Set Metadata Value','biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT into SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'Integer','Integer','DS_META_VALUE','Data Set Metadata Value','Data Set Metadata Value','biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT into SBI_DOMAINS (VALUE_ID,VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'Double','Double','DS_META_VALUE','Data Set Metadata Value','Data Set Metadata Value','biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

-- 11/07/2013 Antonella: Added PREVIEW_FILE on SBI_OBJECTS to manage img under resources/preview/images
ALTER TABLE SBI_OBJECTS ADD COLUMN PREVIEW_FILE VARCHAR(100);

-- 12/07/2013 Monica: Addedtables for community management
CREATE TABLE  SBI_COMMUNITY(
  COMMUNITY_ID int(11) NOT NULL AUTO_INCREMENT,
  NAME varchar(200) NOT NULL,
  DESCRIPTION varchar(350) DEFAULT NULL,
  OWNER char(100) NOT NULL,
  FUNCT_CODE varchar(40) DEFAULT NULL,
  CREATION_DATE timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  LAST_CHANGE_DATE timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  USER_IN varchar(100) NOT NULL,
  USER_UP varchar(100) DEFAULT NULL,
  USER_DE varchar(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  TIME_UP timestamp NULL DEFAULT NULL,
  TIME_DE timestamp NULL DEFAULT NULL,
  SBI_VERSION_IN varchar(10) DEFAULT NULL,
  SBI_VERSION_UP varchar(10) DEFAULT NULL,
  SBI_VERSION_DE varchar(10) DEFAULT NULL,
  META_VERSION varchar(100) DEFAULT NULL,
  ORGANIZATION varchar(20) DEFAULT NULL,
  PRIMARY KEY (COMMUNITY_ID)
);

CREATE TABLE SBI_COMMUNITY_USERS (
  COMMUNITY_ID int(11) NOT NULL,
  USER_ID char(100) NOT NULL,
  CREATION_DATE timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  LAST_CHANGE_DATE timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  USER_IN varchar(100) NOT NULL,
  USER_UP varchar(100) DEFAULT NULL,
  USER_DE varchar(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  TIME_UP timestamp NULL DEFAULT NULL,
  TIME_DE timestamp NULL DEFAULT NULL,
  SBI_VERSION_IN varchar(10) DEFAULT NULL,
  SBI_VERSION_UP varchar(10) DEFAULT NULL,
  SBI_VERSION_DE varchar(10) DEFAULT NULL,
  META_VERSION varchar(100) DEFAULT NULL,
  ORGANIZATION varchar(20) DEFAULT NULL,
  PRIMARY KEY (`COMMUNITY_ID`,`USER_ID`),
  CONSTRAINT `FK_COMMUNITY` FOREIGN KEY (`COMMUNITY_ID`) REFERENCES `SBI_COMMUNITY` (`COMMUNITY_ID`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ;


--26/07/2013 Alberto: functionality to manage the measure catalogue
INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'MeasuresCatalogueManagement','MeasuresCatalogueManagement', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';

INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'MeasuresCatalogueManagement'));
commit;

--01/08/2013 Alberto: layers catalogue
CREATE TABLE SBI_GEO_LAYERS (
  LAYER_ID int(11) NOT NULL,
  LABEL varchar(100) NOT NULL,
  NAME varchar(100),
  DESCR varchar(100),
  LAYER_DEFINITION BLOB NOT NULL,
  TYPE varchar(40),
  USER_IN varchar(100) NOT NULL,
  USER_UP varchar(100) DEFAULT NULL,
  USER_DE varchar(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  TIME_UP timestamp NULL DEFAULT NULL,
  TIME_DE timestamp NULL DEFAULT NULL,
  SBI_VERSION_IN varchar(10) DEFAULT NULL,
  SBI_VERSION_UP varchar(10) DEFAULT NULL,
  SBI_VERSION_DE varchar(10) DEFAULT NULL,
  META_VERSION varchar(100) DEFAULT NULL,
  ORGANIZATION varchar(20) DEFAULT NULL,
  PRIMARY KEY (`LAYER_ID`)
) ;


-- Davide 01/08/2013: solved bug https://spagobi.eng.it/jira/browse/SPAGOBI-1289
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'CreateWorksheetFromDatasetUserFunctionality'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'DEV_ROLE' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'CreateWorksheetFromDatasetUserFunctionality'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'TEST_ROLE' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'CreateWorksheetFromDatasetUserFunctionality'));
INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'MODEL_ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'CreateWorksheetFromDatasetUserFunctionality'));
commit;

-- Alberto 02/08/2013: layer catalogue

ALTER TABLE SBI_GEO_LAYERS ADD UNIQUE INDEX LABEL_UNIQUE (ORGANIZATION, LABEL ASC) ;


INSERT into SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN)
values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'FILE','FILE','LAYER_TYPE','Layer Type','Layer Type','');
UPDATE hibernate_sequences SET next_val = (SELECT MAX(VALUE_ID) + 1 FROM SBI_DOMAINS) WHERE sequence_name = 'SBI_DOMAINS';

INSERT into SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN)
values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),'WFS','WFS','LAYER_TYPE','Layer Type','Layer Type','');
UPDATE hibernate_sequences SET next_val = (SELECT MAX(VALUE_ID) + 1 FROM SBI_DOMAINS) WHERE sequence_name = 'SBI_DOMAINS';

INSERT INTO SBI_USER_FUNC (USER_FUNCT_ID, NAME, DESCRIPTION, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_USER_FUNC'),
    'GeoLayersManagement','GeoLayersManagement', 'server', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_USER_FUNC';

INSERT INTO SBI_ROLE_TYPE_USER_FUNC (ROLE_TYPE_ID, USER_FUNCT_ID)
    VALUES ((SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'ADMIN' AND DOMAIN_CD = 'ROLE_TYPE'),
    (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'GeoLayersManagement'));
commit;


-- Monica 21/08/2013
ALTER TABLE SBI_COMMUNITY ADD UNIQUE INDEX NAME_UNIQUE (ORGANIZATION, NAME ASC) ;

-- Antonella 20/08/2013: managed public/private scope of documents
ALTER TABLE SBI_OBJECTS ADD COLUMN IS_PUBLIC BOOLEAN DEFAULT FALSE;
UPDATE SBI_OBJECTS SET IS_PUBLIC = TRUE;

-- Davide 26/08/2013: added PERSIST_TABLE_NAME column
ALTER TABLE SBI_DATA_SET ADD COLUMN PERSIST_TABLE_NAME VARCHAR(50);

-- Davide 03/09/2013: REFACTORING: flat dataset is a type of dataset
ALTER TABLE SBI_DATA_SET DROP COLUMN IS_FLAT_DATASET;
ALTER TABLE SBI_DATA_SET DROP COLUMN FLAT_TABLE_NAME;
ALTER TABLE SBI_DATA_SET DROP COLUMN DATA_SOURCE_FLAT_ID;

-- Marco 25/09/2013: added IS_BASE_LAYER column to SBI_GEO_LAYERS
ALTER TABLE SBI_GEO_LAYERS ADD COLUMN IS_BASE_LAYER BOOLEAN DEFAULT FALSE;

-- Fabrizio Pajalunga 02/10/2013: added user attributes
INSERT INTO SBI_ATTRIBUTE (attribute_name,description,attribute_id,user_in,time_in,sbi_version_in,organization) values ('gender','gender',(SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'sbi_attribute'),'server_init',sysdate(),'4.0','SPAGOBI');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ATTRIBUTE';
commit;

INSERT INTO SBI_ATTRIBUTE (attribute_name,description,attribute_id,user_in,time_in,sbi_version_in,organization) values ('location','location',(SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'sbi_attribute'),'server_init',sysdate(),'4.0','SPAGOBI');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ATTRIBUTE';
commit;

INSERT INTO SBI_ATTRIBUTE (attribute_name,description,attribute_id,user_in,time_in,sbi_version_in,organization) values ('community','community',(SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'sbi_attribute'),'server_init',sysdate(),'4.0','SPAGOBI');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ATTRIBUTE';
commit;

INSERT INTO SBI_ATTRIBUTE (attribute_name,description,attribute_id,user_in,time_in,sbi_version_in,organization) values ('short_bio','short_bio',(SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'sbi_attribute'),'server_init',sysdate(),'4.0','SPAGOBI');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ATTRIBUTE';
commit;

INSERT INTO SBI_ATTRIBUTE (attribute_name,description,attribute_id,user_in,time_in,sbi_version_in,organization) values ('language','language',(SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'sbi_attribute'),'server_init',sysdate(),'4.0','SPAGOBI');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ATTRIBUTE';
commit;

-- Marco 11/10/2013: changed sbi_data_set primary key
ALTER TABLE SBI_DATA_SET MODIFY COLUMN ORGANIZATION VARCHAR(20) NOT NULL,
 DROP PRIMARY KEY,
 ADD PRIMARY KEY  (DS_ID, VERSION_NUM, ORGANIZATION);


-- Giulio 25/09/2013
ALTER TABLE SBI_ENGINES DROP FOREIGN KEY FK_SBI_ENGINE_3;
ALTER TABLE SBI_ENGINES  DROP COLUMN DEFAULT_DS_ID;
ALTER TABLE SBI_DATA_SET DROP COLUMN DATA_SOURCE_PERSIST_ID;

ALTER TABLE SBI_DATA_SOURCE ADD COLUMN READ_ONLY BOOLEAN DEFAULT FALSE;
ALTER TABLE SBI_DATA_SOURCE ADD COLUMN WRITE_DEFAULT BOOLEAN DEFAULT FALSE;
commit;

-- Davide 21/10/2013: removed spagobi@eng.it from SpagoBI config
UPDATE SBI_CONFIG SET VALUE_CHECK = '' WHERE VALUE_CHECK = 'spagobi@eng.it';
commit;

-- Monica 23/11/2013: added content_type mng for snapshots
ALTER TABLE SBI_SNAPSHOTS ADD COLUMN CONTENT_TYPE VARCHAR(300) NULL DEFAULT NULL  AFTER ORGANIZATION ;

-- Giulio 30/10/2013
ALTER TABLE SBI_DATA_SET ADD CONSTRAINT FK_DATA_SET_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_DOMAINS (VALUE_ID);
ALTER TABLE SBI_META_MODELS ADD CONSTRAINT FK_META_MODELS_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_DOMAINS (VALUE_ID);

-- MONICA 30/10/2013: ALTERED COLUMN LENGTH FOR RESOURCE_NAME
ALTER TABLE SBI_RESOURCES MODIFY COLUMN RESOURCE_NAME VARCHAR(200);

-- MONICA 4/11/2013: bug on final user functionality
DELETE FROM SBI_ROLE_TYPE_USER_FUNC WHERE ROLE_TYPE_ID= (SELECT value_id FROM SBI_DOMAINS where domain_cd = 'ROLE_TYPE' AND VALUE_CD ='USER')
AND USER_FUNCT_ID =(SELECT user_funct_id FROM SBI_USER_FUNC where NAME = 'FinalUsersManagement');

-- Marco 4/11/2013 Altered column length for LABEL
ALTER TABLE SBI_OBJECTS MODIFY COLUMN LABEL VARCHAR(100);

-- Monica 6/11/2013 Dataset refactoring USER, ENTERPRISE, TECHNICAL
INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
    'USER','User','DS_SCOPE','Dataset scope','Dataset scope', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
    'TECHNICAL','Technical','DS_SCOPE','Dataset scope','Dataset scope', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

INSERT INTO SBI_DOMAINS (VALUE_ID, VALUE_CD,VALUE_NM,DOMAIN_CD,DOMAIN_NM,VALUE_DS, USER_IN, TIME_IN)
    VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'),
    'ENTERPRISE','Enterprise','DS_SCOPE','Dataset scope','Dataset scope', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where  sequence_name = 'SBI_DOMAINS';
commit;

ALTER TABLE SBI_DATA_SET ADD COLUMN SCOPE_ID INT(11) NULL DEFAULT NULL;
ALTER TABLE SBI_DATA_SET ADD CONSTRAINT FK_SBI_DOMAINS_2 FOREIGN KEY ( SCOPE_ID ) REFERENCES SBI_DOMAINS( VALUE_ID ) ON DELETE CASCADE;

UPDATE SBI_DATA_SET
       SET SCOPE_ID =
                 CASE
                   WHEN OWNER IN (SELECT
						U.USER_ID
						FROM
						SBI_USER U,
						SBI_EXT_USER_ROLES R,
						SBI_EXT_ROLES RO
						WHERE OWNER = U.USER_ID
						AND R.ID = U.ID
						AND RO.EXT_ROLE_ID = R.EXT_ROLE_ID
						AND RO.ROLE_TYPE_CD IN ('ADMIN', 'DEV_ROLE')
						AND IS_PUBLIC = 0) THEN (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD='TECHNICAL' AND DOMAIN_CD='DS_SCOPE')
                   WHEN OWNER IN (SELECT
						U.USER_ID
						FROM
						SBI_USER U,
						SBI_EXT_USER_ROLES R,
						SBI_EXT_ROLES RO
						WHERE OWNER = U.USER_ID
						AND R.ID = U.ID
						AND RO.EXT_ROLE_ID = R.EXT_ROLE_ID
						AND RO.ROLE_TYPE_CD IN ('ADMIN', 'DEV_ROLE')
						AND IS_PUBLIC = 1) THEN (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD='ENTERPRISE' AND DOMAIN_CD='DS_SCOPE')
                   WHEN OWNER IN (SELECT
						U.USER_ID
						FROM
						SBI_USER U,
						SBI_EXT_USER_ROLES R,
						SBI_EXT_ROLES RO
						WHERE OWNER = U.USER_ID
						AND R.ID = U.ID
						AND RO.EXT_ROLE_ID = R.EXT_ROLE_ID
						AND RO.ROLE_TYPE_CD ='USER') THEN (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD='USER' AND DOMAIN_CD='DS_SCOPE')
                   ELSE (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD='TECHNICAL' AND DOMAIN_CD='DS_SCOPE')
                 END;

commit;

--12/11/2013 Antonella: delete MANDATORY check
DELETE FROM SBI_PARUSE_CK WHERE CHECK_ID = (SELECT CHECK_ID FROM SBI_CHECKS WHERE value_Type_Cd = 'MANDATORY');
DELETE FROM SBI_CHECKS WHERE CHECK_ID = (SELECT CHECK_ID FROM SBI_CHECKS WHERE value_Type_Cd = 'MANDATORY');
COMMIT;

--13/11/2013 fix bug in functionalities initializers
DELETE FROM SBI_USER_FUNC WHERE NAME = 'FinalUsersManagement';
COMMIT;

----------------------------------- 4.1 -----------------------------------------------------------------------------

-- Monica 9/12/2013 Multi-Tenancy functionalities


ALTER TABLE SBI_ORGANIZATIONS ADD COLUMN THEME VARCHAR(100) NULL DEFAULT 'SPAGOBI.THEMES.THEME.default';
ALTER TABLE SBI_USER ADD COLUMN IS_SUPERADMIN TINYINT(1) DEFAULT 0;

UPDATE SBI_USER us SET us.IS_SUPERADMIN = 1 WHERE us.ID IN(
	SELECT ur.ID FROM SBI_EXT_USER_ROLES ur WHERE ur.EXT_ROLE_ID IN(
		SELECT role.EXT_ROLE_ID FROM SBI_EXT_ROLES role WHERE role.ROLE_TYPE_CD = 'ADMIN'
	)
);

CREATE TABLE SBI_ORGANIZATION_ENGINE (
  ENGINE_ID int(11) NOT NULL,
  ORGANIZATION_ID int(11) NOT NULL,
  CREATION_DATE timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  LAST_CHANGE_DATE timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  USER_IN varchar(100) NOT NULL,
  USER_UP varchar(100) DEFAULT NULL,
  USER_DE varchar(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  TIME_UP timestamp NULL DEFAULT NULL,
  TIME_DE timestamp NULL DEFAULT NULL,
  SBI_VERSION_IN varchar(10) DEFAULT NULL,
  SBI_VERSION_UP varchar(10) DEFAULT NULL,
  SBI_VERSION_DE varchar(10) DEFAULT NULL,
  META_VERSION varchar(100) DEFAULT NULL,
  ORGANIZATION varchar(20) DEFAULT NULL,
  PRIMARY KEY (ENGINE_ID,ORGANIZATION_ID ),
  CONSTRAINT FK_ENGINE_1 FOREIGN KEY (ENGINE_ID) REFERENCES SBI_ENGINES (ENGINE_ID) ON DELETE NO ACTION ON UPDATE NO ACTION,

  CONSTRAINT FK_ORGANIZATION_1 FOREIGN KEY (ORGANIZATION_ID) REFERENCES SBI_ORGANIZATIONS (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
) ;

CREATE TABLE SBI_ORGANIZATION_DATASOURCE (
  DATASOURCE_ID int(11) NOT NULL,
  ORGANIZATION_ID int(11) NOT NULL,
  CREATION_DATE timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  LAST_CHANGE_DATE timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  USER_IN varchar(100) NOT NULL,
  USER_UP varchar(100) DEFAULT NULL,
  USER_DE varchar(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  TIME_UP timestamp NULL DEFAULT NULL,
  TIME_DE timestamp NULL DEFAULT NULL,
  SBI_VERSION_IN varchar(10) DEFAULT NULL,
  SBI_VERSION_UP varchar(10) DEFAULT NULL,
  SBI_VERSION_DE varchar(10) DEFAULT NULL,
  META_VERSION varchar(100) DEFAULT NULL,
  ORGANIZATION varchar(20) DEFAULT NULL,
  PRIMARY KEY (DATASOURCE_ID,ORGANIZATION_ID ),
  CONSTRAINT FK_DATASOURCE_2 FOREIGN KEY (DATASOURCE_ID) REFERENCES SBI_DATA_SOURCE (DS_ID) ON UPDATE NO ACTION ON DELETE CASCADE,
  CONSTRAINT FK_ORGANIZATION_2 FOREIGN KEY (ORGANIZATION_ID) REFERENCES SBI_ORGANIZATIONS (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
) ;

INSERT INTO SBI_ORGANIZATION_DATASOURCE (DATASOURCE_ID, ORGANIZATION_ID, CREATION_DATE, LAST_CHANGE_DATE, USER_IN, TIME_IN, SBI_VERSION_IN)
  SELECT ds.ds_id, org.id, SYSDATE(), SYSDATE(), "server", SYSDATE(), "4.1"
  FROM SBI_DATA_SOURCE ds, SBI_ORGANIZATIONS org WHERE ds.organization = org.name;

 INSERT INTO SBI_ORGANIZATION_ENGINE (ENGINE_ID, ORGANIZATION_ID, CREATION_DATE, LAST_CHANGE_DATE, USER_IN, TIME_IN, SBI_VERSION_IN)
  SELECT eng.engine_id, org.id, SYSDATE(), SYSDATE(), "server", SYSDATE(), "4.1"
  FROM SBI_OENGINES eng, SBI_ORGANIZATIONS org WHERE eng.organization = org.name;

UPDATE SBI_OBJECTS r JOIN (
SELECT B.ENGINE_ID AS OK, A.ENGINE_ID AS KO
FROM
(SELECT ENGINE_ID, LABEL, ORGANIZATION FROM SBI_ENGINES WHERE ORGANIZATION !='SPAGOBI') A,
(SELECT ENGINE_ID, LABEL, ORGANIZATION FROM SBI_ENGINES WHERE ORGANIZATION ='SPAGOBI') B
WHERE A.LABEL=B.LABEL
) t ON (r.ENGINE_ID = t.KO)
SET r.ENGINE_ID = t.OK
WHERE r.ENGINE_ID = t.KO;
(SELECT ENGINE_ID, LABEL, ORGANIZATION FROM SBI_ENGINES WHERE ORGANIZATION !='SPAGOBI');

DELETE FROM SBI_EXPORTERS where engine_id IN (SELECT ENGINE_ID FROM SBI_ENGINES WHERE ORGANIZATION !='SPAGOBI');
COMMIT;

delete from SBI_ENGINES where organization !='SPAGOBI';
COMMIT;

-- 9/12/13 Monica: functionalities refactoring


CREATE TABLE SBI_AUTHORIZATIONS (
  ID int(11) NOT NULL,
  NAME varchar(200) DEFAULT NULL,
  CREATION_DATE timestamp NOT NULL,
  LAST_CHANGE_DATE timestamp NOT NULL,
  USER_IN varchar(100) NOT NULL,
  USER_UP varchar(100) DEFAULT NULL,
  USER_DE varchar(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL,
  TIME_UP timestamp NULL DEFAULT NULL,
  TIME_DE timestamp NULL DEFAULT NULL,
  SBI_VERSION_IN varchar(10) DEFAULT NULL,
  SBI_VERSION_UP varchar(10) DEFAULT NULL,
  SBI_VERSION_DE varchar(10) DEFAULT NULL,
  META_VERSION varchar(100) DEFAULT NULL,
  ORGANIZATION varchar(20) DEFAULT NULL,
  PRIMARY KEY (ID)
) ;
insert into hibernate_sequences (SEQUENCE_NAME, NEXT_VAL)
values('SBI_AUTHORIZATIONS', 1);
COMMIT;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SAVE_SUBOBJECTS',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
commit;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_SUBOBJECTS',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
commit;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_VIEWPOINTS',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
commit;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;


INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_SNAPSHOTS',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
commit;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_NOTES',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEND_MAIL',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SAVE_INTO_FOLDER',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SAVE_REMEMBER_ME',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_METADATA',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SAVE_METADATA',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'BUILD_QBE_QUERY',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'DO_MASSIVE_EXPORT',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'EDIT_WORKSHEET',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;


INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'MANAGE_USERS',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_DOCUMENT_BROWSER',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_FAVOURITES',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_SUBSCRIPTIONS',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;


INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_MY_DATA',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;


INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'SEE_TODO_LIST',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;



INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN, LAST_CHANGE_DATE)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'CREATE_DOCUMENTS',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP, current_timestamp) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;


CREATE TABLE SBI_AUTHORIZATIONS_ROLES (
  AUTHORIZATION_ID int(11) NOT NULL,
  ROLE_ID int(11) NOT NULL,
  USER_IN varchar(100) NOT NULL,
  USER_UP varchar(100) DEFAULT NULL,
  USER_DE varchar(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL,
  TIME_UP timestamp NULL DEFAULT NULL,
  TIME_DE timestamp NULL DEFAULT NULL,
  SBI_VERSION_IN varchar(10) DEFAULT NULL,
  SBI_VERSION_UP varchar(10) DEFAULT NULL,
  SBI_VERSION_DE varchar(10) DEFAULT NULL,
  META_VERSION varchar(100) DEFAULT NULL,
  ORGANIZATION varchar(20) DEFAULT NULL,
  PRIMARY KEY (AUTHORIZATION_ID,ROLE_ID ),
  CONSTRAINT FK_ROLE1 FOREIGN KEY (ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_AUTHORIZATION_1 FOREIGN KEY (AUTHORIZATION_ID) REFERENCES SBI_AUTHORIZATIONS (ID) ON DELETE NO ACTION ON UPDATE NO ACTION
) ;

INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SAVE_SUBOBJECTS') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SAVE_SUBOBJECTS =1;

INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'CREATE_DOCUMENTS') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.CREATE_DOCUMENTS =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_SUBOBJECTS') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_SUBOBJECTS =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_VIEWPOINTS') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_VIEWPOINTS =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_SNAPSHOTS') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_SNAPSHOTS =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_NOTES') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_NOTES =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEND_MAIL') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEND_MAIL =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SAVE_INTO_FOLDER') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SAVE_INTO_FOLDER =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SAVE_REMEMBER_ME') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SAVE_REMEMBER_ME =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_METADATA') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_METADATA =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SAVE_METADATA') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SAVE_METADATA =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'BUILD_QBE_QUERY') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.BUILD_QBE_QUERY =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'DO_MASSIVE_EXPORT') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.DO_MASSIVE_EXPORT =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'EDIT_WORKSHEET') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.EDIT_WORKSHEET =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'MANAGE_USERS') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.MANAGE_USERS =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_DOCUMENT_BROWSER') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_DOCUMENT_BROWSER =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_FAVOURITES') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_FAVOURITES =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_SUBSCRIPTIONS') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_SUBSCRIPTIONS =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_MY_DATA') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_MY_DATA =1;
INSERT INTO SBI_AUTHORIZATIONS_ROLES
(AUTHORIZATION_ID, ROLE_ID, ORGANIZATION, TIME_IN, USER_IN)
SELECT (SELECT ID FROM SBI_AUTHORIZATIONS WHERE NAME= 'SEE_TODO_LIST') F ,
D.EXT_ROLE_ID,
D.ORGANIZATION,
CURRENT_TIMESTAMP, 'server' FROM SBI_EXT_ROLES D WHERE D.SEE_TODO_LIST =1;

ALTER TABLE SBI_EXT_ROLES DROP COLUMN SAVE_SUBOBJECTS;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN SEE_SUBOBJECTS;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  SEE_VIEWPOINTS;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  SEE_SNAPSHOTS;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  SEE_NOTES;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  SEND_MAIL;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  SAVE_INTO_FOLDER;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  SAVE_REMEMBER_ME;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  SEE_METADATA;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN SAVE_METADATA;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  BUILD_QBE_QUERY;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  DO_MASSIVE_EXPORT;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  EDIT_WORKSHEET;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  MANAGE_USERS;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  SEE_DOCUMENT_BROWSER;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  SEE_FAVOURITES;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  SEE_SUBSCRIPTIONS;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  SEE_MY_DATA;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  SEE_TODO_LIST;
ALTER TABLE SBI_EXT_ROLES DROP COLUMN  CREATE_DOCUMENTS;

INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'KPI_COMMENT_EDIT_ALL',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;
INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'KPI_COMMENT_EDIT_MY',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;
INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, CREATION_DATE, USER_IN, TIME_IN)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'KPI_COMMENT_DELETE',
CURRENT_TIMESTAMP, 'server', CURRENT_TIMESTAMP) ;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

UPDATE SBI_ENGINES SET DRIVER_NM = 'it.eng.spagobi.engines.drivers.gis.GisDriver'
		WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.generic.GenericDriver'
		AND BIOBJ_TYPE IN (SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'MAP');
COMMIT;

--27/01/2014 Antonella: Added SpagoBICockpitEngine configuration
INSERT INTO sbi_engines
(ENGINE_ID,ENCRYPT,NAME,DESCR,MAIN_URL,SECN_URL,OBJ_UPL_DIR,OBJ_USE_DIR,DRIVER_NM,LABEL,ENGINE_TYPE,CLASS_NM,BIOBJ_TYPE,USE_DATASET,USE_DATASOURCE,USER_IN,USER_UP,USER_DE,TIME_IN,
TIME_UP,TIME_DE,SBI_VERSION_IN,SBI_VERSION_UP,SBI_VERSION_DE,META_VERSION,ORGANIZATION)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_ENGINES'), 0, 'Cockpit Engine', 'Cockpit Engine', '/SpagoBICockpitEngine/CockpitEngineStartAction', NULL, NULL, NULL, 'it.eng.spagobi.engines.drivers.cockpit.CockpitDriver', 'SpagoBICockpitEngine', (SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ENGINE_TYPE' AND VALUE_CD = 'EXT'), '',(SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'DOCUMENT_COMPOSITE'), false, false, 'database', 'biadmin', NULL, '2014-01-09 00:00:00', '2014-01-09 00:00:00', NULL, '4.1', '4.1', NULL, NULL, 'SPAGOBI');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ENGINES';
commit;
INSERT INTO SBI_ORGANIZATION_ENGINE (ENGINE_ID, ORGANIZATION_ID, CREATION_DATE, LAST_CHANGE_DATE, USER_IN, TIME_IN, SBI_VERSION_IN)
values((SELECT engine_id from SBI_ENGINES where label='SpagoBICockpitEngine'), (select id from SBI_ORGANIZATIONS where name = 'SPAGOBI'),
SYSDATE(), SYSDATE(), 'server', SYSDATE(), '4.1');
COMMIT;

--14/02/2014: Added XMLADriver:
update SBI_ENGINES SET DRIVER_NM = 'it.eng.spagobi.engines.drivers.xmla.XMLADriver' where label = 'XMLAEngine';
commit;

-- 10/03/2014  Angelo
ALTER TABLE SBI_AUDIT MODIFY DOC_LABEL varchar(200);
ALTER TABLE SBI_AUDIT MODIFY DOC_NAME varchar(200);

13/03/2014 aNGELO
ALTER TABLE SBI_OBJECTS DROP FOREIGN KEY FK_SBI_OBJECTS_5;
ALTER TABLE SBI_OBJECTS DROP FOREIGN KEY FK_SBI_OBJECTS_6;
ALTER TABLE SBI_OBJECTS DROP FOREIGN KEY FK_SBIDATA_SOURCE;

-- 17/03/2014 Marco
CREATE TABLE SBI_TRIGGER_PAUSED (
	   ID 					INTEGER  NOT NULL ,
       TRIGGER_NAME	 	    VARCHAR(80) NOT NULL,
       TRIGGER_GROUP 	    VARCHAR(80) NOT NULL,
       JOB_NAME 	        VARCHAR(80) NOT NULL,
       JOB_GROUP 	        VARCHAR(80) NOT NULL,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       UNIQUE XAK1SBI_TRIGGER_PAUSED (TRIGGER_NAME, TRIGGER_GROUP, JOB_NAME, JOB_GROUP),
       PRIMARY KEY (ID)
) ENGINE=InnoDB;

-- 27/03/2014 Davide: config for documents' preview image security settings
INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, CATEGORY, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),
'SPAGOBI.DOCUMENTS.MAX_PREVIEW_IMAGE_SIZE', 'Max preview image size', 'Max dimension for a document''s preview image', true, '1048576',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'NUM' AND DOMAIN_CD = 'PAR_TYPE'), 'GENERIC_CONFIGURATION', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit;
INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, CATEGORY, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),
'SPAGOBI.DOCUMENTS.MAX_PREVIEW_IMAGES_NUM', 'Max preview images', 'Max number for documents'' preview images', true, '200',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'NUM' AND DOMAIN_CD = 'PAR_TYPE'), 'GENERIC_CONFIGURATION', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit;

-- 28/03/2014 Davide: removed SBI_OBJECTS.IS_PUBLIC column
ALTER TABLE SBI_OBJECTS DROP COLUMN IS_PUBLIC;

-- 30/04/2014 Davide: added SpagoBIWhatIfEngine engine
INSERT INTO SBI_ENGINES
(ENGINE_ID,ENCRYPT,NAME,DESCR,MAIN_URL,SECN_URL,OBJ_UPL_DIR,OBJ_USE_DIR,DRIVER_NM,LABEL,ENGINE_TYPE,CLASS_NM,BIOBJ_TYPE,USE_DATASET,USE_DATASOURCE,USER_IN,USER_UP,USER_DE,TIME_IN,
TIME_UP,TIME_DE,SBI_VERSION_IN,SBI_VERSION_UP,SBI_VERSION_DE,META_VERSION,ORGANIZATION)
VALUES ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_ENGINES'), 0, 'What-If Engine', 'What-If Engine', '/SpagoBIWhatIfEngine/restful-services/start', NULL, NULL, NULL, 'it.eng.spagobi.engines.drivers.whatif.WhatIfDriver', 'SpagoBIWhatIfEngine', (SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ENGINE_TYPE' AND VALUE_CD = 'EXT'), NULL, (SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'OLAP'), false, true, 'system', NULL, NULL, SYSDATE(), NULL, NULL, '5.0', NULL, NULL, NULL, 'SPAGOBI');
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_ENGINES';
commit;
INSERT INTO SBI_ORGANIZATION_ENGINE (USER_IN, TIME_IN, SBI_VERSION_IN, ENGINE_ID, ORGANIZATION_ID, ORGANIZATION)
SELECT
'system' AS USER_IN,
SYSDATE() AS TIME_IN,
'5.0' AS SBI_VERSION_IN,
(SELECT engine_id from SBI_ENGINES where label = 'SpagoBIWhatIfEngine') AS ENGINE_ID,
o.id AS ORGANIZATION_ID, o.name AS ORGANIZATION from SBI_ORGANIZATIONS o;
COMMIT;

-- 20/05/2014
ALTER TABLE SBI_ARTIFACTS
ADD COLUMN MODEL_LOCKED BOOLEAN NULL,
ADD COLUMN MODEL_LOCKER VARCHAR(100) NULL;
COMMIT;

UPDATE SBI_ARTIFACTS SET MODEL_LOCKED = false WHERE MODEL_LOCKED IS NULL;

-- 25/06/2014

ALTER TABLE SBI_OBJECTS ADD COLUMN PARAMETERS_REGION VARCHAR(20) NULL DEFAULT 'east';

insert into SBI_CONFIG(ID,LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, USER_IN, TIME_IN, SBI_VERSION_IN, ORGANIZATION, CATEGORY) values
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),'SPAGOBI.DOCUMENTS.PARAMETERS_REGION_DEFAULT', 'Parameters Region Default', 'Where parameters form is shown (north or east) by default', '1', 'right', '30',
 'biadmin', '2014-06-24 15:06:24', '4.2', 'SPAGOBI', 'GENERIC_CONFIGURATION')

-- 09/07/2014 Davide: changed SpagoBIWekaEngine to SpagoBIDataMiningEngine
UPDATE SBI_ENGINES SET LABEL = 'SpagoBIDataMiningEngine', NAME = 'Data-Mining Engine', DESCR = 'Data-Mining Engine', MAIN_URL = '/SpagoBIDataMiningEngine/WekaServlet', DRIVER_NM = 'it.eng.spagobi.engines.drivers.datamining.DataMiningDriver' WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.weka.WekaDriver';
COMMIT;

-- 04/08/2014
ALTER TABLE SBI_OBJ_PAR ADD COLUMN COL_SPAN INTEGER NULL DEFAULT 1;
ALTER TABLE SBI_OBJ_PAR ADD COLUMN THICK_PERC INTEGER NULL DEFAULT 0;

-- 27/08/2014 Davide: added CREATE_SOCIAL_ANALYSIS authorization
INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, USER_IN, TIME_IN)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'CREATE_SOCIAL_ANALYSIS',
'server', current_timestamp) ;
commit;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

-- 29/08/2014 Davide: fixed Cockpit engine's URL
UPDATE SBI_ENGINES SET MAIN_URL = '/SpagoBICockpitEngine/api/1.0/pages/execute' WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.cockpit.CockpitDriver';
COMMIT;

-- 08/09/2014 Davide: https://spagobi.eng.it/jira/browse/SPAGOBI-1854
INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, CATEGORY, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),
'SPAGOBI.HOME.SHOW_LOGOUT_ON_SILENT_LOGIN', 'SPAGOBI.HOME.SHOW_LOGOUT_ON_SILENT_LOGIN', 'Show the logout button in case of silent login', true, 'true',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'NUM' AND DOMAIN_CD = 'PAR_TYPE'), 'GENERIC_CONFIGURATION', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit;

-- 10/09/2014 Marco: added HIERARCHIES_MANAGEMENT authorization
INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, USER_IN, TIME_IN)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'HIERARCHIES_MANAGEMENT',
'server', current_timestamp) ;
commit;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;

--11/09/2014 Monica udate data mining engine
UPDATE SBI_ENGINES SET LABEL = 'SpagoBIDataMiningEngine', NAME = 'Data-Mining Engine', DESCR = 'Data-Mining Engine', MAIN_URL = '/SpagoBIDataMiningEngine/restful-services/start', DRIVER_NM = 'it.eng.spagobi.engines.drivers.datamining.DataMiningDriver', USE_DATASET=false, USE_DATASOURCE=false WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.weka.WekaDriver';
COMMIT;

--3/10/2014 Antonella change column name for mariadb & spago compatibility
alter table SBI_OBJ_METADATA CHANGE DESCRIPTION  DESCR  VARCHAR(100) ;
-- 26/11/2014 Giorgio: Dataset Persistence, add only if you want to enable dataset persistence on user dataset wizard and to limit rows preview
INSERT INTO SBI_AUTHORIZATIONS
(ID, NAME, USER_IN, TIME_IN)
values ((SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS'),
'ENABLE_DATASET_PERSISTENCE',
'server', current_timestamp) ;
commit;
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_AUTHORIZATIONS';
commit;
INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, CATEGORY, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),
'SPAGOBI.DATASET.PREVIEW_ROWS', 'Number of rows to show for dataset preview', 'Number of rows to show for dataset preview', true, '1000',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'NUM' AND DOMAIN_CD = 'PAR_TYPE'), 'GENERIC_CONFIGURATION', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit;
INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, CATEGORY, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),
'SPAGOBI.DATASET.PERSIST.TABLE_PREFIX', 'Table name prefix for dataset persistence', 'Table name prefix for dataset persistence', true, 'D_',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'STRING' AND DOMAIN_CD = 'PAR_TYPE'), 'GENERIC_CONFIGURATION', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit;

-- 26/05/2015 Alessandro Portosa: added SBI_CACHE_ITEM and SBI_CACHE_JOINED_ITEM tables
CREATE TABLE SBI_CACHE_ITEM (
	   SIGNATURE			VARCHAR(100) NOT NULL,
	   NAME					VARCHAR(100) NULL,
	   TABLE_NAME 			VARCHAR(100) NOT NULL,
	   DIMENSION 			NUMERIC NULL,
	   CREATION_DATE 		DATETIME NULL,
	   LAST_USED_DATE 		DATETIME NULL,
       PROPERTIES			TEXT NULL,
	   USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       UNIQUE XAK1SBI_CACHE_ITEM (TABLE_NAME),
	   PRIMARY KEY (SIGNATURE)
) ENGINE=InnoDB;
commit;
CREATE TABLE SBI_CACHE_JOINED_ITEM (
	   ID 					INTEGER  NOT NULL,
	   SIGNATURE			VARCHAR(100) NOT NULL,
	   JOINED_SIGNATURE		VARCHAR(100) NOT NULL,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       UNIQUE XAK1SBI_CACHE_JOINED_ITEM (SIGNATURE, JOINED_SIGNATURE),
	   PRIMARY KEY (ID)
) ENGINE=InnoDB;
commit;
ALTER TABLE SBI_CACHE_JOINED_ITEM  ADD CONSTRAINT FK_SBI_CACHE_JOINED_ITEM_1 FOREIGN KEY ( SIGNATURE ) REFERENCES  SBI_CACHE_ITEM  ( SIGNATURE ) ON DELETE NO ACTION ON UPDATE CASCADE;
commit;
ALTER TABLE SBI_CACHE_JOINED_ITEM  ADD CONSTRAINT FK_SBI_CACHE_JOINED_ITEM_2 FOREIGN KEY ( JOINED_SIGNATURE ) REFERENCES  SBI_CACHE_ITEM  ( SIGNATURE ) ON DELETE CASCADE ON UPDATE CASCADE;
commit;


-- ---------------------------------------
-- - Database updates related to Knowage --
-- ---------------------------------------

-- tables for different knowage product types
CREATE TABLE `SBI_PRODUCT_TYPE` (
	`PRODUCT_TYPE_ID` INT(11) NOT NULL,
	`LABEL` VARCHAR(40) NOT NULL,
	`USER_IN` VARCHAR(100) NOT NULL,
	`USER_UP` VARCHAR(100) NULL DEFAULT NULL,
	`USER_DE` VARCHAR(100) NULL DEFAULT NULL,
	`TIME_IN` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	`TIME_UP` TIMESTAMP NULL DEFAULT NULL,
	`TIME_DE` TIMESTAMP NULL DEFAULT NULL,
	`SBI_VERSION_IN` VARCHAR(10) NULL DEFAULT NULL,
	`SBI_VERSION_UP` VARCHAR(10) NULL DEFAULT NULL,
	`SBI_VERSION_DE` VARCHAR(10) NULL DEFAULT NULL,
	`META_VERSION` VARCHAR(100) NULL DEFAULT NULL,
	`ORGANIZATION` VARCHAR(20) NULL DEFAULT NULL,
	PRIMARY KEY (`PRODUCT_TYPE_ID`),
	UNIQUE INDEX `XAK1SBI_PRODUCT_TYPE` (`LABEL`, `ORGANIZATION`)
)
COLLATE='LATIN1_SWEDISH_CI'
ENGINE=INNODB

;

-- mapping table between organizations (tenants) and product types
CREATE TABLE `SBI_ORGANIZATION_PRODUCT_TYPE` (
	`PRODUCT_TYPE_ID` INT(11) NOT NULL,
	`ORGANIZATION_ID` INT(11) NOT NULL,
	`USER_IN` VARCHAR(100) NOT NULL,
	`USER_UP` VARCHAR(100) NULL DEFAULT NULL,
	`USER_DE` VARCHAR(100) NULL DEFAULT NULL,
	`TIME_IN` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	`TIME_UP` TIMESTAMP NULL DEFAULT NULL,
	`TIME_DE` TIMESTAMP NULL DEFAULT NULL,
	`SBI_VERSION_IN` VARCHAR(10) NULL DEFAULT NULL,
	`SBI_VERSION_UP` VARCHAR(10) NULL DEFAULT NULL,
	`SBI_VERSION_DE` VARCHAR(10) NULL DEFAULT NULL,
	`META_VERSION` VARCHAR(100) NULL DEFAULT NULL,
	`ORGANIZATION` VARCHAR(20) NULL DEFAULT NULL,
	PRIMARY KEY (`PRODUCT_TYPE_ID`, `ORGANIZATION_ID`),
	INDEX `FK_ORGANIZATION_3` (`ORGANIZATION_ID`),
	CONSTRAINT `FK_PRODUCT_TYPE_1` FOREIGN KEY (`PRODUCT_TYPE_ID`) REFERENCES `SBI_PRODUCT_TYPE` (`PRODUCT_TYPE_ID`) ON UPDATE NO ACTION ON DELETE NO ACTION,
	CONSTRAINT `FK_ORGANIZATION_3` FOREIGN KEY (`ORGANIZATION_ID`) REFERENCES `SBI_ORGANIZATIONS` (`ID`) ON UPDATE NO ACTION ON DELETE NO ACTION
)
COLLATE='LATIN1_SWEDISH_CI'
ENGINE=INNODB
;

-- modify sbi_user_func with product_id fk
ALTER TABLE `SBI_USER_FUNC`
	ADD COLUMN `PRODUCT_TYPE_ID` INT(11) NOT NULL AFTER `DESCRIPTION`,
	ADD CONSTRAINT `FK_PRODUCT_TYPE` FOREIGN KEY (`PRODUCT_TYPE_ID`) REFERENCES `SBI_PRODUCT_TYPE` (`PRODUCT_TYPE_ID`);

-- modify sbi_authorization with product_id fk
ALTER TABLE `SBI_AUTHORIZATIONS`
	ADD COLUMN `PRODUCT_TYPE_ID` INT(11) NOT NULL AFTER `NAME`,
	ADD CONSTRAINT `FK2_PRODUCT_TYPE` FOREIGN KEY (`PRODUCT_TYPE_ID`) REFERENCES `SBI_PRODUCT_TYPE` (`PRODUCT_TYPE_ID`);

-- ---------------------------------------
-- 09/07/2015- Database updates related to Knowage --
-- ---------------------------------------

-- mapping table between product types and engines
CREATE TABLE `SBI_PRODUCT_TYPE_ENGINE` (
	`PRODUCT_TYPE_ID` INT(11) NOT NULL,
	`ENGINE_ID` INT(11) NOT NULL,
	`USER_IN` VARCHAR(100) NOT NULL,
	`USER_UP` VARCHAR(100) DEFAULT NULL,
	`USER_DE` VARCHAR(100) DEFAULT NULL,
	`TIME_IN` TIMESTAMP,
	`TIME_UP` TIMESTAMP NULL DEFAULT NULL,
	`TIME_DE` TIMESTAMP NULL DEFAULT NULL,
	`SBI_VERSION_IN` VARCHAR(10) DEFAULT NULL,
	`SBI_VERSION_UP` VARCHAR(10) DEFAULT NULL,
	`SBI_VERSION_DE` VARCHAR(10) DEFAULT NULL,
	`META_VERSION` VARCHAR(100) DEFAULT NULL,
	`ORGANIZATION` VARCHAR(20) DEFAULT NULL,
	PRIMARY KEY (`PRODUCT_TYPE_ID`, `ENGINE_ID`)
);

ALTER TABLE `SBI_PRODUCT_TYPE_ENGINE` ADD CONSTRAINT `FK_PRODUCT_TYPE_2` FOREIGN KEY (`PRODUCT_TYPE_ID`) REFERENCES `SBI_PRODUCT_TYPE` (`PRODUCT_TYPE_ID`) ON DELETE NO ACTION ON UPDATE NO ACTION;
ALTER TABLE `SBI_PRODUCT_TYPE_ENGINE` ADD CONSTRAINT `FK_ENGINE_2` FOREIGN KEY (`ENGINE_ID`) REFERENCES `SBI_ENGINES` (`ENGINE_ID`) ON DELETE NO ACTION ON UPDATE NO ACTION;

-- SpagoBI : 03/08/2015 Marco Cortella: added columns MODEL_LOCKED and MODEL_LOCKER to table sbi_meta_models
ALTER TABLE SBI_META_MODELS
	ADD COLUMN `MODEL_LOCKED` TINYINT(1) NULL DEFAULT NULL AFTER `DESCR`,
	ADD COLUMN `MODEL_LOCKER` VARCHAR(100) NULL DEFAULT NULL AFTER `MODEL_LOCKED`;
UPDATE SBI_META_MODELS SET MODEL_LOCKED = false WHERE MODEL_LOCKED IS NULL;

--SpagoBI: 26.08.2015 Nikola Simovic: CREATED TABLE SBI_FEDERATED_DATA_SET

CREATE TABLE `SBI_FEDERATED_DATA_SET` (
  `ID_SBI_FEDERATED_DATA_SET` INT(11) NOT NULL,
  `LABEL` VARCHAR(45) DEFAULT NULL,
  `NAME` VARCHAR(45) DEFAULT NULL,
  `DESCRIPTION` VARCHAR(45) DEFAULT NULL,
  `RELATIONSHIPS` TEXT,
    `USER_IN` VARCHAR(100) NOT NULL,
    `USER_UP` VARCHAR(100) DEFAULT NULL,
    `USER_DE` VARCHAR(100) DEFAULT NULL,
    `TIME_IN` TIMESTAMP,
    `TIME_UP` TIMESTAMP NULL DEFAULT NULL,
    `TIME_DE` TIMESTAMP NULL DEFAULT NULL,
    `SBI_VERSION_IN` VARCHAR(10) DEFAULT NULL,
    `SBI_VERSION_UP` VARCHAR(10) DEFAULT NULL,
    `SBI_VERSION_DE` VARCHAR(10) DEFAULT NULL,
    `META_VERSION` VARCHAR(100) DEFAULT NULL,
    `ORGANIZATION` VARCHAR(20) DEFAULT NULL,
  PRIMARY KEY (`ID_SBI_FEDERATED_DATA_SET`)
);



--SpagoBI: 21.09.2015 Giulio Gavardi: CREATED TABLE SBI_OBJ_DATA_SET

CREATE TABLE SBI_OBJ_DATA_SET (
    BIOBJ_DS_ID INT(11) NOT NULL,
    BIOBJ_ID INT(11) NOT NULL,
    DS_ID INT(11) NOT NULL,
    IS_DETAIL BOOLEAN DEFAULT FALSE,
    USER_IN VARCHAR(100) NOT NULL,
    USER_UP VARCHAR(100) DEFAULT NULL,
    USER_DE VARCHAR(100) DEFAULT NULL,
    TIME_IN TIMESTAMP,
    TIME_UP TIMESTAMP NULL DEFAULT NULL,
    TIME_DE TIMESTAMP NULL DEFAULT NULL,
    SBI_VERSION_IN VARCHAR(10) DEFAULT NULL,
    SBI_VERSION_UP VARCHAR(10) DEFAULT NULL,
    SBI_VERSION_DE VARCHAR(10) DEFAULT NULL,
    META_VERSION VARCHAR(100) DEFAULT NULL,
    ORGANIZATION VARCHAR(20) DEFAULT NULL,
  PRIMARY KEY (BIOBJ_DS_ID)
);

Alter table `SBI_OBJ_DATA_SET` add Foreign Key (`BIOBJ_ID`) references `SBI_OBJECTS` (`BIOBJ_ID`) on delete  restrict on update  restrict;


    SET @row_number:=0;
    insert into SBI_OBJ_DATA_SET(BIOBJ_DS_ID, BIOBJ_ID, DS_ID, IS_DETAIL, USER_IN, TIME_IN, ORGANIZATION)
    select
    @row_number:=@row_number+1 rownum,
    BIOBJ_ID,  DATA_SET_ID, TRUE, 'server', current_timestamp,  ORGANIZATION
    from SBI_OBJECTS where DATA_SET_ID   is not null;
    commit;

  ALTER TABLE SBI_OBJECTS DROP COLUMN DATA_SET_ID;


SET @row_number:=0;
insert into SBI_AUTHORIZATIONS (ID, NAME, PRODUCT_TYPE_ID, USER_IN, TIME_IN)
select
(SELECT NEXT_VAL FROM hibernate_sequences WHERE SEQUENCE_NAME='SBI_AUTHORIZATIONS')+rownum-1
, 'ENABLE_FEDERATED_DATASET'
, PRODUCT_TYPE_ID
, 'server'
, current_timestamp
from
(select distinct @row_number:=@row_number+1 rownum, PRODUCT_TYPE_ID from SBI_PRODUCT_TYPE) pt;

update hibernate_sequences set NEXT_VAL = NEXT_VAL
        + (select count(distinct PRODUCT_TYPE_ID) from SBI_PRODUCT_TYPE)
where SEQUENCE_NAME = 'SBI_AUTHORIZATIONS';
commit;

update hibernate_sequences set NEXT_VAL = NEXT_VAL
        + (select count(distinct BIOBJ_DS_ID)+1 from SBI_OBJ_DATA_SET)
where SEQUENCE_NAME = 'SBI_OBJ_DATA_SET';
commit;

-- SpagoBI: 25/09/2015 Adapting table to Federation mapping
ALTER TABLE `SBI_FEDERATED_DATA_SET`
CHANGE COLUMN `ID_SBI_FEDERATED_DATA_SET` `FEDERATION_ID` INT(11) NOT NULL , RENAME TO  `SBI_FEDERATION_DEFINITION` ;



-- SpagoBI: 25/09/2015 Federation mapping tables
create table SBI_DATA_SET_FEDERATION (
	FEDERATION_ID int(11) NOT NULL,
	DS_ID int(11) NOT NULL,
	VERSION_NUM int(11) NOT NULL,
	ORGANIZATION VARCHAR(20) NOT NULL,
	PRIMARY KEY (FEDERATION_ID,DS_ID,VERSION_NUM,ORGANIZATION),
	CONSTRAINT FK_SBI_DATA_SET_FEDERATION_FEDERATION FOREIGN KEY (FEDERATION_ID) REFERENCES SBI_FEDERATION_DEFINITION (FEDERATION_ID),
	CONSTRAINT FK_SBI_DATA_SET_FEDERATION_DATA_SET FOREIGN KEY (DS_ID, VERSION_NUM, ORGANIZATION) REFERENCES SBI_DATA_SET (DS_ID, VERSION_NUM,ORGANIZATION)
);



ALTER TABLE SBI_DATA_SET ADD COLUMN FEDERATION_ID INT(11) NULL DEFAULT NULL  AFTER SCOPE_ID ;
ALTER TABLE SBI_DATA_SET
  ADD CONSTRAINT FK_SBI_FEDERATION
  FOREIGN KEY (FEDERATION_ID )
  REFERENCES SBI_FEDERATION_DEFINITION (FEDERATION_ID)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

--SpagoBI: 30.10.2015 Alessandro Portosa: ADDING UNIQUE CONSTRAINT IN TABLE SBI_OBJ_DATA_SET
CREATE TABLE SBI_OBJ_DATA_SET (
    BIOBJ_DS_ID INT(11) NOT NULL,
    BIOBJ_ID INT(11) NOT NULL,
    DS_ID INT(11) NOT NULL,
    IS_DETAIL BOOLEAN DEFAULT FALSE,
    USER_IN VARCHAR(100) NOT NULL,
    USER_UP VARCHAR(100) DEFAULT NULL,
    USER_DE VARCHAR(100) DEFAULT NULL,
    TIME_IN TIMESTAMP,
    TIME_UP TIMESTAMP NULL DEFAULT NULL,
    TIME_DE TIMESTAMP NULL DEFAULT NULL,
    SBI_VERSION_IN VARCHAR(10) DEFAULT NULL,
    SBI_VERSION_UP VARCHAR(10) DEFAULT NULL,
    SBI_VERSION_DE VARCHAR(10) DEFAULT NULL,
    META_VERSION VARCHAR(100) DEFAULT NULL,
    ORGANIZATION VARCHAR(20) DEFAULT NULL,
    CONSTRAINT XAK1SBI_OBJ_DATA_SET UNIQUE (BIOBJ_ID ,DS_ID, ORGANIZATION),
  PRIMARY KEY (BIOBJ_DS_ID)
);


--SpagoBI: 16.12.2015 Alberto Ghedin: add column indicationg that the federation is generated authomaticlly after the creation of a derived dataset
ALTER TABLE SBI_FEDERATION_DEFINITION ADD COLUMN DEGENERATED BOOLEAN DEFAULT FALSE;

-- 22.12.2015 Lupo: added new custom oracle spatial dialect to dialects' domain
INSERT into SBI_DOMAINS (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM,VALUE_DS, USER_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'org.hibernatespatial.oracle.CustomOracleSpatialDialect', 'sbidomains.nm.oracle_spatial', 'DIALECT_HIB', 'Predefined hibernate dialect', 'sbidomains.ds.oracle_spatial', '');
UPDATE hibernate_sequences SET next_val = (SELECT MAX(VALUE_ID) + 1 FROM SBI_DOMAINS) WHERE sequence_name = 'SBI_DOMAINS';

-- 06.01.2016 Benedetto Milazzo: added new columns to tables "SBI_PARUSE" and "SBI_PARAMETERS"
ALTER TABLE `SBI_PARUSE`
	ADD COLUMN VALUE_SELECTION VARCHAR(20) NULL AFTER MULTIVALUE_FLAG,
	ADD COLUMN SELECTED_LAYER VARCHAR(100) NULL AFTER VALUE_SELECTION,
	ADD COLUMN SELECTED_LAYER_PROP VARCHAR(40) NULL AFTER SELECTED_LAYER;

ALTER TABLE `SBI_PARAMETERS`
	ADD COLUMN VALUE_SELECTION VARCHAR(20) NULL AFTER TEMPORAL_FLAG,
	ADD COLUMN SELECTED_LAYER VARCHAR(100) NULL AFTER VALUE_SELECTION,
	ADD COLUMN SELECTED_LAYER_PROP VARCHAR(40) NULL AFTER SELECTED_LAYER;

-- 05.02.2015 Alessandro Portosa: removed the table SBI_CACHE_JOINED_ITEM from all the DB scripts

-- 08. 02. 2016. Nikola Simović: Added unique constraint for "NAME" and "LABEL" column for SBI_FEDERATION_FEDERATION
	ALTER TABLE `SBI_FEDERATION_DEFINITION` ADD UNIQUE INDEX `NAME_UNIQUE` (`NAME` ASC);
	ALTER TABLE `SBI_FEDERATION_DEFINITION` ADD UNIQUE INDEX `LABEL_UNIQUE` (`LABEL` ASC);

-- 10.02.2015 Alessandro Portosa: changed the type of field NAME of SBI_CACHE_ITEM from all the DB scripts
	e.g. ALTER TABLE SBI_CACHE_ITEM ALTER COLUMN NAME TEXT NOT NULL

-- 23.02.2015 Francesco Lucchi MySQL_create.sql: 1) fixed HIBERNATE_SEQUENCES table name (now uppercased);
                                                 2) removed backticks.

-- 23.02.2015 Francesco Lucchi MySQL_drop.sql: 1) disabled foreign keys checks during DROP statement execution in order to avoid errors;
                                               2) removed "DROP TABLE hibernate_sequences CASCADE;" (duplicated).
                                               3) removed "DROP TABLE SBI_ORGANIZATION_ENGINE CASCADE;".
											   4) added some DROPs.

-- 23.02.2015 Francesco Lucchi Athena_mysql_drop.sql: added some DROPs.

-- 23.02.2015 Francesco Lucchi: removed SBI_DOSSIER_* tables.

-- 04.04.2016 Vincenzo Gambino: SBI_KPI_SCORECARD add OPTIONS column
	ALTER TABLE `SBI_KPI_SCORECARD` ADD COLUMN `OPTIONS` VARCHAR(1000) NULL AFTER `ORGANIZATION`

-- 08/04/2016 Antonella Giachino: renamed SBI_GL_TABLE e SBI_GL_BNESS_CLS and column labels
-- META DATA
RENAME TABLE SBI_GL_TABLE TO SBI_META_TABLE;
ALTER TABLE SBI_META_TABLE CHANGE LABEL NAME VARCHAR(100);
ALTER TABLE SBI_META_TABLE ADD SOURCE_ID INT(11) NOT NULL AFTER NAME;
ALTER TABLE SBI_META_TABLE ADD DELETED BOOLEAN NOT NULL DEFAULT FALSE AFTER NAME;

RENAME TABLE SBI_GL_BNESS_CLS TO SBI_META_BC;
ALTER TABLE SBI_META_BC CHANGE UNIQUE_IDENTIFIER  NAME VARCHAR(100);
-- next stmt add a relation to SBI_META_MODELS (delete the explicit name model field)
ALTER TABLE SBI_META_BC ADD MODEL_ID INT(11) NOT NULL AFTER BC_ID;
ALTER TABLE SBI_META_BC ADD DELETED BOOLEAN NOT NULL DEFAULT FALSE AFTER MODEL_ID;

-- set original values for the model referenced
UPDATE SBI_META_BC DEST, (SELECT ID, NAME FROM SBI_META_MODELS) SRC
SET DEST.MODEL_ID = SRC.ID
WHERE SRC.NAME = DEST.DATAMART_NAME;
ALTER TABLE SBI_META_BC DROP COLUMN DATAMART_NAME;

CREATE TABLE SBI_META_SOURCE (
	SOURCE_ID 				INT(11) NOT NULL AUTO_INCREMENT,
	NAME 					VARCHAR(100) NOT NULL,
	TYPE 					VARCHAR(100) NOT NULL,
	URL 					VARCHAR(100) NULL,
	LOCATION 				VARCHAR(100) NULL,
	SOURCE_SCHEMA 			VARCHAR(100) NULL,
	SOURCE_CATALOGUE    	VARCHAR(100) NULL,
	ROLE                    VARCHAR(100) NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (SOURCE_ID)
) ENGINE=InnoDB ;

/*
CREATE TABLE SBI_META_TABLE  (
	TABLE_ID 				INT(11) NOT NULL AUTO_INCREMENT,
	SOURCE_ID 				INT(11) NOT NULL,
	NAME 					VARCHAR(100) NOT NULL,
	DELETED					BOOLEAN NOT NULL DEFAULT FALSE,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (TABLE_ID)
) ENGINE=InnoDB ;
*/

CREATE TABLE SBI_META_TABLE_COLUMN  (
	COLUMN_ID 				INT(11) NOT NULL AUTO_INCREMENT,
	TABLE_ID 				INT(11) NOT NULL,
	NAME 					VARCHAR(100) NOT NULL,
	TYPE					VARCHAR(100) NOT NULL,
	DELETED					BOOLEAN NOT NULL DEFAULT FALSE,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (COLUMN_ID)
) ENGINE=InnoDB ;

/*
CREATE TABLE SBI_META_BC  (
	BC_ID 					INT(11) NOT NULL AUTO_INCREMENT,
	TABLE_ID				INT(11) NOT NULL,
	MODEL_ID				INT(11) NOT NULL,
	NAME					VARCHAR(100) NOT NULL,
	DELETED					BOOLEAN NOT NULL DEFAULT FALSE,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (BC_ID)
) ENGINE=InnoDB ;
*/

CREATE TABLE SBI_META_BC_ATTRIBUTE  (
	ATTRIBUTE_ID 			INT(11) NOT NULL AUTO_INCREMENT,
	BC_ID					INT(11) NOT NULL,
	COLUMN_ID				INT(11) NOT NULL,
	NAME					VARCHAR(100) NOT NULL,
	TYPE					VARCHAR(100) NOT NULL,
	DELETED					BOOLEAN NOT NULL DEFAULT FALSE,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (ATTRIBUTE_ID)
) ENGINE=InnoDB ;

CREATE TABLE SBI_META_TABLE_BC  (
	TABLE_ID 					INT(11) NOT NULL,
	BC_ID 					INT(11) NOT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (TABLE_ID, BC_ID)
) ENGINE=InnoDB ;

CREATE TABLE SBI_META_DS_BC  (
	DS_ID 					INT(11) NOT NULL,
	BC_ID 					INT(11) NOT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NOT NULL,

	PRIMARY KEY (DS_ID, BC_ID)
) ENGINE=InnoDB ;


CREATE TABLE SBI_META_OBJ_DS  (
	DS_ID 					INT(11) NOT NULL,
	OBJ_ID 					INT(11) NOT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (DS_ID, OBJ_ID)
) ENGINE=InnoDB ;

CREATE TABLE SBI_META_DS_TABLE  (
	DS_ID 					INT(11) NOT NULL,
	TABLE_ID 					INT(11) NOT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (DS_ID, TABLE_ID)
) ENGINE=InnoDB ;

CREATE TABLE SBI_META_OBJ_TABLE  (
	OBJ_ID 					INT(11) NOT NULL,
	TABLE_ID 				INT(11) NOT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NOT NULL,

	PRIMARY KEY (OBJ_ID, TABLE_ID)
) ENGINE=InnoDB ;

CREATE TABLE SBI_META_JOB  (
	JOB_ID 					INT(11) NOT NULL AUTO_INCREMENT,
	NAME					VARCHAR(100) NOT NULL,
	DELETED					BOOLEAN NOT NULL DEFAULT FALSE,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (JOB_ID)
) ENGINE=InnoDB ;


CREATE TABLE SBI_META_JOB_SOURCE  (
	JOB_ID					INT(11) NOT NULL,
	SOURCE_ID				INT(11) NOT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (JOB_ID, SOURCE_ID)
) ENGINE=InnoDB ;

CREATE TABLE SBI_META_JOB_TABLE  (
	JOB_ID					INT(11) NOT NULL,
	TABLE_ID				INT(11) NOT NULL,
	ROLE					VARCHAR(100) NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,

	PRIMARY KEY (JOB_ID,TABLE_ID)
) ENGINE=InnoDB ;

-- ALTER --
ALTER TABLE SBI_META_TABLE ADD CONSTRAINT FK_SBI_META_TABLE_1 FOREIGN KEY (SOURCE_ID) REFERENCES SBI_META_SOURCE (SOURCE_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_TABLE_COLUMN ADD CONSTRAINT FK_SBI_META_COLUMN_1 FOREIGN KEY (TABLE_ID) REFERENCES SBI_META_TABLE (TABLE_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_BC ADD CONSTRAINT FK_SBI_META_BC_1 FOREIGN KEY (MODEL_ID) REFERENCES SBI_META_MODELS(ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_BC_ATTRIBUTE ADD CONSTRAINT FK_SBI_META_BC_ATTRIBUTE_1 FOREIGN KEY (BC_ID) REFERENCES SBI_META_BC(BC_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_BC_ATTRIBUTE ADD CONSTRAINT FK_SBI_META_BC_ATTRIBUTE_2 FOREIGN KEY (COLUMN_ID) REFERENCES SBI_META_TABLE_COLUMN(COLUMN_ID) ON DELETE  RESTRICT ON UPDATE RESTRICT;
ALTER TABLE SBI_META_DS_BC ADD CONSTRAINT FK_SBI_META_DS_BC_1 FOREIGN KEY (DS_ID) REFERENCES SBI_DATA_SET(DS_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_DS_BC ADD CONSTRAINT FK_SBI_META_DS_BC_2 FOREIGN KEY (BC_ID) REFERENCES SBI_META_BC(BC_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_TABLE_BC ADD CONSTRAINT FK_SBI_META_TABLE_BC_1 FOREIGN KEY (TABLE_ID) REFERENCES SBI_META_TABLE(TABLE_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_TABLE_BC ADD CONSTRAINT FK_SBI_META_TABLE_BC_2 FOREIGN KEY (BC_ID) REFERENCES SBI_META_BC(BC_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_OBJ_DS ADD CONSTRAINT FK_SBI_META_OBJ_DS_1 FOREIGN KEY (DS_ID) REFERENCES SBI_DATA_SET(DS_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_OBJ_DS ADD CONSTRAINT FK_SBI_META_OBJ_DS_2 FOREIGN KEY (OBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_DS_TABLE ADD CONSTRAINT FK_SBI_META_DS_TABLE_1 FOREIGN KEY (DS_ID) REFERENCES SBI_DATA_SET(DS_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_DS_TABLE ADD CONSTRAINT FK_SBI_META_DS_TABLE_2 FOREIGN KEY (TABLE_ID) REFERENCES SBI_META_TABLE(TABLE_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_OBJ_TABLE ADD CONSTRAINT FK_SBI_META_OBJ_TABLE_1 FOREIGN KEY (OBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_OBJ_TABLE ADD CONSTRAINT FK_SBI_META_OBJ_TABLE_2 FOREIGN KEY (TABLE_ID) REFERENCES SBI_META_TABLE(TABLE_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_JOB_SOURCE ADD CONSTRAINT FK_SBI_META_JOB_SOURCE_1 FOREIGN KEY (JOB_ID) REFERENCES SBI_META_JOB(JOB_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_JOB_SOURCE ADD CONSTRAINT FK_SBI_META_JOB_SOURCE_2 FOREIGN KEY (SOURCE_ID) REFERENCES SBI_META_SOURCE(SOURCE_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_JOB_TABLE ADD CONSTRAINT FK_SBI_META_JOB_TABLE_1 FOREIGN KEY (JOB_ID) REFERENCES SBI_META_JOB(JOB_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_META_JOB_TABLE ADD CONSTRAINT FK_SBI_META_JOB_TABLE_2 FOREIGN KEY (TABLE_ID) REFERENCES SBI_META_TABLE(TABLE_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;

-- 18.04.2016 Lupo: SBI_OUTPUT_PARAMETER added two columns
	ALTER TABLE SBI_OUTPUT_PARAMETER ADD COLUMN FORMAT_CODE VARCHAR(20) NULL DEFAULT NULL AFTER LABEL;
	ALTER TABLE SBI_OUTPUT_PARAMETER ADD COLUMN FORMAT_VALUE VARCHAR(20) NULL DEFAULT NULL AFTER FORMAT_CODE;
-- 19.04.2016 Lupo: Removed CONSTRAINT FK_01_SBI_KPI_SCORECARD from Athena_mysql_create.sql
// creating table for relations
CREATE TABLE SBI_META_DATASET_REL  (
	DATASET_ID				INT(11) NOT NULL,
	TABLE_ID				INT(11) NOT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL

) ENGINE=InnoDB ;

CREATE TABLE SBI_META_DOCUMENT_REL  (
	DOCUMENT_ID				INT(11) NOT NULL,
	TABLE_ID				INT(11) NOT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
	META_VERSION 			VARCHAR(100) NULL DEFAULT NULL,
	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL

) ENGINE=InnoDB ;

-- 20.04.2016 Alessandro Portosa Athena_mysql_drop.sql: added DROP for SBI_EXT_ROLES_DS_CATEGORY
DROP TABLE IF EXISTS SBI_EXT_ROLES_DS_CATEGORY CASCADE ;

-- 20.04.2016 Alessandro Portosa Athena_mysql_create.sql: added CREATE for SBI_EXT_ROLES_DS_CATEGORY
CREATE TABLE  SBI_EXT_ROLES_DS_CATEGORY (
  EXT_ROLE_ID INTEGER NOT NULL,
  CATEGORY_ID INTEGER NOT NULL,
  PRIMARY KEY (EXT_ROLE_ID, CATEGORY_ID)
) ENGINE=InnoDB ;
ALTER TABLE SBI_EXT_ROLES_DS_CATEGORY ADD CONSTRAINT FK_SB_EXT_ROLES_DATA_SET_CATEGORY_1 FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_EXT_ROLES_DS_CATEGORY ADD CONSTRAINT FK_SB_EXT_ROLES_DATA_SET_CATEGORY_2 FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_DOMAINS (VALUE_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;

-- 27.04.2016 Daniele Davì
-- REMOVED CONTENT Athena***create.sql: MERGED EVERYTHING ON ***_create.sql
-- dropped old KPI tables
-- added new SBI_KPI_VALUE

DROP TABLE IF EXISTS SBI_KPI_COMMENTS CASCADE ;
DROP TABLE IF EXISTS SBI_ALARM_DISTRIBUTION CASCADE ;
DROP TABLE IF EXISTS SBI_ALARM_CONTACT CASCADE ;
DROP TABLE IF EXISTS SBI_ALARM_EVENT CASCADE ;
DROP TABLE IF EXISTS SBI_ALARM CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_MODEL_RESOURCES CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_ERROR CASCADE;
DROP TABLE IF EXISTS SBI_ORG_UNIT_GRANT_NODES CASCADE;
DROP TABLE IF EXISTS SBI_ORG_UNIT_NODES CASCADE;
DROP TABLE IF EXISTS SBI_ORG_UNIT CASCADE;
DROP TABLE IF EXISTS SBI_GOAL_KPI CASCADE ;
DROP TABLE IF EXISTS SBI_GOAL_HIERARCHY CASCADE ;
DROP TABLE IF EXISTS SBI_GOAL CASCADE ;
DROP TABLE IF EXISTS SBI_ORG_UNIT_GRANT CASCADE;
DROP TABLE IF EXISTS SBI_KPI_MODEL_INST CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_INST_PERIOD CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_INSTANCE_HISTORY CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_PERIODICITY CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_VALUE CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_MODEL CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_INSTANCE CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_DOCUMENTS CASCADE;
DROP TABLE IF EXISTS SBI_KPI_ROLE CASCADE ;
DROP TABLE IF EXISTS SBI_KPI_REL CASCADE ;
DROP TABLE IF EXISTS SBI_KPI CASCADE ;
DROP TABLE IF EXISTS SBI_MEASURE_UNIT CASCADE ;
DROP TABLE IF EXISTS SBI_THRESHOLD_VALUE CASCADE ;
DROP TABLE IF EXISTS SBI_THRESHOLD CASCADE ;
DROP TABLE IF EXISTS SBI_RESOURCES CASCADE ;
DROP TABLE IF EXISTS SBI_ORG_UNIT_HIERARCHIES CASCADE;

CREATE TABLE SBI_KPI_VALUE (
  	ID 					INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
  	KPI_ID 				INTEGER NOT NULL,
  	KPI_VERSION 		INTEGER NOT NULL,
  	LOGICAL_KEY 		VARCHAR(4096),
  	TIME_RUN 			TIMESTAMP NOT NULL,
  	COMPUTED_VALUE 		DOUBLE NOT NULL,
  	MANUAL_VALUE 		DOUBLE,
  	THE_DAY 			VARCHAR(3) NOT NULL,
  	THE_WEEK 			VARCHAR(3) NOT NULL,
  	THE_MONTH 			VARCHAR(3) NOT NULL,
  	THE_QUARTER 		VARCHAR(3) NOT NULL,
  	THE_YEAR 			VARCHAR(4) NOT NULL
) ENGINE=INNODB;
-- 22.04.2016 Lupo: Removed NOT NULL constrain on field BIOBJ_ID of TABLE SBI_OUTPUT_PARAMETER
	ALTER TABLE SBI_OUTPUT_PARAMETER CHANGE COLUMN BIOBJ_ID BIOBJ_ID INT(11) NULL DEFAULT NULL ;
-- 29.04.2016 Lupo: Removed column TYPE from table SBI_KPI_EXECUTION_FILTER;
	ALTER TABLE SBI_KPI_EXECUTION_FILTER DROP COLUMN TYPE;
-- 02.05.2016 Lupo: Created tables SBI_ALERT_ACTION and SBI_ALERT_LISTENER
CREATE TABLE SBI_ALERT_ACTION (
	ID 					INT(11) NOT NULL,
    NAME 				VARCHAR(40) NOT NULL,
    CLASS_NAME 			VARCHAR(200) NOT NULL,
    TEMPLATE			VARCHAR(200) NOT NULL,
	USER_IN 			VARCHAR(100) NOT NULL,
	USER_UP 			VARCHAR(100),
	USER_DE 			VARCHAR(100),
	TIME_IN 			TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 			TIMESTAMP,
	TIME_DE 			TIMESTAMP,
	SBI_VERSION_IN 		VARCHAR(10),
	SBI_VERSION_UP 		VARCHAR(10),
	SBI_VERSION_DE 		VARCHAR(10),
	META_VERSION 		VARCHAR(100),
	ORGANIZATION 		VARCHAR(20),
	PRIMARY KEY(ID)
) ENGINE=InnoDB ;
CREATE TABLE SBI_ALERT_LISTENER (
	ID 					INT(11) NOT NULL,
    NAME 				VARCHAR(40) NOT NULL,
    CLASS_NAME 			VARCHAR(200) NOT NULL,
    TEMPLATE			VARCHAR(200) NOT NULL,
	USER_IN 			VARCHAR(100) NOT NULL,
	USER_UP 			VARCHAR(100),
	USER_DE 			VARCHAR(100),
	TIME_IN 			TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 			TIMESTAMP,
	TIME_DE 			TIMESTAMP,
	SBI_VERSION_IN 		VARCHAR(10),
	SBI_VERSION_UP 		VARCHAR(10),
	SBI_VERSION_DE 		VARCHAR(10),
	META_VERSION 		VARCHAR(100),
	ORGANIZATION 		VARCHAR(20),
	PRIMARY KEY(ID)
) ENGINE=InnoDB ;

-- 02.05.2016 Antonella: Added fields for correct fk vs SBI_DATA_SET and define new pk, fk:
ALTER TABLE SBI_META_DS_TABLE ADD COLUMN VERSION_NUM INT(11) NOT NULL AFTER DS_ID;
ALTER TABLE SBI_META_DS_BC ADD COLUMN VERSION_NUM INT(11) NOT NULL AFTER DS_ID;
ALTER TABLE SBI_META_OBJ_DS ADD COLUMN VERSION_NUM INT(11) NOT NULL AFTER DS_ID;

ALTER TABLE SBI_META_DS_BC DROP PRIMARY KEY, ADD PRIMARY KEY (DS_ID,VERSION_NUM,ORGANIZATION,BC_ID);
ALTER TABLE SBI_META_DS_TABLE DROP PRIMARY KEY, ADD PRIMARY KEY (DS_ID,VERSION_NUM,ORGANIZATION,TABLE_ID);
ALTER TABLE SBI_META_OBJ_DS DROP PRIMARY KEY, ADD PRIMARY KEY (DS_ID,VERSION_NUM,ORGANIZATION,OBJ_ID);

ALTER TABLE SBI_META_DS_BC DROP FOREIGN KEY FK_SBI_META_DS_BC_1;
ALTER TABLE SBI_META_DS_TABLE DROP FOREIGN KEY FK_SBI_META_DS_TABLE_1;
ALTER TABLE SBI_META_OBJ_DS DROP FOREIGN KEY FK_SBI_META_OBJ_DS_1;

ALTER TABLE SBI_META_DS_BC 					ADD CONSTRAINT FK_SBI_META_DS_BC_1					FOREIGN KEY (DS_ID,VERSION_NUM,ORGANIZATION) REFERENCES SBI_DATA_SET(DS_ID,VERSION_NUM,ORGANIZATION);
ALTER TABLE SBI_META_DS_TABLE 				ADD CONSTRAINT FK_SBI_META_DS_TABLE_1			FOREIGN KEY (DS_ID,VERSION_NUM,ORGANIZATION) REFERENCES SBI_DATA_SET(DS_ID,VERSION_NUM,ORGANIZATION);
ALTER TABLE SBI_META_OBJ_DS 				ADD CONSTRAINT FK_SBI_META_OBJ_DS_1 				FOREIGN KEY (DS_ID,VERSION_NUM,ORGANIZATION) REFERENCES SBI_DATA_SET(DS_ID,VERSION_NUM,ORGANIZATION);

-- 03.05.2016 Lupo: Created tables SBI_ALERT and SBI_ALERT_LOG
CREATE TABLE SBI_ALERT (
	ID 					INT(11) NOT NULL,
	NAME 				VARCHAR(40) NOT NULL,
	LISTENER_ID			INT(11) NOT NULL,
	LISTENER_OPTIONS    VARCHAR(4000),
	USER_IN 			VARCHAR(100) NOT NULL,
	USER_UP 			VARCHAR(100),
	USER_DE 			VARCHAR(100),
	TIME_IN 			TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 			TIMESTAMP,
	TIME_DE 			TIMESTAMP,
	SBI_VERSION_IN 		VARCHAR(10),
	SBI_VERSION_UP 		VARCHAR(10),
	SBI_VERSION_DE 		VARCHAR(10),
	META_VERSION 		VARCHAR(100),
	ORGANIZATION 		VARCHAR(20),
	PRIMARY KEY(ID)
);
CREATE TABLE SBI_ALERT_LOG (
	ID					INT(11) NOT NULL,
    LISTENER_ID		 	INT(11) NOT NULL,
    ACTION_ID			INT(11),
    LISTENER_PARAMS		VARCHAR(4000),
    ACTION_PARAMS		VARCHAR(4000),
    DETAIL				VARCHAR(4000),
    USER_IN 			VARCHAR(100) NOT NULL,
	USER_UP 			VARCHAR(100),
	USER_DE 			VARCHAR(100),
	TIME_IN 			TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	TIME_UP 			TIMESTAMP,
	TIME_DE 			TIMESTAMP,
	SBI_VERSION_IN 		VARCHAR(10),
	SBI_VERSION_UP 		VARCHAR(10),
	SBI_VERSION_DE 		VARCHAR(10),
	META_VERSION 		VARCHAR(100),
	ORGANIZATION 		VARCHAR(20),
    PRIMARY KEY(ID)
);
ALTER TABLE SBI_ALERT ADD CONSTRAINT FK_01_SBI_ALERT FOREIGN KEY (LISTENER_ID) REFERENCES SBI_ALERT_LISTENER(ID);
ALTER TABLE SBI_ALERT_LOG ADD CONSTRAINT FK_01_SBI_ALERT_LOG FOREIGN KEY (LISTENER_ID) REFERENCES SBI_ALERT_LISTENER(ID),
ADD CONSTRAINT FK_02_SBI_ALERT_LOG FOREIGN KEY (ACTION_ID) REFERENCES SBI_ALERT_ACTION(ID);

-- 05.05.2016 Lupo: Added drop of tables SBI_ALERT_ACTION, SBI_ALERT_LISTENER, SBI_ALERT CASCADE and SBI_ALERT_LOG to mysql_drop.sql

-- 06.05.2016 Alessandro Portosa: Renamed HIBERNATE_SEQUENCES and its fields with lowercase. It must be lowercase for Unix compatibility


--09.05.2016 Giulio Gavardi
ALTER TABLE SBI_OBJECTS ADD COLUMN LOCKED_BY_USER VARCHAR(100) NULL;

--09.05.2016 Antonella Giachino: dropped SBI_META_OBJ_TABLE and SBI_META_DS_TABLE
--(substituited by SBI_META_DOCUMENT_REL and SBI_META_DATASET_REL)
DROP TABLE IF EXISTS SBI_META_OBJ_TABLE CASCADE ;
DROP TABLE IF EXISTS SBI_META_DS_TABLE CASCADE ;


--11.05.2016 Antonella Giachino: add pk in SBI_META_DATASET_REL and SBI_META_DOCUMENT_REL
ALTER TABLE SBI_META_DATASET_REL
ADD COLUMN DS_TABLE_REL_ID INT(11) NOT NULL ,
ADD PRIMARY KEY (DS_TABLE_REL_ID);

ALTER TABLE SBI_META_DOCUMENT_REL
ADD COLUMN DOC_TABLE_REL_ID INT(11) NOT NULL ,
ADD PRIMARY KEY (`DOC_TABLE_REL_ID`);

--13.05.2016 Chiara Capobianco: SBI_EXT_ROLES_CATEGORY substitutes SBI_EXT_ROLES_DS_CATEGORY
INSERT INTO SBI_EXT_ROLES_CATEGORY SELECT * FROM SBI_EXT_ROLES_DS_CATEGORY;
commit;
DROP TABLE SBI_EXT_ROLES_DS_CATEGORY;


--16.05.2016 Carmelo Spiccia: missing columns in SBI_KPI_VALUE
ALTER TABLE SBI_KPI_VALUE ADD STATE CHAR(1) NOT NULL DEFAULT '0';
ALTER TABLE SBI_KPI_VALUE ADD MANUAL_NOTE VARCHAR(1000) NULL NULL;


--16.05.2016 Giovanni Luca Ulivo: Glossary navigation relation updated

ALTER TABLE sbi_gl_table_wlist DROP FOREIGN KEY TABLEID;

ALTER TABLE sbi_gl_table_wlist
ADD CONSTRAINT TABLE_ID
  FOREIGN KEY (`TABLE_ID`)
  REFERENCES  sbi_meta_table (TABLE_ID)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;


ALTER TABLE sbi_gl_bness_cls_wlist DROP FOREIGN KEY BCID;

ALTER TABLE sbi_gl_bness_cls_wlist
ADD CONSTRAINT `BCID`
  FOREIGN KEY (`BC_ID`)
  REFERENCES sbi_meta_bc (BC_ID)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;


DROP TABLE sbi_gl_table;
DROP TABLE sbi_gl_bness_cls;


ALTER TABLE sbi_gl_table_wlist
ADD COLUMN COLUMN_NAME VARCHAR(100) NOT NULL AFTER TABLE_ID;

ALTER TABLE sbi_gl_table_wlist DROP PRIMARY KEY, ADD PRIMARY KEY (TABLE_ID, WORD_ID, COLUMN_NAME);


ALTER TABLE  sbi_gl_bness_cls_wlist
CHANGE COLUMN COLUMN_NAME COLUMN_NAME VARCHAR(100) NOT NULL ,
DROP PRIMARY KEY,
ADD PRIMARY KEY (BC_ID, WORD_ID, COLUMN_NAME);

--17.05.2016 Antonella Giachino: add unique_name in SBI_META_BC
ALTER TABLE  SBI_META_BC ADD COLUMN UNIQUE_NAME VARCHAR(100) AFTER NAME;

--20.05.2016 Alberto Ghedin
update SBI_ENGINES set MAIN_URL = '/knowagewhatifengine/restful-services/startwhatif' where LABEL = 'knowagewhatifengine';

--25.05.2016 Alessandro Piovani
CREATE TABLE SBI_CATALOG_FUNCTION (
  FUNCTION_ID INTEGER NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  LANGUAGE VARCHAR(100) NOT NULL,
  SCRIPT TEXT NOT NULL,
  USER_IN 				VARCHAR(100) NOT NULL,
  USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
  USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
  TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
  TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
  SBI_VERSION_IN 		VARCHAR(10) NULL DEFAULT NULL,
  SBI_VERSION_UP 		VARCHAR(10) NULL DEFAULT NULL,
  SBI_VERSION_DE 		VARCHAR(10) NULL DEFAULT NULL,
  ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,
  PRIMARY KEY (FUNCTION_ID)
  )  ENGINE=InnoDB;


CREATE TABLE SBI_FUNCTION_INPUT_VARIABLE (
  FUNCTION_ID INTEGER NOT NULL,
  VAR_NAME VARCHAR(100) NOT NULL,
  VAR_VALUE VARCHAR(100) NOT NULL,
  USER_IN 				VARCHAR(100) NOT NULL,
  USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
  USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
  TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
  TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
  SBI_VERSION_IN 		VARCHAR(10) NULL DEFAULT NULL,
  SBI_VERSION_UP 		VARCHAR(10) NULL DEFAULT NULL,
  SBI_VERSION_DE 		VARCHAR(10) NULL DEFAULT NULL,
  ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,
  PRIMARY KEY (FUNCTION_ID,VAR_NAME)
  ) ENGINE=InnoDB;

CREATE TABLE SBI_FUNCTION_INPUT_DATASET (
  FUNCTION_ID INTEGER NOT NULL,
  DS_ID INTEGER NOT NULL,
  USER_IN 				VARCHAR(100) NOT NULL,
  USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
  USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
  TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
  TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
  SBI_VERSION_IN 		VARCHAR(10) NULL DEFAULT NULL,
  SBI_VERSION_UP 		VARCHAR(10) NULL DEFAULT NULL,
  SBI_VERSION_DE 		VARCHAR(10) NULL DEFAULT NULL,
  ORGANIZATION 			VARCHAR(20) NULL DEFAULT  NULL,
  PRIMARY KEY (FUNCTION_ID, DS_ID)
  ) ENGINE=InnoDB;



CREATE TABLE SBI_FUNCTION_OUTPUT (
 FUNCTION_ID INTEGER NOT NULL,
 LABEL VARCHAR(100) NOT NULL,
 OUT_TYPE INTEGER NOT NULL,
 USER_IN 				VARCHAR(100) NOT NULL,
 USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
 USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
 TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
 TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
 TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
 SBI_VERSION_IN 		VARCHAR(10) NULL DEFAULT NULL,
 SBI_VERSION_UP 		VARCHAR(10) NULL DEFAULT NULL,
 SBI_VERSION_DE 		VARCHAR(10) NULL DEFAULT NULL,
 ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,
 PRIMARY KEY (FUNCTION_ID,LABEL)
 )  ENGINE=InnoDB;


ALTER TABLE SBI_FUNCTION_OUTPUT 			ADD CONSTRAINT FK_SBI_FUNCTION_OUTPUT_1 			FOREIGN KEY ( OUT_TYPE ) 			REFERENCES SBI_DOMAINS ( VALUE_ID ) 		 ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_FUNCTION_OUTPUT 			ADD CONSTRAINT FK_SBI_FUNCTION_OUTPUT_2 			FOREIGN KEY ( FUNCTION_ID ) 		REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_FUNCTION_INPUT_DATASET 		ADD CONSTRAINT FK_FUNCTION_INPUT_DATASETS_2  		FOREIGN KEY (FUNCTION_ID) 			REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE 	ADD CONSTRAINT FK_FUNCTION_INPUT_VARIABLES_1  		FOREIGN KEY (FUNCTION_ID) 			REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
-- 26.05.2016 Salvatore Lupo
ALTER TABLE SBI_ALERT ADD COLUMN SINGLE_EXECUTION CHAR(1),
ADD COLUMN EVENT_BEFORE_TRIGGER_ACTION INT(11);
-- 31.05.2016 Salvatore Lupo
ALTER TABLE SBI_CROSS_NAVIGATION_PAR ADD COLUMN FIXED_VALUE VARCHAR(100) ;

-- 02.06.2016. Ana Tomic, Nikola Simovic
CREATE TABLE SBI_FUNCTIONS_ORGANIZER (
       FUNCT_ID             INTEGER NOT NULL ,
       PARENT_FUNCT_ID      INTEGER NULL,
       NAME                 VARCHAR(40) NULL,
       DESCR                VARCHAR(160) NULL,
       PATH                 VARCHAR(400) NULL,
       CODE                 VARCHAR(40) NOT NULL,
       PROG 				INTEGER NOT NULL,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       UNIQUE XAK1SBI_FUNCTIONS_ORGANIZER (CODE, USER_IN),
       PRIMARY KEY (FUNCT_ID)
) ENGINE=InnoDB;

CREATE TABLE SBI_OBJ_FUNC_ORGANIZER (
       BIOBJ_ID             INTEGER NOT NULL,
       FUNCT_ID             INTEGER NOT NULL,
       PROG                 INTEGER NULL,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       PRIMARY KEY (BIOBJ_ID, FUNCT_ID)
) ENGINE=InnoDB;

ALTER TABLE SBI_FUNCTIONS_ORGANIZER ADD CONSTRAINT FK_SBI_FUNCTIONS_ORGANIZER_1 FOREIGN KEY (PARENT_FUNCT_ID) REFERENCES SBI_FUNCTIONS_ORGANIZER (FUNCT_ID) ON DELETE  RESTRICT;
ALTER TABLE SBI_OBJ_FUNC_ORGANIZER ADD CONSTRAINT FK_SBI_OBJ_FUNC_ORGANIZER_1 FOREIGN KEY (FUNCT_ID) REFERENCES SBI_FUNCTIONS_ORGANIZER (FUNCT_ID) ON DELETE  RESTRICT;
ALTER TABLE SBI_OBJ_FUNC_ORGANIZER ADD CONSTRAINT FK_SBI_OBJ_FUNC_ORGANIZER_2 FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID)  ON UPDATE CASCADE ON DELETE CASCADE;

-- 08.06.2016. Alessandro Portosa
ALTER TABLE SBI_CATALOG_FUNCTION ADD COLUMN DESCRIPTION TEXT NOT NULL AFTER NAME;

-- 09.06.2016 Vincenzo Gambino
ALTER TABLE SBI_PARUSE ADD COLUMN OPTIONS VARCHAR(4000) NULL DEFAULT NULL

--10.06.2016 Antonella Giachino: add hierarchy_name, level and member_name in SBI_GEO_MAP
ALTER TABLE  SBI_GEO_MAPS ADD COLUMN HIERARCHY_NAME VARCHAR(100) AFTER FORMAT;
ALTER TABLE  SBI_GEO_MAPS ADD COLUMN LEVEL INTEGER AFTER HIERARCHY_NAME;
ALTER TABLE  SBI_GEO_MAPS ADD COLUMN MEMBER_NAME VARCHAR(100) AFTER LEVEL;

-- 15.6.2016 Antonella: deleted WORSKSHEET engine - clean db from its user func and engines
SET FOREIGN_KEY_CHECKS=0;
DELETE from SBI_USER_FUNC  where name = 'CreateWorksheetFromDatasetUserFunctionality';
DELETE FROM SBI_OBJECTS WHERE ENGINE_ID = (select engine_id from SBI_ENGINES  where name = 'Worksheet Engine');
DELETE from SBI_ENGINES  where name = 'Worksheet Engine';
DELETE from SBI_DOMAINS where value_cd = 'WORKSHEET';
SET FOREIGN_KEY_CHECKS=1;

--15.06-2016 Alessio Conese: add is_persisted_hdfs to SBI_DATA_SET
ALTER TABLE SBI_DATA_SET ADD COLUMN IS_PERSISTED_HDFS TINYINT(1) DEFAULT '0' AFTER IS_PERSISTED;

-- 22.06.2016 Antonella: rename LEVEL column to NUM_LEVEL
ALTER TABLE SBI_GEO_MAPS CHANGE LEVEL NUM_LEVEL INTEGER NULL;

-- 27.06.2016 Francesco Lucchi: grant functionalities ConfigManagement & DomainManagement to superadmin only
DELETE FROM SBI_ROLE_TYPE_USER_FUNC WHERE USER_FUNCT_ID IN (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'ConfigManagement');
DELETE FROM SBI_ROLE_TYPE_USER_FUNC WHERE USER_FUNCT_ID IN (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME = 'DomainManagement');
DELETE FROM SBI_USER_FUNC WHERE NAME = 'ConfigManagement';
DELETE FROM SBI_USER_FUNC WHERE NAME = 'DomainManagement';

-- 05.07.2016 Vincenzo Gambino: add column FILE_MODEL in SBI_META_MODELS_VERSIONS
ALTER TABLE SBI_META_MODELS_VERSIONS CHANGE COLUMN CONTENT CONTENT MEDIUMBLOB NULL;
ALTER TABLE SBI_META_MODELS_VERSIONS ADD COLUMN FILE_MODEL MEDIUMBLOB NULL AFTER NAME;

-- 13.07.2016 Arsenije Djujic: add table SBI_WHATIF_WORKFLOW
CREATE TABLE IF NOT EXISTS  SBI_WHATIF_WORKFLOW(
	ID INT(8),
    MODEL_ID INT(11),
    USER_ID INT(11),
    SEQUENCE INT(8),
    STATE VARCHAR(20),
    NOTES VARCHAR(100),
    INFO VARCHAR(100),
    USER_IN VARCHAR(100),
    USER_UP VARCHAR(100),
    USER_DE VARCHAR(100),
    TIME_IN TIMESTAMP,
    TIME_UP TIMESTAMP,
    TIME_DE TIMESTAMP,
    SBI_VERSION_IN VARCHAR(10),
    SBI_VERSION_UP VARCHAR(10),
    SBI_VERSION_DE VARCHAR(10),
    ORGANIZATION VARCHAR(20),
    PRIMARY KEY (ID),
    FOREIGN KEY (MODEL_ID) REFERENCES SBI_ARTIFACTS(ID),
    FOREIGN KEY (USER_ID) REFERENCES SBI_USER(ID)
);

-- 13.07.2016 Alessandro Piovani: add column ADDITIONAL_INFO in SBI_OBJ_METACONTENT
ALTER TABLE SBI_OBJ_METACONTENTS ADD COLUMN ADDITIONAL_INFO VARCHAR(255) NULL DEFAULT NULL AFTER ORGANIZATION;

-- 14.07.2016 Alessandro Piovani: added some columns an constraints to SBI_CATALOG_FUNCTIONS table
ALTER TABLE SBI_CATALOG_FUNCTION
ADD COLUMN OWNER 	VARCHAR(50) NOT NULL AFTER ORGANIZATION,
ADD COLUMN KEYWORDS VARCHAR(255) NULL DEFAULT NULL AFTER OWNER;

ALTER TABLE SBI_CATALOG_FUNCTION
ADD COLUMN LABEL VARCHAR(50) NOT NULL AFTER KEYWORDS;

ALTER TABLE SBI_CATALOG_FUNCTION
ADD CONSTRAINT UNIQUE_LABEL_ORG UNIQUE (LABEL,ORGANIZATION);

ALTER TABLE SBI_CATALOG_FUNCTION
ADD COLUMN TYPE VARCHAR(50) NULL DEFAULT NULL AFTER LABEL;


-- 15.07.2016 Francesco Lucchi
ALTER TABLE SBI_OBJECTS ADD CONSTRAINT FK_SBI_OBJECTS_5 FOREIGN KEY (ENGINE_ID) REFERENCES SBI_ENGINES (ENGINE_ID) ON DELETE RESTRICT;

-- 18.07.2016 Alessio Conese: remove column IS_PUBLIC from SBI_DATA_SET
ALTER TABLE SBI_DATA_SET DROP IS_PUBLIC;

-- 09.08.2016 Alberto Ghedin: refactoring whatif start actions
update SBI_ENGINES set MAIN_URL="/knowagewhatifengine/restful-services/olap/startolap" where label = "knowageolapengine";
update SBI_ENGINES set MAIN_URL="/knowagewhatifengine/restful-services/olap/startwhatif" where label = "knowagewhatifengine";

-- 31.08.2016 Marco Cortella: changed foreign keys (delete policy) used by Business Model Catalog and Metadata import
ALTER TABLE SBI_META_TABLE_BC
	DROP FOREIGN KEY FK_SBI_META_TABLE_BC_2;
ALTER TABLE SBI_META_TABLE_BC
	ADD CONSTRAINT FK_SBI_META_TABLE_BC_2 FOREIGN KEY (BC_ID) REFERENCES SBI_META_BC (BC_ID) ON DELETE CASCADE;

ALTER TABLE SBI_META_BC
	DROP FOREIGN KEY FK_SBI_META_BC_1;
ALTER TABLE SBI_META_BC
	ADD CONSTRAINT FK_SBI_META_BC_1 FOREIGN KEY (MODEL_ID) REFERENCES SBI_META_MODELS (ID) ON DELETE CASCADE;

ALTER TABLE SBI_META_BC_ATTRIBUTE
	DROP FOREIGN KEY FK_SBI_META_BC_ATTRIBUTE_1;
ALTER TABLE SBI_META_BC_ATTRIBUTE
	ADD CONSTRAINT FK_SBI_META_BC_ATTRIBUTE_1 FOREIGN KEY (BC_ID) REFERENCES SBI_META_BC (BC_ID) ON DELETE CASCADE;

ALTER TABLE SBI_META_BC_ATTRIBUTE
	DROP FOREIGN KEY FK_SBI_META_BC_ATTRIBUTE_2;
ALTER TABLE SBI_META_BC_ATTRIBUTE
	ADD CONSTRAINT FK_SBI_META_BC_ATTRIBUTE_2 FOREIGN KEY (COLUMN_ID) REFERENCES SBI_META_TABLE_COLUMN (COLUMN_ID) ON DELETE CASCADE;

ALTER TABLE SBI_META_DS_BC
	DROP FOREIGN KEY FK_SBI_META_DS_BC_2;
ALTER TABLE SBI_META_DS_BC
	ADD CONSTRAINT FK_SBI_META_DS_BC_2 FOREIGN KEY (BC_ID) REFERENCES SBI_META_BC (BC_ID) ON DELETE CASCADE;

-- 06.09.2016 Chiara Capobianco: add unique name in sbi_kpi_kpi
ALTER TABLE  SBI_KPI_KPI ADD UNIQUE (NAME, VERSION, ORGANIZATION);

-- 14.09.2016 Alessandro Piovani: add url, remote columns to SBI_CATALOG_FUNCTIONS and make SCRIPT field nullable
ALTER TABLE SBI_CATALOG_FUNCTION ADD COLUMN REMOTE TINYINT(1) DEFAULT 0;
ALTER TABLE SBI_CATALOG_FUNCTION ADD COLUMN URL VARCHAR(100);
ALTER TABLE SBI_CATALOG_FUNCTION CHANGE COLUMN SCRIPT SCRIPT TEXT NULL;

-- 29.09.2016 Alessandro Piovani: add SBI_FUNCTION_INPUT_FILE table
CREATE TABLE SBI_FUNCTION_INPUT_FILE (
	FUNCTION_ID INTEGER(11) NOT NULL,
	FILE_NAME VARCHAR(100) 	NOT NULL,
	FILE_CONTENT MEDIUMBLOB  DEFAULT NULL,
	ALIAS VARCHAR(45)		DEFAULT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
  	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
  	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
  	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
  	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
  	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
  	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
  	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
  	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,
PRIMARY KEY (FUNCTION_ID, FILE_NAME)
  ) ENGINE=InnoDB;

ALTER TABLE SBI_FUNCTION_INPUT_FILE ADD CONSTRAINT FK_FUNCTION_INPUT_FILES_2 FOREIGN KEY (FUNCTION_ID) REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;
ALTER TABLE SBI_CATALOG_FUNCTION CHANGE COLUMN LANGUAGE LANGUAGE VARCHAR(100) NULL;

-- 14.10.2016 S.Lupo: fixed numeric precision of threshold value
ALTER TABLE SBI_KPI_THRESHOLD_VALUE CHANGE COLUMN MIN_VALUE DOUBLE NULL DEFAULT NULL;
ALTER TABLE SBI_KPI_THRESHOLD_VALUE CHANGE COLUMN MAX_VALUE DOUBLE NULL DEFAULT NULL;

-- Alberto Ghedin: previous 2 lines does not work for me.. I'm using these:
-- ALTER TABLE SBI_KPI_THRESHOLD_VALUE MODIFY  MIN_VALUE  DOUBLE NULL DEFAULT NULL;
-- ALTER TABLE SBI_KPI_THRESHOLD_VALUE MODIFY  MAX_VALUE DOUBLE  NULL DEFAULT NULL;

-- 7.11.2016 Giulio Gavardi
ALTER TABLE SBI_OUTPUT_PARAMETER ADD COLUMN IS_USER_DEFINED BOOLEAN NULL DEFAULT FALSE;

-- Alessandro Piovani
CREATE TABLE SBI_FUNCTION_INPUT_FILE (
	FUNCTION_ID INTEGER(11)	NOT NULL,
	FILE_NAME VARCHAR(100)	NOT NULL,
	FILE_CONTENT MEDIUMBLOB	DEFAULT NULL,
	ALIAS VARCHAR(45)		DEFAULT NULL,
	USER_IN 				VARCHAR(100) NOT NULL,
  	USER_UP 				VARCHAR(100) NULL DEFAULT NULL,
  	USER_DE 				VARCHAR(100) NULL DEFAULT NULL,
  	TIME_IN 				TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  	TIME_UP 				TIMESTAMP NULL DEFAULT NULL,
  	TIME_DE 				TIMESTAMP NULL DEFAULT NULL,
  	SBI_VERSION_IN 			VARCHAR(10) NULL DEFAULT NULL,
  	SBI_VERSION_UP 			VARCHAR(10) NULL DEFAULT NULL,
  	SBI_VERSION_DE 			VARCHAR(10) NULL DEFAULT NULL,
  	ORGANIZATION 			VARCHAR(20) NULL DEFAULT NULL,
	PRIMARY KEY (FUNCTION_ID, FILE_NAME)
) ENGINE=InnoDB;

ALTER TABLE SBI_FUNCTION_INPUT_FILE ADD CONSTRAINT FK_FUNCTION_INPUT_FILES_2 FOREIGN KEY (FUNCTION_ID) REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;

--30.11.2016 Ana Tomic
--create accessibility preferences table

CREATE TABLE SBI_ACCESSIBILITY_PREFERENCES (
	 ID INT(11) UNSIGNED NOT NULL,
	 USER_ID INT(11) NOT NULL,
	 ENABLE_UIO TINYINT(1) NOT NULL,
	 ENABLE_RROBOBRAILLE TINYINT(1) NULL DEFAULT NULL,
	 ENABLE_GRAPH_SONIFICATION TINYINT(1) NULL DEFAULT NULL,
	 ENABLE_VOICE TINYINT(1) NULL DEFAULT NULL,
	 PREFERENCES TEXT NULL,
	 USER_IN VARCHAR(100) NULL DEFAULT NULL,
	 USER_UP VARCHAR(100) NULL DEFAULT NULL,
	 USER_DE VARCHAR(100) NULL DEFAULT NULL,
	 TIME_IN TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
	 TIME_UP TIMESTAMP NULL ,
	 TIME_DE TIMESTAMP NULL ,
	 SBI_VERSION_IN VARCHAR(10) NULL DEFAULT NULL,
	 SBI_VERSION_UP VARCHAR(10) NULL DEFAULT NULL,
	 SBI_VERSION_DE VARCHAR(10) NULL DEFAULT NULL,
	 ORGANIZATION VARCHAR(20) NULL DEFAULT NULL,
	 PRIMARY KEY (ID)
) ENGINE=InnoDB;

-- 10.02.2017 ALberto Ghedin
-- added columns that link a snapshot with schedulation

ALTER TABLE SBI_SNAPSHOTS ADD COLUMN SCHEDULATION VARCHAR(100);
ALTER TABLE SBI_SNAPSHOTS ADD COLUMN SCHEDULER VARCHAR(100);
ALTER TABLE SBI_SNAPSHOTS ADD COLUMN SCHEDULATION_START INT(11);
ALTER TABLE SBI_SNAPSHOTS ADD COLUMN SEQUENCE INT(11);

-- 22.02.2017
-- added uniquiness constraint for kpi target

ALTER TABLE SBI_KPI_TARGET ADD CONSTRAINT XAK1SBI_KPI_TARGET UNIQUE (
	NAME,
	ORGANIZATION
);

-- 02.03.2017 Dragan Pirkovic
-- changed path for chart document execution

UPDATE `knowage`.`sbi_engines` SET `MAIN_URL`='/knowagecockpitengine/api/1.0/chart/pages/execute' WHERE `NAME`='Chart Engine';

-- 20.03.2017 Marco Cortella
-- added TYPE column for SBI_CROSS_NAVIGATION
	ALTER TABLE SBI_CROSS_NAVIGATION
	ADD COLUMN TYPE INT(10) NOT NULL AFTER NAME;

-- 09.06.2017 Alessandro Portosa
-- changed package for Alert actions
UPDATE SBI_ALERT_ACTION SET CLASS_NAME='it.eng.knowage.enterprise.tools.alert.action.ExecuteETLDocument' WHERE NAME = 'Execute ETL Document';
UPDATE SBI_ALERT_ACTION SET CLASS_NAME='it.eng.knowage.enterprise.tools.alert.action.SendMail' WHERE NAME = 'Send mail';

-- 13.07.2017 Francesco Lucchi
-- fix definition length, limiting varchars to 4000 (Oracle upper bound)
ALTER TABLE SBI_KPI_KPI CHANGE COLUMN DEFINITION DEFINITION VARCHAR(4000) NOT NULL;
ALTER TABLE SBI_KPI_RULE CHANGE COLUMN DEFINITION DEFINITION VARCHAR(4000) NOT NULL;
ALTER TABLE SBI_KPI_VALUE CHANGE COLUMN LOGICAL_KEY LOGICAL_KEY VARCHAR(4000) NOT NULL;

-- 28.09.2017 Dragan Pirkovic
-- adding foreign key from sbi.metamodel.DATA_SOURCE_ID to sbi_data_source.DS_ID
ALTER TABLE `sbi_meta_models` ADD CONSTRAINT `FK_META_MODELS_DS_ID` FOREIGN KEY (`DATA_SOURCE_ID`) REFERENCES `sbi_data_source` (`DS_ID`) ON DELETE NO ACTION ON UPDATE NO ACTION;

-- 05.10.2015 Alberto Ghedin removed mobile. The engine is not deleted because there can be some chart document in installation
delete from SBI_PRODUCT_TYPE_ENGINE where ENGINE_ID in(select ENGINE_ID from SBI_ENGINES where NAME='Mobile Chart Engine');
delete from SBI_PRODUCT_TYPE_ENGINE where ENGINE_ID in(select ENGINE_ID from SBI_ENGINES where NAME='Mobile Cockpit Engine');
delete from SBI_PRODUCT_TYPE_ENGINE where ENGINE_ID in(select ENGINE_ID from SBI_ENGINES where NAME='Mobile Report Engine');
delete from SBI_ENGINES where NAME='Mobile Chart Engine';
delete from SBI_ENGINES where NAME='Mobile Cockpit Engine';
delete from SBI_ENGINES where NAME='Mobile Report Engine';
delete from SBI_DOMAINS where VALUE_CD='MOBILE_CHART';
delete from SBI_DOMAINS where VALUE_CD='MOBILE_COCKPIT';
delete from SBI_DOMAINS where VALUE_CD='MOBILE_REPORT';
commit;


-- 11.10.2015 Alberto Ghedin added dossier
CREATE TABLE IF NOT EXISTS  SBI_DOSSIER_ACTIVITY(
		ID 					INTEGER NOT NULL,
		PROGRESS 			INTEGER NOT NULL,
		PPT					LONGBLOB,
	    DOCUMENT_ID 		INTEGER,
	    ACTIVITY 			VARCHAR(45) NOT NULL,
	    PARAMS 				VARCHAR(4000),
	    USER_IN 			VARCHAR(100),
	    USER_UP 			VARCHAR(100),
	    USER_DE 			VARCHAR(100),
	    TIME_IN 			TIMESTAMP,
	    TIME_UP 			TIMESTAMP,
	    TIME_DE 			TIMESTAMP,
	    SBI_VERSION_IN 		VARCHAR(10),
	    SBI_VERSION_UP 		VARCHAR(10),
	    SBI_VERSION_DE 		VARCHAR(10),
	    ORGANIZATION 		VARCHAR(20),
	    PRIMARY KEY (ID)
);

ALTER TABLE SBI_DOSSIER_ACTIVITY ADD CONSTRAINT FK_SBI_PROGRESS_THREAD	FOREIGN KEY (PROGRESS) 	REFERENCES SBI_PROGRESS_THREAD(PROGRESS_THREAD_ID)			ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE SBI_DOSSIER_ACTIVITY ADD CONSTRAINT FK_SBI_OBJECTS FOREIGN KEY  (DOCUMENT_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID) ON DELETE CASCADE ON UPDATE CASCADE;

-- 11.10.2017 Giulio Gavardi
-- set user role that exists in knowage as default for signup
UPDATE SBI_CONFIG set VALUE_CHECK = 'user' where LABEL = 'SPAGOBI.SECURITY.DEFAULT_ROLE_ON_SIGNUP'

--- 24.11.2017 Marco Cortella added Date type in domains for file dataset support
INSERT into SBI_DOMAINS (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM,VALUE_DS, USER_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'Date', 'Date', 'DS_META_VALUE', 'Dataset Metadata Value', 'Dataset Metadata Value', '');
UPDATE hibernate_sequences SET next_val = (SELECT MAX(VALUE_ID) + 1 FROM SBI_DOMAINS) WHERE sequence_name = 'SBI_DOMAINS';

--- 01.12.2017 Alberto Ghedin added Solr dataset in domains
INSERT into SBI_DOMAINS (VALUE_ID, VALUE_CD, VALUE_NM, DOMAIN_CD, DOMAIN_NM,VALUE_DS, USER_IN) values ((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_DOMAINS'), 'Solr', 'SbiSolrDataSet', 'DATA_SET_TYPE', 'Data Set Type', 'SbiSolrDataSet', '');
UPDATE hibernate_sequences SET next_val = (SELECT MAX(VALUE_ID) + 1 FROM SBI_DOMAINS) WHERE sequence_name = 'SBI_DOMAINS';


-- 19.02.2018 Giulio Gavardi
-- new signup default tenant configuration

INSERT INTO SBI_CONFIG (ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, USER_IN, USER_UP, TIME_IN, TIME_UP, SBI_VERSION_IN, SBI_VERSION_UP, ORGANIZATION, CATEGORY)
VALUES
(
(select next_val +1 from hibernate_sequences where sequence_name = 'SBI_CONFIG'),
'SPAGOBI.SECURITY.DEFAULT_TENANT_ON_SIGNUP',
'Default tenant on signup',
'Default tenant on signup',
'1',
'DEFAULT_TENANT',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'STRING' AND DOMAIN_CD = 'PAR_TYPE'),
'server', 'biadmin', current_timestamp, current_timestamp, '6.1', '6.1', 'DEFAULT_TENANT', 'SECURITY');

update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit



-- 13.03.2018 Giulio Gavardi
-- new column for roles , is_public

ALTER TABLE SBI_EXT_ROLES ADD COLUMN IS_PUBLIC BOOLEAN NULL;


-- 05.04.2018 Giulio Gavardi
-- COnfig to store custom database functions definition


insert into SBI_CONFIG (
			ID,
            LABEL,
            NAME,
            DESCRIPTION,
            IS_ACTIVE,
            VALUE_CHECK,
            VALUE_TYPE_ID,
            USER_IN,
            USER_UP,
            TIME_IN,
            TIME_UP,
            SBI_VERSION_IN,
            SBI_VERSION_UP,
            ORGANIZATION,
            CATEGORY)
values (
(select next_val +1 from hibernate_sequences where sequence_name = 'SBI_CONFIG'),
'KNOWAGE.CUSTOMIZED_DATABASE_FUNCTIONS',
'Customized database functions',
'List of customized functions for DB',
'1',
'{ "mysql":[ { "function":"TEST", "code":"TEST_CODE", "parameters":[ { "name":"TEST_PAR", "type":"String" } ] } ] }',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'STRING' AND DOMAIN_CD = 'PAR_TYPE'),
'biadmin',
'biadmin',
current_timestamp,
current_timestamp,
'6.2.0',
'6.2.0',
null,
'GENERIC_CONFIGURATION'
);

update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit


-- 27.04.2018. Predrag Josipovic
-- Added new column into knowage.SBI_DATA_SOURCE table for Advanced JDBC Pool Configuration

ALTER TABLE SBI_DATA_SOURCE ADD COLUMN JDBC_ADVANCED_CONFIGURATION VARCHAR(4000) AFTER WRITE_DEFAULT;


-- 29.05.2018. Predrag Josipovic
-- Modifications on Knowage Metadata table SBI_I18N_MESSAGES, added new column ID as Primary Key

--- START ---
RENAME TABLE SBI_I18N_MESSAGES TO SBI_I18N_MESSAGES_OLD;

CREATE TABLE SBI_I18N_MESSAGES (ID INT) AS
SELECT (@ROW := @ROW + 1) AS ID, T.*
FROM SBI_I18N_MESSAGES_OLD T, (SELECT @ROW := 0) R;

DROP TABLE SBI_I18N_MESSAGES_OLD;

ALTER TABLE SBI_I18N_MESSAGES ADD CONSTRAINT PK_SBI_I18N_MESSAGES PRIMARY KEY (ID);
ALTER TABLE SBI_I18N_MESSAGES ADD CONSTRAINT FK_SBI_I18N_MESSAGES FOREIGN KEY (LANGUAGE_CD) REFERENCES SBI_DOMAINS (VALUE_ID);
ALTER TABLE SBI_I18N_MESSAGES ADD UNIQUE SBI_I18N_MESSAGES_UNIQUE(LANGUAGE_CD, LABEL, ORGANIZATION);

INSERT INTO hibernate_sequences VALUES ('SBI_I18N_MESSAGES',
                                                            (SELECT COALESCE(MAX(m.ID) + 1, 1) FROM SBI_I18N_MESSAGES m));
COMMIT;
--- END ---

-- 29.05.2018 Francesco Lucchi
ALTER TABLE SBI_DATA_SET ADD UNIQUE XAK2SBI_DATA_SET (NAME, VERSION_NUM, ORGANIZATION);

-- 01.06.2018 Giulio Gavardi

INSERT INTO SBI_CONFIG ( ID, LABEL, NAME, DESCRIPTION, IS_ACTIVE, VALUE_CHECK, VALUE_TYPE_ID, CATEGORY, USER_IN, TIME_IN) VALUES
((SELECT next_val FROM hibernate_sequences WHERE sequence_name = 'SBI_CONFIG'),
'KNOWAGE.WORKSPACE_SHOW_GRID', 'Show grid view as default in workspace', 'Show grid view as default in workspace', true, 'true',
(select VALUE_ID from SBI_DOMAINS where VALUE_CD = 'STRING' AND DOMAIN_CD = 'PAR_TYPE'), 'GENERIC_CONFIGURATION', 'biadmin', current_timestamp);
update hibernate_sequences set next_val = next_val+1 where sequence_name = 'SBI_CONFIG';
commit;

-- 06.06.2018 Filip Milosavljevic
--- START ---
ALTER TABLE SBI_ATTRIBUTE ADD COLUMN  LOV_ID INTEGER NULL AFTER ATTRIBUTE_ID,
						  ADD COLUMN  ALLOW_USER SMALLINT(6) DEFAULT '1' AFTER LOV_ID,
						  ADD COLUMN  MULTIVALUE SMALLINT(6) DEFAULT '0' AFTER ALLOW_USER,
						  ADD COLUMN  SYNTAX SMALLINT(6) NULL AFTER MULTIVALUE,
						  ADD COLUMN  VALUE_TYPE_ID INTEGER NULL AFTER SYNTAX,
						  ADD COLUMN  VALUE_TYPE_CD VARCHAR(20) AFTER VALUE_TYPE_ID,
						  ADD COLUMN  VALUE_TYPE ENUM ('STRING','DATE','NUM') AFTER VALUE_TYPE_CD;
ALTER TABLE SBI_ATTRIBUTE ADD CONSTRAINT FK_LOV FOREIGN KEY (LOV_ID) REFERENCES SBI_LOV(LOV_ID) ON DELETE RESTRICT;

ALTER TABLE `SBI_ATTRIBUTE` CHANGE COLUMN `DESCRIPTION` `DESCRIPTION` VARCHAR(500) NULL;
COMMIT;
-- 07.06.2018 Antonella Giachino
DELETE FROM SBI_PRODUCT_TYPE_ENGINE WHERE ENGINE_ID = (
    SELECT ENGINE_ID FROM SBI_ENGINES WHERE BIOBJ_TYPE = (
        SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'ACCESSIBLE_HTML'
    )
);

DELETE FROM SBI_ENGINES WHERE BIOBJ_TYPE = (
    SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'ACCESSIBLE_HTML'
);

DELETE FROM SBI_DOMAINS WHERE DOMAIN_CD = 'BIOBJ_TYPE' AND VALUE_CD = 'ACCESSIBLE_HTML';
COMMIT;

--Davide Zerbetto
ALTER TABLE SBI_EVENTS_LOG ADD COLUMN EVENT_TYPE VARCHAR(50) DEFAULT 'SCHEDULER' NOT NULL;

UPDATE SBI_EVENTS_LOG SET EVENT_TYPE = (
CASE HANDLER
	WHEN 'it.eng.spagobi.events.handlers.DefaultEventPresentationHandler' THEN 'SCHEDULER'
	WHEN 'it.eng.spagobi.events.handlers.CommonjEventPresentationHandler' THEN 'COMMONJ'
	WHEN 'it.eng.spagobi.events.handlers.TalendEventPresentationHandler' THEN 'ETL'
	WHEN 'it.eng.spagobi.events.handlers.WekaEventPresentationHandler' THEN 'DATA_MINING'
END
);
commit;

ALTER TABLE SBI_EVENTS_LOG DROP COLUMN HANDLER;

-- 21.06.2018: Antonella Giachino
ALTER TABLE SBI_OUTPUT_PARAMETER MODIFY COLUMN FORMAT_VALUE varchar(30);

-- 04.07.2018: Filip Milosavljevic--

CREATE TABLE SBI_METAMODEL_PAR (
       METAMODEL_PAR_ID           INTEGER NOT NULL ,
       PAR_ID               INTEGER NOT NULL,
       METAMODEL_ID             INTEGER NOT NULL,
       LABEL                VARCHAR(40) NOT NULL,
       REQ_FL               SMALLINT NULL,
       MOD_FL               SMALLINT NULL,
       VIEW_FL              SMALLINT NULL,
       MULT_FL              SMALLINT NULL,
       PROG                 INTEGER NOT NULL,
       PARURL_NM            VARCHAR(20) NULL,
       PRIORITY             INTEGER NULL,
       COL_SPAN             INTEGER NULL DEFAULT 1,
       THICK_PERC           INTEGER NULL DEFAULT 0,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
       PRIMARY KEY (METAMODEL_PAR_ID)
) ENGINE=InnoDB;
ALTER TABLE SBI_METAMODEL_PAR 					ADD CONSTRAINT FK_METAMODEL_PAR_1 					FOREIGN KEY (METAMODEL_ID) 				REFERENCES SBI_META_MODELS (ID) 	ON DELETE RESTRICT;
ALTER TABLE SBI_METAMODEL_PAR 					ADD CONSTRAINT FK_METAMODEL_PAR_2 					FOREIGN KEY (PAR_ID) 				REFERENCES SBI_PARAMETERS (PAR_ID) 		ON DELETE RESTRICT;


CREATE TABLE SBI_METAMODEL_PARUSE (
		PARUSE_ID			INTEGER NOT NULL,
		METAMODEL_PAR_ID         INTEGER NOT NULL,
		USE_ID              INTEGER NOT NULL,
		METAMODEL_PAR_FATHER_ID   INTEGER NOT NULL,
		FILTER_OPERATION    VARCHAR(20) NOT NULL,
		PROG 				INTEGER NOT NULL,
		FILTER_COLUMN       VARCHAR(30) NOT NULL,
		PRE_CONDITION 		VARCHAR(10),
	    POST_CONDITION 		VARCHAR(10),
	    LOGIC_OPERATOR 		VARCHAR(10),
        USER_IN             VARCHAR(100) NOT NULL,
        USER_UP             VARCHAR(100),
        USER_DE             VARCHAR(100),
        TIME_IN             TIMESTAMP NOT NULL,
        TIME_UP             TIMESTAMP NULL DEFAULT NULL,
        TIME_DE             TIMESTAMP NULL DEFAULT NULL,
        SBI_VERSION_IN      VARCHAR(10),
        SBI_VERSION_UP      VARCHAR(10),
        SBI_VERSION_DE      VARCHAR(10),
        META_VERSION        VARCHAR(100),
        ORGANIZATION        VARCHAR(20),
	    PRIMARY KEY(PARUSE_ID)
) ENGINE=InnoDB;

ALTER TABLE SBI_METAMODEL_PARUSE					ADD CONSTRAINT FK_SBI_METAMODEL_PARUSE_1 					FOREIGN KEY (METAMODEL_PAR_ID) 			REFERENCES SBI_METAMODEL_PAR (METAMODEL_PAR_ID) 	ON DELETE RESTRICT;
ALTER TABLE SBI_METAMODEL_PARUSE 					ADD CONSTRAINT FK_SBI_METAMODEL_PARUSE_2 					FOREIGN KEY (USE_ID) 				REFERENCES SBI_PARUSE (USE_ID) 			ON DELETE RESTRICT;
ALTER TABLE SBI_METAMODEL_PARUSE 					ADD CONSTRAINT FK_SBI_METAMODEL_PARUSE_3 					FOREIGN KEY (METAMODEL_PAR_FATHER_ID)		REFERENCES SBI_METAMODEL_PAR (METAMODEL_PAR_ID) 	ON DELETE RESTRICT;


CREATE TABLE SBI_METAMODEL_PARVIEW (
	PARVIEW_ID INTEGER NOT NULL,
    METAMODEL_PAR_ID INTEGER NOT NULL,
    METAMODEL_PAR_FATHER_ID  INTEGER NOT NULL,
    OPERATION  VARCHAR(20) NOT NULL,
    COMPARE_VALUE  VARCHAR(200) NOT NULL,
    VIEW_LABEL  VARCHAR(50),
    PROG INTEGER,
       USER_IN              VARCHAR(100) NOT NULL,
       USER_UP              VARCHAR(100),
       USER_DE              VARCHAR(100),
       TIME_IN              TIMESTAMP NOT NULL,
       TIME_UP              TIMESTAMP NULL DEFAULT NULL,
       TIME_DE              TIMESTAMP NULL DEFAULT NULL,
       SBI_VERSION_IN       VARCHAR(10),
       SBI_VERSION_UP       VARCHAR(10),
       SBI_VERSION_DE       VARCHAR(10),
       META_VERSION         VARCHAR(100),
       ORGANIZATION         VARCHAR(20),
  PRIMARY KEY (PARVIEW_ID)
) ENGINE=InnoDB;

ALTER TABLE SBI_METAMODEL_PARVIEW 				ADD CONSTRAINT FK_SBI_METAMODEL_PARVIEW_1 				FOREIGN KEY (METAMODEL_PAR_ID) 			REFERENCES SBI_METAMODEL_PAR (METAMODEL_PAR_ID) 	ON DELETE RESTRICT;
ALTER TABLE SBI_METAMODEL_PARVIEW 				ADD CONSTRAINT FK_SBI_METAMODEL_PARVIEW_2 				FOREIGN KEY (METAMODEL_PAR_FATHER_ID)		REFERENCES SBI_METAMODEL_PAR (METAMODEL_PAR_ID) 	ON DELETE RESTRICT;

--end--

--Filip Milosavljevic 09.07.2018---

ALTER TABLE `SBI_METAMODEL_PAR`
CHANGE COLUMN `REQ_FL` `REQ_FL` SMALLINT(6) NULL DEFAULT '0' ,
CHANGE COLUMN `MOD_FL` `MOD_FL` SMALLINT(6) NULL DEFAULT '0' ,
CHANGE COLUMN `VIEW_FL` `VIEW_FL` SMALLINT(6) NULL DEFAULT '1' ,
CHANGE COLUMN `MULT_FL` `MULT_FL` SMALLINT(6) NULL DEFAULT '0' ;

ALTER TABLE `SBI_OBJ_PAR`
CHANGE COLUMN `REQ_FL` `REQ_FL` SMALLINT(6) NULL DEFAULT '0' ,
CHANGE COLUMN `MOD_FL` `MOD_FL` SMALLINT(6) NULL DEFAULT '0' ,
CHANGE COLUMN `VIEW_FL` `VIEW_FL` SMALLINT(6) NULL DEFAULT '1' ,
CHANGE COLUMN `MULT_FL` `MULT_FL` SMALLINT(6) NULL DEFAULT '0' ;

--end--

--Dragan Pirkovic 09.07.2018---

ALTER TABLE `SBI_FEDERATION_DEFINITION`
ADD COLUMN `OWNER` VARCHAR(100) NULL AFTER `DEGENERATED`;


--end--

-- 11.07.2018. Predrag Josipovic
-- STATEMENT START
DELETE FROM SBI_EXPORTERS WHERE ENGINE_ID IN (SELECT ENGINE_ID FROM SBI_ENGINES WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.qbe.QbeDriver')
AND
DOMAIN_ID IN (SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'EXPORT_TYPE' AND VALUE_CD IN ('PDF', 'RTF', 'JRXML', 'JSON'));

UPDATE SBI_EXPORTERS SET DEFAULT_VALUE = 1 WHERE ENGINE_ID IN (SELECT ENGINE_ID FROM SBI_ENGINES WHERE DRIVER_NM = 'it.eng.spagobi.engines.drivers.qbe.QbeDriver')
AND
DOMAIN_ID IN (SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'EXPORT_TYPE' AND VALUE_CD = 'XLS');

commit;
-- STATEMENT END


-- 13.07.2018. Predrag Josipovic
-- STATEMENT START
ALTER TABLE SBI_DATA_SOURCE DROP INDEX XAK1SBI_DATA_SOURCE;

ALTER TABLE SBI_DATA_SOURCE ADD CONSTRAINT XAK1SBI_DATA_SOURCE UNIQUE (LABEL);
-- STATEMENT END


-- 13.07.2018. Predrag Josipovic
-- STATEMENT START
ALTER TABLE SBI_DATA_SOURCE DROP INDEX XAK1SBI_DATA_SOURCE;

ALTER TABLE SBI_DATA_SOURCE ADD CONSTRAINT XAK1SBI_DATA_SOURCE UNIQUE (LABEL);
-- STATEMENT END


---Milosavljevic Filip 06.09.2018
---BEGIN---
RENAME TABLE SBI_OBJ_PARUSE TO SBI_OBJ_PARUSE_OLD;
CREATE TABLE SBI_OBJ_PARUSE (PARUSE_ID INT) AS
SELECT (@ROW := @ROW +1) AS PARUSE_ID, OLDTABLE.*
FROM SBI_OBJ_PARUSE_OLD OLDTABLE,(SELECT @ROW := 0) R;

DROP TABLE SBI_OBJ_PARUSE_OLD;

ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT PK_SBI_OBJ_PARUSE PRIMARY KEY(PARUSE_ID);
ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT FK_SBI_OBJ_PARUSE_1 FOREIGN KEY (OBJ_PAR_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID);
ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT FK_SBI_OBJ_PARUSE_2 FOREIGN KEY (USE_ID) REFERENCES SBI_PARUSE (USE_ID);
ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT FK_SBI_OBJ_PARUSE_3 FOREIGN KEY (OBJ_PAR_FATHER_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID);

INSERT INTO HIBERNATE_SEQUENCES VALUES ('SBI_OBJ_PARUSE',(SELECT COALESCE(MAX(NEWTABLE.PARUSE_ID) + 1,1) FROM SBI_OBJ_PARUSE NEWTABLE));
---END---

---Begin---

RENAME TABLE SBI_OBJ_PARVIEW TO SBI_OBJ_PARVIEW_OLD;
CREATE TABLE SBI_OBJ_PARVIEW (PARVIEW_ID INT) AS
SELECT (@ROW := @ROW +1) AS PARVIEW_ID, OLDTABLE.*
FROM SBI_OBJ_PARVIEW_OLD OLDTABLE,(SELECT @ROW := 0) R;

DROP TABLE SBI_OBJ_PARVIEW_OLD;

ALTER TABLE SBI_OBJ_PARVIEW ADD CONSTRAINT PK_SBI_OBJ_PARVIEW PRIMARY KEY(PARVIEW_ID);
ALTER TABLE SBI_OBJ_PARVIEW ADD CONSTRAINT FK_SBI_OBJ_PARVIEW_1 FOREIGN KEY (OBJ_PAR_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID);
ALTER TABLE SBI_OBJ_PARVIEW ADD CONSTRAINT FK_SBI_OBJ_PARVIEW_2 FOREIGN KEY (OBJ_PAR_FATHER_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID);

INSERT INTO HIBERNATE_SEQUENCES VALUES ('SBI_OBJ_PARVIEW',(SELECT COALESCE(MAX(NEWTABLE.PARVIEW_ID) + 1, 1) FROM SBI_OBJ_PARVIEW NEWTABLE));
---END---

-- 07/09/2018 Antonella Giachino
DELETE FROM SBI_ROLE_TYPE_USER_FUNC WHERE ROLE_TYPE_ID = (SELECT VALUE_ID FROM SBI_DOMAINS WHERE VALUE_CD = 'TEST_ROLE') AND USER_FUNCT_ID IN (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC  WHERE  NAME IN ('TIMESPAN', 'FUNCTIONSCATALOGMANAGEMENT','MANAGECROSSNAVIGATION','EVENTSMANAGEMENT'));
COMMIT;

--19/09/2018 Andrijana Predojevic
RENAME TABLE SBI_OBJ_PARUSE TO SBI_OBJ_PARUSE_OLD;
CREATE TABLE SBI_OBJ_PARUSE (PARUSE_ID INT) AS
SELECT (@ROW := @ROW +1) AS PARUSE_ID, OLDTABLE.*
FROM SBI_OBJ_PARUSE_OLD OLDTABLE,(SELECT @ROW := 0) R;

DROP TABLE SBI_OBJ_PARUSE_OLD;

ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT PK_SBI_OBJ_PARUSE PRIMARY KEY(PARUSE_ID);
ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT FK_SBI_OBJ_PARUSE_1 FOREIGN KEY (OBJ_PAR_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID);
ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT FK_SBI_OBJ_PARUSE_2 FOREIGN KEY (USE_ID) REFERENCES SBI_PARUSE (USE_ID);
ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT FK_SBI_OBJ_PARUSE_3 FOREIGN KEY (OBJ_PAR_FATHER_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID);

INSERT INTO HIBERNATE_SEQUENCES VALUES ('SBI_OBJ_PARUSE',(SELECT COALESCE(MAX(NEWTABLE.PARUSE_ID) + 1,1) FROM SBI_OBJ_PARUSE NEWTABLE));

RENAME TABLE SBI_OBJ_PARVIEW TO SBI_OBJ_PARVIEW_OLD;
CREATE TABLE SBI_OBJ_PARVIEW (PARVIEW_ID INT) AS
SELECT (@ROW := @ROW +1) AS PARVIEW_ID, OLDTABLE.*
FROM SBI_OBJ_PARVIEW_OLD OLDTABLE,(SELECT @ROW := 0) R;

DROP TABLE SBI_OBJ_PARVIEW_OLD;

ALTER TABLE SBI_OBJ_PARVIEW ADD CONSTRAINT PK_SBI_OBJ_PARVIEW PRIMARY KEY(PARVIEW_ID);
ALTER TABLE SBI_OBJ_PARVIEW ADD CONSTRAINT FK_SBI_OBJ_PARVIEW_1 FOREIGN KEY (OBJ_PAR_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID);
ALTER TABLE SBI_OBJ_PARVIEW ADD CONSTRAINT FK_SBI_OBJ_PARVIEW_2 FOREIGN KEY (OBJ_PAR_FATHER_ID) REFERENCES SBI_OBJ_PAR (OBJ_PAR_ID);

INSERT INTO HIBERNATE_SEQUENCES VALUES ('SBI_OBJ_PARVIEW',(SELECT COALESCE(MAX(NEWTABLE.PARVIEW_ID) + 1, 1) FROM SBI_OBJ_PARVIEW NEWTABLE));

-- 14/12/2018 Davide Zerbetto
ALTER TABLE SBI_OBJECT_TEMPLATES MODIFY COLUMN NAME VARCHAR(1000);

-- 16/01/2019 Antonella Giachino
ALTER TABLE SBI_CROSS_NAVIGATION ADD COLUMN DESCRIPTION VARCHAR(200) NULL DEFAULT NULL,
								 ADD COLUMN BREADCRUMB VARCHAR(200) NULL DEFAULT NULL;


--18/1/2019 Andrijana Predojevic--

CREATE TABLE SBI_METAMODEL_VIEWPOINTS (
  	VP_ID              INTEGER NOT NULL,
  	METAMODEL_ID       INTEGER NOT NULL,
  	VP_NAME            VARCHAR(40) NOT NULL,
  	VP_OWNER           VARCHAR(40) DEFAULT NULL,
  	VP_DESC            VARCHAR(160) DEFAULT NULL,
  	VP_SCOPE           VARCHAR(20) NOT NULL,
  	VP_VALUE_PARAMS    TEXT,
  	VP_CREATION_DATE   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  	USER_IN            VARCHAR(100) NOT NULL,
  	USER_UP            VARCHAR(100) DEFAULT NULL,
  	USER_DE            VARCHAR(100) DEFAULT NULL,
  	TIME_IN            TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  	TIME_UP            TIMESTAMP NULL DEFAULT NULL,
  	TIME_DE            TIMESTAMP NULL DEFAULT NULL,
  	SBI_VERSION_IN     VARCHAR(10) DEFAULT NULL,
  	SBI_VERSION_UP     VARCHAR(10) DEFAULT NULL,
  	SBI_VERSION_DE     VARCHAR(10) DEFAULT NULL,
  	META_VERSION       VARCHAR(100) DEFAULT NULL,
  	ORGANIZATION       VARCHAR(20) DEFAULT NULL,
  PRIMARY KEY (`VP_ID`)
) ENGINE=InnoDB;

ALTER TABLE SBI_METAMODEL_VIEWPOINTS        ADD CONSTRAINT `FK_SBI_METAMODEL_VIEWPOINTS_1`            FOREIGN KEY (`METAMODEL_ID`)            REFERENCES SBI_META_MODELS (`ID`)

--end--

-- 11.02.2019 Marko Kostic --

CREATE TABLE SBI_NEWS (
  ID int(11) NOT NULL,
  NAME varchar(200) DEFAULT NULL,
  DESCRIPTION varchar(400) DEFAULT NULL,
  ACTIVE tinyint(4) DEFAULT 1,
  NEWS varchar(4000) DEFAULT NULL,
  MANUAL tinyint(4) DEFAULT 1,
  EXPIRATION_DATE timestamp NULL DEFAULT NULL,
  USER_IN varchar(100) NOT NULL,
  USER_UP varchar(100) DEFAULT NULL,
  USER_DE varchar(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  TIME_UP timestamp NULL DEFAULT NULL,
  TIME_DE timestamp NULL DEFAULT NULL,
  SBI_VERSION_IN varchar(10) DEFAULT NULL,
  SBI_VERSION_UP varchar(10) DEFAULT NULL,
  SBI_VERSION_DE varchar(10) DEFAULT NULL,
  META_VERSION varchar(100) DEFAULT NULL,
  ORGANIZATION varchar(20) DEFAULT NULL,
  CATEGORY_ID int(11) DEFAULT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT FK_SBI_DOMAINS_VALUE_ID FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_DOMAINS (VALUE_ID) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB;

CREATE TABLE SBI_NEWS_READ (
  ID int(11) NOT NULL,
  USER_ID varchar(100) NOT NULL,
  NEWS_ID int(11) NOT NULL,
  USER_IN varchar(100) NOT NULL,
  USER_UP varchar(100) DEFAULT NULL,
  USER_DE varchar(100) DEFAULT NULL,
  TIME_IN timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  TIME_UP timestamp NULL DEFAULT NULL,
  TIME_DE timestamp NULL DEFAULT NULL,
  SBI_VERSION_IN varchar(10) DEFAULT NULL,
  SBI_VERSION_UP varchar(10) DEFAULT NULL,
  SBI_VERSION_DE varchar(10) DEFAULT NULL,
  META_VERSION varchar(100) DEFAULT NULL,
  ORGANIZATION varchar(20) DEFAULT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT FK_SBI_NEWS_NEWS_ID FOREIGN KEY (NEWS_ID) REFERENCES SBI_NEWS (ID) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB;


CREATE TABLE SBI_NEWS_ROLES (
  NEWS_ID int(11) NOT NULL,
  EXT_ROLE_ID int(11) NOT NULL,
  PRIMARY KEY (NEWS_ID,EXT_ROLE_ID),
  CONSTRAINT FK_SBI_EXT_ROLES_EXT_ROLE_ID FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT FK_SBI_NEWS_ID FOREIGN KEY (NEWS_ID) REFERENCES SBI_NEWS (ID) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB;



-- 11.02.2019. Predrag Josipovic
-- Tags Functonality
CREATE TABLE SBI_TAG (
	TAG_ID               INTEGER NOT NULL,
	NAME                 VARCHAR(30) NOT NULL,
	USER_IN              VARCHAR(100) NOT NULL,
	USER_UP              VARCHAR(100),
	USER_DE              VARCHAR(100),
	TIME_IN              TIMESTAMP NOT NULL,
	TIME_UP              TIMESTAMP NULL DEFAULT NULL,
	TIME_DE              TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN       VARCHAR(10),
	SBI_VERSION_UP       VARCHAR(10),
	SBI_VERSION_DE       VARCHAR(10),
	META_VERSION         VARCHAR(100),
	ORGANIZATION         VARCHAR(20),
	PRIMARY KEY (TAG_ID),
	CONSTRAINT XAK1SBI_TAG UNIQUE (NAME, ORGANIZATION)
) ENGINE=InnoDB;


CREATE TABLE SBI_DATA_SET_TAG (
	DS_ID                INTEGER NOT NULL,
	VERSION_NUM	     INTEGER NOT NULL,
	ORGANIZATION         VARCHAR(20),
	TAG_ID               INTEGER NOT NULL,
	PRIMARY KEY (DS_ID, VERSION_NUM, ORGANIZATION, TAG_ID),
	FOREIGN KEY (TAG_ID) REFERENCES SBI_TAG (TAG_ID) ON UPDATE NO ACTION ON DELETE RESTRICT,
	FOREIGN KEY (DS_ID, VERSION_NUM, ORGANIZATION) REFERENCES SBI_DATA_SET (DS_ID, VERSION_NUM, ORGANIZATION)
	ON UPDATE NO ACTION ON DELETE RESTRICT
) ENGINE=InnoDB;
-- Tags Functonality END


--25/03/2019 Andrijana Predojevic
ALTER TABLE SBI_CROSS_NAVIGATION ADD CONSTRAINT XAK1SBI_CROSS_NAVIGATION UNIQUE (NAME, ORGANIZATION);

-- 08/07/2019 Marco Libanori
ALTER TABLE SBI_USER ADD COLUMN FAILED_LOGIN_ATTEMPTS INT DEFAULT 0 NOT NULL AFTER DT_LAST_ACCESS;

-- 17/07/2019 Marco Libanori
ALTER TABLE SBI_PARUSE ADD  MAX_LOV_ID INT DEFAULT NULL ;
ALTER TABLE SBI_PARUSE ADD CONSTRAINT FK_SBI_PARUSE_4 FOREIGN KEY (MAX_LOV_ID) REFERENCES SBI_LOV (LOV_ID);

--27/09/2019 Davide Vernassa
ALTER TABLE SBI_META_MODELS 
	ADD TABLE_PREFIX_LIKE VARCHAR(4000) NULL;
ALTER TABLE SBI_META_MODELS 
	ADD TABLE_PREFIX_NOT_LIKE VARCHAR(4000) NULL;

-- 12/10/2019 Alberto Nale
ALTER TABLE SBI_USER ADD DEFAULT_ROLE_ID INTEGER DEFAULT NULL;
-- Create foreign key between SBI_USER and SBI_EXT_ROLES
ALTER TABLE SBI_USER ADD CONSTRAINT FOREIGN KEY FK_SBI_USER_1 (DEFAULT_ROLE_ID) REFERENCES SBI_EXT_ROLES(EXT_ROLE_ID);

--29/11/2019 Andrijana Predojevic
DELETE FROM sbi_role_type_user_func WHERE user_funct_id IN (SELECT user_funct_id FROM sbi_user_func WHERE name IN ('ProfileAttributeManagement','ProfileManagement')) AND role_type_id = (SELECT value_id FROM sbi_domains WHERE DOMAIN_CD='ROLE_TYPE' AND value_cd='DEV_ROLE')

-- 21/10/2019 Alberto Nale
ALTER TABLE SBI_CROSS_NAVIGATION ADD FROM_DOC_ID INTEGER DEFAULT NULL;
-- Create foreign key between SBI_CROSS_NAVIGATION and SBI_OBJECTS
ALTER TABLE SBI_CROSS_NAVIGATION ADD CONSTRAINT FOREIGN KEY FK_SBI_CROSS_NAVIGATION_1 (FROM_DOC_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID);

ALTER TABLE SBI_CROSS_NAVIGATION ADD TO_DOC_ID INTEGER DEFAULT NULL;
-- Create foreign key between SBI_CROSS_NAVIGATION and SBI_OBJECTS
ALTER TABLE SBI_CROSS_NAVIGATION ADD CONSTRAINT FOREIGN KEY FK_SBI_CROSS_NAVIGATION_2 (TO_DOC_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID);

--02/12/2019 Davide Vernassa
ALTER TABLE SBI_CROSS_NAVIGATION ADD COLUMN POPUP_OPTIONS VARCHAR(4000) NULL DEFAULT NULL AFTER BREADCRUMB;

-- 14/02/2020 Alberto Nale
ALTER TABLE SBI_MENU ADD ICON VARCHAR(1000) NULL;
ALTER TABLE SBI_MENU ADD CUST_ICON VARCHAR(4000) NULL;

--08/06/2020 Andrijana Predojevic
ALTER TABLE SBI_OBJ_PARUSE ADD CONSTRAINT XAK1SBI_OBJ_PARUSE UNIQUE (OBJ_PAR_ID,USE_ID,OBJ_PAR_FATHER_ID,FILTER_OPERATION);

--09/06/2020 Andrijana Predojevic
ALTER TABLE SBI_METAMODEL_PARUSE ADD CONSTRAINT XAK1SBI_METAMODEL_PARUSE UNIQUE (METAMODEL_PAR_ID,USE_ID,METAMODEL_PAR_FATHER_ID,FILTER_OPERATION);

ALTER TABLE SBI_OBJECTS ADD CONSTRAINT XAK2SBI_OBJECTS UNIQUE (NAME, ORGANIZATION);
ALTER TABLE SBI_LOV ADD CONSTRAINT XAK2SBI_LOV UNIQUE (NAME, ORGANIZATION);
ALTER TABLE SBI_PARAMETERS ADD CONSTRAINT XAK2SBI_PARAMETERS UNIQUE (NAME, ORGANIZATION);

--15/06/2020 Andrijana Predojevic
ALTER TABLE SBI_META_MODELS ADD COLUMN SMART_VIEW BOOLEAN DEFAULT TRUE;

-- 2020-01-12 Matteo Massarotto
ALTER TABLE SBI_DOSSIER_ACTIVITY ADD DOC longblob NULL; 
ALTER TABLE SBI_DOSSIER_ACTIVITY ADD CONFIG varchar(4000) NULL;


-- 22/12/2020 Marco Balestri
-- CATALOG FUNCTION TABLES UPDATE

-- START

-- CLEAN old tables
DELETE FROM SBI_CATALOG_FUNCTION;
DELETE FROM SBI_FUNCTION_INPUT_VARIABLE;

-- DROP old tables
DROP TABLE IF EXISTS SBI_FUNCTION_OUTPUT, SBI_FUNCTION_INPUT_DATASET, SBI_FUNCTION_INPUT_FILE;

-- ------------------------- TABLE sbi_catalog_function -------------------------
ALTER TABLE SBI_CATALOG_FUNCTION
ADD (BENCHMARKS text(4000), FAMILY text(30), ONLINE_SCRIPT text(4000), OFFLINE_SCRIPT_TRAIN text(4000), OFFLINE_SCRIPT_USE text(4000)),
DROP SCRIPT, DROP URL, DROP REMOTE;

-- ----------------------- TABLE sbi_function_input_column -----------------------
CREATE TABLE IF NOT EXISTS SBI_FUNCTION_INPUT_COLUMN LIKE SBI_FUNCTION_INPUT_VARIABLE;
  
ALTER TABLE SBI_FUNCTION_INPUT_COLUMN
CHANGE VAR_NAME COL_NAME varchar(100),
CHANGE VAR_VALUE COL_TYPE varchar(100);

-- ---------------------- TABLE sbi_function_input_variable ---------------------
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE
ADD (VAR_TYPE varchar(100));

-- ---------------------- TABLE sbi_function_output_column -----------------------
CREATE TABLE IF NOT EXISTS SBI_FUNCTION_OUTPUT_COLUMN LIKE SBI_FUNCTION_INPUT_COLUMN;

ALTER TABLE SBI_FUNCTION_OUTPUT_COLUMN
ADD (COL_FIELD_TYPE varchar(100));

-- --------------------------- TABLE sbi_obj_function ---------------------------
CREATE TABLE IF NOT EXISTS SBI_OBJ_FUNCTION LIKE SBI_OBJ_DATA_SET;

ALTER TABLE SBI_OBJ_FUNCTION
DROP IS_DETAIL,
CHANGE BIOBJ_DS_ID BIOBJ_FUNCTION_ID int,
CHANGE DS_ID FUNCTION_ID int,
ADD FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS(BIOBJ_ID),
ADD FOREIGN KEY (FUNCTION_ID) REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_ID);

-- END

-- 15/02/2021 - Cockpit complexity initializer
CREATE TABLE SBI_COCKPIT_ASSOCIATION (
	SBI_COCKPIT_ASSOCIATION_ID INTEGER NOT NULL ,
	BIOBJ_ID INTEGER NOT NULL,
	DS_ID_FROM INTEGER NOT NULL,
	COLUMN_NAME_FROM VARCHAR(50) NULL,
	DS_ID_TO INTEGER NOT NULL,
	COLUMN_NAME_TO VARCHAR(50) NULL,
	USER_IN VARCHAR(100) NOT NULL,
	USER_UP VARCHAR(100),
	USER_DE VARCHAR(100),
	TIME_IN TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	TIME_UP TIMESTAMP NULL DEFAULT NULL,
	TIME_DE TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN VARCHAR(10),
	SBI_VERSION_UP VARCHAR(10),
	SBI_VERSION_DE VARCHAR(10),
	META_VERSION VARCHAR(100),
	ORGANIZATION VARCHAR(20) NOT NULL,
	PRIMARY KEY (SBI_COCKPIT_ASSOCIATION_ID)
) ENGINE=InnoDB;
ALTER TABLE SBI_COCKPIT_ASSOCIATION ADD CONSTRAINT FK_SBI_COCKPIT_ASSOCIATION_1 FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID);

CREATE TABLE SBI_COCKPIT_WIDGET (
	SBI_COCKPIT_WIDGET_ID INTEGER NOT NULL,
	BIOBJ_ID INTEGER NOT NULL,
	TAB VARCHAR(50) NULL,
	WIDGET_TYPE VARCHAR(50) NULL,
	DS_ID INTEGER NULL,
	ASSOCIATIVE BOOLEAN DEFAULT NULL,
	CACHE BOOLEAN DEFAULT NULL,
	FILTERS BOOLEAN DEFAULT NULL,
	USER_IN VARCHAR(100) NOT NULL,
	USER_UP VARCHAR(100),
	USER_DE VARCHAR(100),
	TIME_IN TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	TIME_UP TIMESTAMP NULL DEFAULT NULL,
	TIME_DE TIMESTAMP NULL DEFAULT NULL,
	SBI_VERSION_IN VARCHAR(10),
	SBI_VERSION_UP VARCHAR(10),
	SBI_VERSION_DE VARCHAR(10),
	META_VERSION VARCHAR(100),
	ORGANIZATION VARCHAR(20) NOT NULL,
	PRIMARY KEY (SBI_COCKPIT_WIDGET_ID)
) ENGINE=InnoDB;
ALTER TABLE SBI_COCKPIT_WIDGET ADD CONSTRAINT FK_SBI_COCKPIT_WIDGET_1 FOREIGN KEY (BIOBJ_ID) REFERENCES SBI_OBJECTS (BIOBJ_ID);

-- 06/04/2021
UPDATE SBI_CONFIG SC SET VALUE_CHECK = 'it-IT,en-US,fr-FR,es-ES,pt-BR,en-GB,zh-Hans-CN,de-DE' WHERE LABEL = 'SPAGOBI.LANGUAGE_SUPPORTED.LANGUAGES';
UPDATE SBI_CONFIG SC SET VALUE_CHECK = 'en-US' WHERE LABEL = 'SPAGOBI.LANGUAGE_SUPPORTED.LANGUAGE.default';
UPDATE SBI_DOMAINS SET VALUE_CD = 'it-IT' WHERE DOMAIN_CD = 'LANG' AND VALUE_NM = 'Italian' AND DOMAIN_NM = 'Language ISO code';
UPDATE SBI_DOMAINS SET VALUE_CD = 'en-US' WHERE DOMAIN_CD = 'LANG' AND VALUE_NM = 'English' AND DOMAIN_NM = 'Language ISO code';
UPDATE SBI_DOMAINS SET VALUE_CD = 'es-ES' WHERE DOMAIN_CD = 'LANG' AND VALUE_NM = 'Spanish' AND DOMAIN_NM = 'Language ISO code';
UPDATE SBI_DOMAINS SET VALUE_CD = 'fr-FR' WHERE DOMAIN_CD = 'LANG' AND VALUE_NM = 'French' AND DOMAIN_NM = 'Language ISO code';
UPDATE SBI_DOMAINS SET VALUE_CD = 'pt-BR' WHERE DOMAIN_CD = 'LANG' AND VALUE_NM = 'Portoguese' AND DOMAIN_NM = 'Language ISO code';

CREATE TABLE SBI_WIDGET_GALLERY (
  UUID CHAR(36) NOT NULL, -- primary key
  NAME VARCHAR(200) NOT NULL,
  DESCRIPTION VARCHAR(500) NULL,
  TYPE VARCHAR(45) NULL, -- HTML/CUSTOM CHART/PYTHON/R
  PREVIEW_IMAGE BLOB NULL, -- binary of preview file
  TEMPLATE TEXT NULL, -- text with template as a JSON
  AUTHOR VARCHAR(100) NULL,
  USAGE_COUNTER INT NULL, -- counter to see how many times the widgets was used
  USER_IN    VARCHAR(100) NOT NULL,
  USER_UP    VARCHAR(100),
  USER_DE    VARCHAR(100),
  TIME_IN    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  TIME_UP    TIMESTAMP NULL DEFAULT NULL,    
  TIME_DE    TIMESTAMP NULL DEFAULT NULL,
  SBI_VERSION_IN  VARCHAR(10),
  SBI_VERSION_UP  VARCHAR(10),
  SBI_VERSION_DE  VARCHAR(10),
  ORGANIZATION    VARCHAR(20),
  OUTPUT_TYPE    VARCHAR(100),
  UNIQUE XAK1SBI_WIDGET_GALLERY (NAME, ORGANIZATION),
  PRIMARY KEY (UUID, ORGANIZATION)
);

CREATE TABLE SBI_WIDGET_GALLERY_TAGS (
  WIDGET_ID CHAR(36) NOT NULL, -- widget id reference
  TAG VARCHAR(50) NOT NULL, -- tag name
  USER_IN    VARCHAR(100) NOT NULL,
  USER_UP    VARCHAR(100),
  USER_DE    VARCHAR(100),
  TIME_IN    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  TIME_UP    TIMESTAMP NULL DEFAULT NULL,    
  TIME_DE    TIMESTAMP NULL DEFAULT NULL,
  SBI_VERSION_IN  VARCHAR(10),
  SBI_VERSION_UP  VARCHAR(10),
  SBI_VERSION_DE  VARCHAR(10),
  ORGANIZATION    VARCHAR(20),
  KEY FK_SBI_WIDGET_GALLERY_TAGS_1_IDX (WIDGET_ID,TAG, ORGANIZATION),
  CONSTRAINT FK_SBI_WIDGET_GALLERY_TAGS_1 FOREIGN KEY (WIDGET_ID, ORGANIZATION) REFERENCES SBI_WIDGET_GALLERY (UUID, ORGANIZATION) ON DELETE CASCADE
) ENGINE=INNODB;

-- 21/06/2021
-- CATALOG FUNCTION REFACTORING - SUPPORT FOR UUIDS

-- DROP OLD FOREIGN KEYS
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE DROP FOREIGN KEY FK_FUNCTION_INPUT_VARIABLES_1;
ALTER TABLE SBI_FUNCTION_INPUT_COLUMN DROP FOREIGN KEY FK_FUNCTION_INPUT_COLUMNS_1;
ALTER TABLE SBI_FUNCTION_OUTPUT_COLUMN DROP FOREIGN KEY FK_FUNCTION_OUTPUT_COLUMNS_1;
ALTER TABLE SBI_OBJ_FUNCTION DROP FOREIGN KEY FK_SBI_OBJ_FUNCTION_1;

-- DROP OLD PRIMARY KEYS
ALTER TABLE SBI_CATALOG_FUNCTION DROP PRIMARY KEY;
ALTER TABLE SBI_FUNCTION_INPUT_COLUMN DROP PRIMARY KEY;
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE DROP PRIMARY KEY;
ALTER TABLE SBI_FUNCTION_OUTPUT_COLUMN DROP PRIMARY KEY;
ALTER TABLE SBI_OBJ_FUNCTION DROP KEY XAK1SBI_OBJ_FUNCTION;

-- ADD NEW UUID COLUMN
ALTER TABLE SBI_CATALOG_FUNCTION ADD COLUMN FUNCTION_UUID VARCHAR(36) FIRST;
ALTER TABLE SBI_FUNCTION_INPUT_COLUMN ADD COLUMN FUNCTION_UUID VARCHAR(36) FIRST;
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE ADD COLUMN FUNCTION_UUID VARCHAR(36) FIRST;
ALTER TABLE SBI_FUNCTION_OUTPUT_COLUMN ADD COLUMN FUNCTION_UUID VARCHAR(36) FIRST;
ALTER TABLE SBI_OBJ_FUNCTION ADD COLUMN FUNCTION_UUID VARCHAR(36) FIRST;

-- CONVERT ID TO UUID
DROP PROCEDURE IF EXISTS GENERATE_KNOWAGE_FUNCTIONS_CATALOG_UUIDS;
SET SQL_SAFE_UPDATES = 0;
DELIMITER //
CREATE PROCEDURE GENERATE_KNOWAGE_FUNCTIONS_CATALOG_UUIDS()
BEGIN
	DECLARE done BOOLEAN DEFAULT FALSE;
	DECLARE _function_id INTEGER;
	DECLARE cur CURSOR FOR SELECT FUNCTION_ID FROM SBI_CATALOG_FUNCTION;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done := TRUE;

	OPEN cur;

	functionLoop: LOOP
		FETCH cur INTO _function_id;
		IF done THEN
			LEAVE functionLoop;
		END IF;
        SELECT UUID() INTO @uuid;
        UPDATE SBI_CATALOG_FUNCTION SET FUNCTION_UUID=@uuid WHERE FUNCTION_ID=_function_id;
        UPDATE SBI_FUNCTION_INPUT_VARIABLE SET FUNCTION_UUID=@uuid WHERE FUNCTION_ID=_function_id;
        UPDATE SBI_FUNCTION_INPUT_COLUMN SET FUNCTION_UUID=@uuid WHERE FUNCTION_ID=_function_id;
        UPDATE SBI_FUNCTION_OUTPUT_COLUMN SET FUNCTION_UUID=@uuid WHERE FUNCTION_ID=_function_id;
        UPDATE SBI_OBJ_FUNCTION SET FUNCTION_UUID=@uuid WHERE FUNCTION_ID=_function_id;
	END LOOP functionLoop;
    
	CLOSE cur;
END //
DELIMITER ;
CALL GENERATE_KNOWAGE_FUNCTIONS_CATALOG_UUIDS();
SET SQL_SAFE_UPDATES = 1;
DROP PROCEDURE GENERATE_KNOWAGE_FUNCTIONS_CATALOG_UUIDS;

-- CREATE NEW PRIMARY KEYS
ALTER TABLE SBI_CATALOG_FUNCTION ADD CONSTRAINT PK_SBI_CATALOG_FUNCTION PRIMARY KEY(FUNCTION_UUID, ORGANIZATION);
ALTER TABLE SBI_FUNCTION_INPUT_COLUMN ADD CONSTRAINT PK_SBI_FUNCTION_INPUT_COLUMN PRIMARY KEY(FUNCTION_UUID, COL_NAME, ORGANIZATION);
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE ADD CONSTRAINT PK_SBI_FUNCTION_INPUT_VARIABLE PRIMARY KEY(FUNCTION_UUID, VAR_NAME, ORGANIZATION);
ALTER TABLE SBI_FUNCTION_OUTPUT_COLUMN ADD CONSTRAINT PK_SBI_FUNCTION_OUTPUT_COLUMN PRIMARY KEY(FUNCTION_UUID, COL_NAME, ORGANIZATION);
ALTER TABLE SBI_OBJ_FUNCTION ADD CONSTRAINT XAK1SBI_OBJ_FUNCTION UNIQUE(BIOBJ_ID, FUNCTION_UUID, ORGANIZATION);

-- CREATE NEW FOREIGN KEYS
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE 	ADD CONSTRAINT FK_FUNCTION_INPUT_VARIABLES_1  		FOREIGN KEY (FUNCTION_UUID) 			REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_UUID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_FUNCTION_INPUT_COLUMN	 	ADD CONSTRAINT FK_FUNCTION_INPUT_COLUMNS_1  		FOREIGN KEY (FUNCTION_UUID) 			REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_UUID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_FUNCTION_OUTPUT_COLUMN	 	ADD CONSTRAINT FK_FUNCTION_OUTPUT_COLUMNS_1  		FOREIGN KEY (FUNCTION_UUID) 			REFERENCES SBI_CATALOG_FUNCTION(FUNCTION_UUID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;

-- DROP OLD ID COLUMNS
ALTER TABLE SBI_CATALOG_FUNCTION DROP COLUMN FUNCTION_ID;
ALTER TABLE SBI_FUNCTION_INPUT_COLUMN DROP COLUMN FUNCTION_ID;
ALTER TABLE SBI_FUNCTION_INPUT_VARIABLE DROP COLUMN FUNCTION_ID;
ALTER TABLE SBI_FUNCTION_OUTPUT_COLUMN DROP COLUMN FUNCTION_ID;
ALTER TABLE SBI_OBJ_FUNCTION DROP COLUMN FUNCTION_ID;

-- 2021/07/26
ALTER TABLE SBI_ALERT_ACTION DROP COLUMN TEMPLATE CASCADE;
ALTER TABLE SBI_ALERT_LISTENER DROP COLUMN TEMPLATE CASCADE;

-- 2021/08/27
-- UPDATED SBI_EXT_USER_ROLES ORGANIZATION FIELD WHERE NULL
UPDATE SBI_EXT_USER_ROLES SET ORGANIZATION = (SELECT ORGANIZATION FROM SBI_USER WHERE ID = SBI_EXT_USER_ROLES.ID), TIME_UP = CURRENT_TIMESTAMP 
WHERE SBI_EXT_USER_ROLES.ORGANIZATION IS NULL;

--2021/10/14
ALTER TABLE SBI_DATA_SET ADD column DS_DERIVED_ID INTEGER;

-- 2022/02/08
CREATE TABLE SBI_ORGANIZATION_THEME (
	UUID VARCHAR(36) NOT NULL,
    ORGANIZATION_ID INTEGER NOT NULL,
    THEME_NAME VARCHAR(255) NOT NULL,
    CONFIG TEXT NULL,
    ACTIVE SMALLINT DEFAULT '1',
    USER_IN VARCHAR(100) NOT NULL,
    USER_UP VARCHAR(100),
    USER_DE VARCHAR(100),
    TIME_IN TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    TIME_UP TIMESTAMP NULL DEFAULT NULL,
    TIME_DE TIMESTAMP NULL DEFAULT NULL,
    SBI_VERSION_IN VARCHAR(10),
    SBI_VERSION_UP VARCHAR(10),
    SBI_VERSION_DE VARCHAR(10),
    META_VERSION VARCHAR(100),
    ORGANIZATION VARCHAR(20),
	PRIMARY KEY (UUID, ORGANIZATION),
    CONSTRAINT FK_ORGANIZATION_1 FOREIGN KEY (ORGANIZATION_ID) REFERENCES SBI_ORGANIZATIONS(ID)
);
