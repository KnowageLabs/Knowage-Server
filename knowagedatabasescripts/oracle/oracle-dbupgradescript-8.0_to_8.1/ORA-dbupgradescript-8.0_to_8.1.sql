-- 2021/07/26
ALTER TABLE SBI_ALERT_ACTION DROP COLUMN TEMPLATE;
ALTER TABLE SBI_ALERT_LISTENER DROP COLUMN TEMPLATE;

-- 2022/02/08
CREATE TABLE SBI_ORGANIZATION_THEME (
	UUID 				 VARCHAR(36) NOT NULL,
	ORGANIZATION_ID 	 INTEGER NOT NULL,
	THEME_NAME 			 VARCHAR(255) NOT NULL,
	CONFIG 				 CLOB NULL,
	ACTIVE 				 SMALLINT DEFAULT 0,
	USER_IN              VARCHAR2(100) NOT NULL,
	USER_UP              VARCHAR2(100),
	USER_DE              VARCHAR2(100),
	TIME_IN              TIMESTAMP NOT NULL,
	TIME_UP              TIMESTAMP DEFAULT NULL,
	TIME_DE              TIMESTAMP DEFAULT NULL,
	SBI_VERSION_IN       VARCHAR2(10),
	SBI_VERSION_UP       VARCHAR2(10),
	SBI_VERSION_DE       VARCHAR2(10),
	ORGANIZATION         VARCHAR2(20),
	PRIMARY KEY (UUID, ORGANIZATION),
	CONSTRAINT FK_ORGANIZATION_1 FOREIGN KEY (ORGANIZATION_ID) REFERENCES SBI_ORGANIZATIONS(ID)
);

ALTER TABLE SBI_WIDGET_GALLERY ADD LABEL VARCHAR2(200);
UPDATE SBI_WIDGET_GALLERY SET LABEL = NAME;
ALTER TABLE SBI_WIDGET_GALLERY MODIFY LABEL NOT NULL;

-- 2022/03/10 : Data preparation
ALTER TABLE SBI_DATA_SOURCE ADD USE_FOR_DATAPREP SMALLINT DEFAULT 0;

-- 2022/03/10 : Update to Quartz 2.3
CREATE OR REPLACE PROCEDURE CLEAR_INDEXES(MY_TABLE_NAME VARCHAR) IS
BEGIN
	FOR IND IN 
	(
		SELECT *
		FROM ALL_INDEXES
		WHERE
			OWNER = sys_context( 'userenv', 'current_schema' )
			AND TABLE_NAME = MY_TABLE_NAME
			AND UNIQUENESS = 'NONUNIQUE'
	)
	LOOP
		EXECUTE IMMEDIATE 'DROP INDEX ' || IND.INDEX_NAME;
	   
	END LOOP;
END;


CALL CLEAR_INDEXES('QRTZ_BLOB_TRIGGERS');
CALL CLEAR_INDEXES('QRTZ_CALENDARS');
CALL CLEAR_INDEXES('QRTZ_CRON_TRIGGERS');
CALL CLEAR_INDEXES('QRTZ_FIRED_TRIGGERS');
CALL CLEAR_INDEXES('QRTZ_JOB_DETAILS');
CALL CLEAR_INDEXES('QRTZ_LOCKS');
CALL CLEAR_INDEXES('QRTZ_PAUSED_TRIGGER_GRPS');
CALL CLEAR_INDEXES('QRTZ_SCHEDULER_STATE');
CALL CLEAR_INDEXES('QRTZ_SIMPLE_TRIGGERS');
CALL CLEAR_INDEXES('QRTZ_SIMPROP_TRIGGERS');
CALL CLEAR_INDEXES('QRTZ_TRIGGERS');

DROP PROCEDURE CLEAR_INDEXES;

CREATE OR REPLACE PROCEDURE DROP_FK_WITH_UNKNOW_NAME(MY_TABLE_NAME VARCHAR ) IS

	CURSOR CUR IS SELECT CONSTRAINT_NAME FROM ALL_CONSTRAINTS WHERE OWNER = sys_context( 'userenv', 'current_schema' ) AND TABLE_NAME = MY_TABLE_NAME AND CONSTRAINT_TYPE IN ('R') ;

	BEGIN

		FOR cur_row IN CUR
		LOOP
			
			EXECUTE IMMEDIATE 'ALTER TABLE ' || MY_TABLE_NAME || ' DROP CONSTRAINT ' || cur_row.CONSTRAINT_NAME ;
		
		END LOOP;
		
	END
;

DROP TABLE QRTZ_JOB_LISTENERS;
DROP TABLE QRTZ_TRIGGER_LISTENERS;

ALTER TABLE QRTZ_JOB_DETAILS    DROP COLUMN IS_VOLATILE;
ALTER TABLE QRTZ_TRIGGERS       DROP COLUMN IS_VOLATILE;
ALTER TABLE QRTZ_FIRED_TRIGGERS DROP COLUMN IS_VOLATILE;

ALTER TABLE QRTZ_JOB_DETAILS ADD IS_NONCONCURRENT VARCHAR2(1) ;
ALTER TABLE QRTZ_JOB_DETAILS ADD IS_UPDATE_DATA VARCHAR2(1) ;
UPDATE QRTZ_JOB_DETAILS SET IS_NONCONCURRENT = IS_STATEFUL;
UPDATE QRTZ_JOB_DETAILS SET IS_UPDATE_DATA = IS_STATEFUL;
ALTER TABLE QRTZ_JOB_DETAILS DROP COLUMN IS_STATEFUL;
ALTER TABLE QRTZ_FIRED_TRIGGERS ADD IS_NONCONCURRENT VARCHAR2(1) ;
UPDATE QRTZ_FIRED_TRIGGERS SET IS_NONCONCURRENT = IS_STATEFUL;
ALTER TABLE QRTZ_FIRED_TRIGGERS DROP COLUMN IS_STATEFUL;

ALTER TABLE QRTZ_BLOB_TRIGGERS       ADD SCHED_NAME VARCHAR(120) DEFAULT 'DefaultQuartzScheduler' NOT NULL;
ALTER TABLE QRTZ_CALENDARS           ADD SCHED_NAME VARCHAR(120) DEFAULT 'DefaultQuartzScheduler' NOT NULL;
ALTER TABLE QRTZ_CRON_TRIGGERS       ADD SCHED_NAME VARCHAR(120) DEFAULT 'DefaultQuartzScheduler' NOT NULL;
ALTER TABLE QRTZ_FIRED_TRIGGERS      ADD SCHED_NAME VARCHAR(120) DEFAULT 'DefaultQuartzScheduler' NOT NULL;
ALTER TABLE QRTZ_JOB_DETAILS         ADD SCHED_NAME VARCHAR(120) DEFAULT 'DefaultQuartzScheduler' NOT NULL;
ALTER TABLE QRTZ_LOCKS               ADD SCHED_NAME VARCHAR(120) DEFAULT 'DefaultQuartzScheduler' NOT NULL;
ALTER TABLE QRTZ_PAUSED_TRIGGER_GRPS ADD SCHED_NAME VARCHAR(120) DEFAULT 'DefaultQuartzScheduler' NOT NULL;
ALTER TABLE QRTZ_SCHEDULER_STATE     ADD SCHED_NAME VARCHAR(120) DEFAULT 'DefaultQuartzScheduler' NOT NULL;
ALTER TABLE QRTZ_SIMPLE_TRIGGERS     ADD SCHED_NAME VARCHAR(120) DEFAULT 'DefaultQuartzScheduler' NOT NULL;
ALTER TABLE QRTZ_TRIGGERS            ADD SCHED_NAME VARCHAR(120) DEFAULT 'DefaultQuartzScheduler' NOT NULL;

ALTER TABLE QRTZ_FIRED_TRIGGERS ADD SCHED_TIME NUMBER(13) NOT NULL;

CALL DROP_FK_WITH_UNKNOW_NAME('QRTZ_TRIGGERS') ;

ALTER TABLE QRTZ_BLOB_TRIGGERS DROP PRIMARY KEY;

CALL DROP_FK_WITH_UNKNOW_NAME('QRTZ_BLOB_TRIGGERS');

ALTER TABLE QRTZ_SIMPLE_TRIGGERS DROP PRIMARY KEY;
CALL DROP_FK_WITH_UNKNOW_NAME('QRTZ_SIMPLE_TRIGGERS');

ALTER TABLE QRTZ_CRON_TRIGGERS DROP PRIMARY KEY;
CALL DROP_FK_WITH_UNKNOW_NAME('QRTZ_CRON_TRIGGERS');

ALTER TABLE QRTZ_JOB_DETAILS DROP PRIMARY KEY;

ALTER TABLE QRTZ_JOB_DETAILS ADD PRIMARY KEY (SCHED_NAME, JOB_NAME, JOB_GROUP);

ALTER TABLE QRTZ_TRIGGERS DROP PRIMARY KEY;

-- Fix length of TRIGGER_GROUP, TRIGGER_NAME, JOB_GROUP and JOB_NAME: we saw a lot of different sizes 
ALTER TABLE QRTZ_BLOB_TRIGGERS       MODIFY TRIGGER_GROUP VARCHAR(120);
ALTER TABLE QRTZ_BLOB_TRIGGERS       MODIFY TRIGGER_NAME VARCHAR(120);
ALTER TABLE QRTZ_CRON_TRIGGERS       MODIFY TRIGGER_GROUP VARCHAR(120);
ALTER TABLE QRTZ_CRON_TRIGGERS       MODIFY TRIGGER_NAME VARCHAR(120);
ALTER TABLE QRTZ_FIRED_TRIGGERS      MODIFY JOB_GROUP VARCHAR(120);
ALTER TABLE QRTZ_FIRED_TRIGGERS      MODIFY JOB_NAME VARCHAR(120);
ALTER TABLE QRTZ_FIRED_TRIGGERS      MODIFY TRIGGER_GROUP VARCHAR(120);
ALTER TABLE QRTZ_FIRED_TRIGGERS      MODIFY TRIGGER_NAME VARCHAR(120);
ALTER TABLE QRTZ_JOB_DETAILS         MODIFY JOB_GROUP VARCHAR(120);
ALTER TABLE QRTZ_JOB_DETAILS         MODIFY JOB_NAME VARCHAR(120);
ALTER TABLE QRTZ_PAUSED_TRIGGER_GRPS MODIFY TRIGGER_GROUP VARCHAR(120);
ALTER TABLE QRTZ_SIMPLE_TRIGGERS     MODIFY TRIGGER_GROUP VARCHAR(120);
ALTER TABLE QRTZ_SIMPLE_TRIGGERS     MODIFY TRIGGER_NAME VARCHAR(120);
ALTER TABLE QRTZ_TRIGGERS            MODIFY JOB_GROUP VARCHAR(120);
ALTER TABLE QRTZ_TRIGGERS            MODIFY JOB_NAME VARCHAR(120);
ALTER TABLE QRTZ_TRIGGERS            MODIFY TRIGGER_GROUP VARCHAR(120);
ALTER TABLE QRTZ_TRIGGERS            MODIFY TRIGGER_NAME VARCHAR(120);
ALTER TABLE SBI_TRIGGER_PAUSED       MODIFY JOB_GROUP VARCHAR(120);
ALTER TABLE SBI_TRIGGER_PAUSED       MODIFY JOB_NAME VARCHAR(120);
ALTER TABLE SBI_TRIGGER_PAUSED       MODIFY TRIGGER_GROUP VARCHAR(120);
ALTER TABLE SBI_TRIGGER_PAUSED       MODIFY TRIGGER_NAME VARCHAR(120);

ALTER TABLE QRTZ_TRIGGERS            ADD PRIMARY KEY                           (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
ALTER TABLE QRTZ_TRIGGERS            ADD FOREIGN KEY                           (SCHED_NAME, JOB_NAME, JOB_GROUP)          REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME, JOB_NAME, JOB_GROUP);
ALTER TABLE QRTZ_BLOB_TRIGGERS       ADD PRIMARY KEY                           (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
ALTER TABLE QRTZ_BLOB_TRIGGERS       ADD FOREIGN KEY                           (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
ALTER TABLE QRTZ_CRON_TRIGGERS       ADD PRIMARY KEY                           (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
ALTER TABLE QRTZ_CRON_TRIGGERS       ADD FOREIGN KEY                           (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
ALTER TABLE QRTZ_SIMPLE_TRIGGERS     ADD PRIMARY KEY                           (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
ALTER TABLE QRTZ_SIMPLE_TRIGGERS     ADD FOREIGN KEY                           (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);

ALTER TABLE QRTZ_FIRED_TRIGGERS      DROP PRIMARY KEY;
ALTER TABLE QRTZ_FIRED_TRIGGERS      ADD PRIMARY KEY   (SCHED_NAME, ENTRY_ID);
ALTER TABLE QRTZ_CALENDARS           DROP PRIMARY KEY;
ALTER TABLE QRTZ_CALENDARS           ADD PRIMARY KEY   (SCHED_NAME, CALENDAR_NAME);
ALTER TABLE QRTZ_LOCKS               DROP PRIMARY KEY;
ALTER TABLE QRTZ_LOCKS               ADD PRIMARY KEY   (SCHED_NAME, LOCK_NAME);
ALTER TABLE QRTZ_PAUSED_TRIGGER_GRPS DROP PRIMARY KEY;
ALTER TABLE QRTZ_PAUSED_TRIGGER_GRPS ADD PRIMARY KEY   (SCHED_NAME, TRIGGER_GROUP);
ALTER TABLE QRTZ_SCHEDULER_STATE     DROP PRIMARY KEY;
ALTER TABLE QRTZ_SCHEDULER_STATE     ADD PRIMARY KEY   (SCHED_NAME, INSTANCE_NAME);

CREATE TABLE QRTZ_SIMPROP_TRIGGERS(          
	SCHED_NAME VARCHAR2(120) NOT NULL,
	TRIGGER_NAME VARCHAR2(120) NOT NULL,
	TRIGGER_GROUP VARCHAR2(120) NOT NULL,
	STR_PROP_1 VARCHAR2(512) NULL,
	STR_PROP_2 VARCHAR2(512) NULL,
	STR_PROP_3 VARCHAR2(512) NULL,
	INT_PROP_1 NUMBER(10) NULL,
	INT_PROP_2 NUMBER(10) NULL,
	LONG_PROP_1 NUMBER(13) NULL,
	LONG_PROP_2 NUMBER(13) NULL,
	DEC_PROP_1 NUMERIC(13,4) NULL,
	DEC_PROP_2 NUMERIC(13,4) NULL,
	BOOL_PROP_1 VARCHAR2(1) NULL,
	BOOL_PROP_2 VARCHAR2(1) NULL,
	CONSTRAINT QRTZ_SIMPROP_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
	CONSTRAINT QRTZ_SIMPROP_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) 
	REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY        ON QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_J_GRP                 ON QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_J                   ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_JG                  ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_C                   ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);
CREATE INDEX IDX_QRTZ_T_G                   ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_T_STATE               ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_STATE             ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_G_STATE           ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME      ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST              ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE         ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE      ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP  ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME     ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);
CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_FT_J_G                ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_JG                 ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_T_G                ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_FT_TG                 ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);

DROP PROCEDURE DROP_FK_WITH_UNKNOW_NAME;

-- 2022/06/17 : Add events table
CREATE TABLE SBI_ES (
	ORGANIZATION VARCHAR2(20),
	"TIMESTAMP"  TIMESTAMP DEFAULT CURRENT_TIMESTAMP ,
	PROG         INTEGER,
	"TYPE"       VARCHAR2(100),
	ID           CHAR(100),
	EVENT_ID     CHAR(36),
	EVENT        CHAR(100) NOT NULL,
	"DATA"       CLOB NOT NULL,
	CONSTRAINT SBI_ES_PK PRIMARY KEY (PROG),
	CONSTRAINT XAK1SBI_ES UNIQUE (EVENT_ID)
);
CREATE INDEX SBI_ES_ORGANIZATION_IDX ON SBI_ES (ORGANIZATION,"TIMESTAMP",ID);


-- 2022/07/07 moving categories from SBI_DOMAINS into SBI_CATEGORY
CREATE TABLE SBI_CATEGORY (
	   ID 					INTEGER NOT NULL,
	   CODE                 VARCHAR(100),
       NAME   				VARCHAR(100),
	   CATEGORY_TYPE		VARCHAR(100),
      USER_IN              VARCHAR2(100) NOT NULL,
        USER_UP              VARCHAR2(100),
        USER_DE              VARCHAR2(100),
        TIME_IN              TIMESTAMP NOT NULL,
        TIME_UP              TIMESTAMP DEFAULT NULL,
        TIME_DE              TIMESTAMP DEFAULT NULL,
        SBI_VERSION_IN       VARCHAR2(10),
        SBI_VERSION_UP       VARCHAR2(10),
        SBI_VERSION_DE       VARCHAR2(10),
        META_VERSION         VARCHAR2(100),
        ORGANIZATION         VARCHAR2(20),
		CONSTRAINT U_SBI_CATEGORY_CODE UNIQUE (CODE, CATEGORY_TYPE, ORGANIZATION),
		CONSTRAINT U_SBI_CATEGORY_NAME UNIQUE (NAME, CATEGORY_TYPE, ORGANIZATION),
       PRIMARY KEY (ID)
);

INSERT INTO SBI_CATEGORY (ID, CODE, NAME, CATEGORY_TYPE, USER_IN, USER_UP, TIME_IN, TIME_UP, SBI_VERSION_IN, SBI_VERSION_UP, ORGANIZATION)
SELECT 
CAST(ROWNUM AS NUMBER(38, 0)) AS ID,
    d.VALUE_CD AS CODE,
    d.VALUE_NM AS NAME,
	d.DOMAIN_CD AS CATEGORY_TYPE,
	d.USER_IN AS USER_IN,
	d.USER_UP AS USER_UP,
	d.TIME_IN AS TIME_IN,
	d.TIME_UP AS TIME_UP,
	d.SBI_VERSION_IN AS SBI_VERSION_IN,
	d.SBI_VERSION_UP AS SBI_VERSION_UP,
    o.NAME AS ORGANIZATION
FROM
    SBI_DOMAINS d 
	cross join SBI_ORGANIZATIONS o
WHERE
    domain_cd IN (
		'CATEGORY_TYPE', 
		'BM_CATEGORY',
        'GEO_CATEGORY',
        'KPI_KPI_CATEGORY',
        'KPI_TARGET_CATEGORY',
        'KPI_MEASURE_CATEGORY');

COMMIT;

ALTER TABLE SBI_DATA_SET DROP CONSTRAINT FK_DATA_SET_CATEGORY;

UPDATE  SBI_DATA_SET
SET  CATEGORY_ID = (SELECT c.ID
FROM SBI_CATEGORY c	,SBI_DOMAINS d
WHERE d.VALUE_ID = SBI_DATA_SET.CATEGORY_ID
and c.CODE = d.VALUE_CD 
and c.ORGANIZATION = SBI_DATA_SET.ORGANIZATION 
AND c.CATEGORY_TYPE = d.DOMAIN_CD);

COMMIT;
ALTER TABLE SBI_DATA_SET ADD CONSTRAINT FK_DATA_SET_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_CATEGORY(ID);

ALTER TABLE SBI_META_MODELS DROP CONSTRAINT FK_META_MODELS_CATEGORY;

UPDATE  SBI_META_MODELS
SET CATEGORY_ID = ( SELECT c.ID
FROM SBI_CATEGORY c,SBI_DOMAINS d
where d.VALUE_ID = SBI_META_MODELS.CATEGORY_ID
and c.CODE = d.VALUE_CD 
and c.ORGANIZATION = SBI_META_MODELS.ORGANIZATION 
AND c.CATEGORY_TYPE = d.DOMAIN_CD);

COMMIT;

ALTER TABLE SBI_META_MODELS ADD CONSTRAINT FK_META_MODELS_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_CATEGORY (ID);

-- FK for GEO layers was missing

UPDATE 	SBI_GEO_LAYERS
SET  GEO_CATEGORY = ( SELECT c.ID
	FROM SBI_CATEGORY c,SBI_DOMAINS d
where  d.VALUE_ID = SBI_GEO_LAYERS.GEO_CATEGORY
and c.CODE = d.VALUE_CD 
and c.ORGANIZATION = SBI_GEO_LAYERS.ORGANIZATION
AND c.CATEGORY_TYPE = d.DOMAIN_CD);

COMMIT;

ALTER TABLE SBI_GEO_LAYERS ADD CONSTRAINT FK_SBI_GEO_LAYERS_CATEGORY FOREIGN KEY (GEO_CATEGORY) REFERENCES SBI_CATEGORY(ID);

ALTER TABLE SBI_KPI_KPI DROP CONSTRAINT FK_01_SBI_KPI_KPI;

UPDATE SBI_KPI_KPI
SET CATEGORY_ID = (select c.ID
FROM SBI_CATEGORY c,SBI_DOMAINS d
where d.VALUE_ID = SBI_KPI_KPI.CATEGORY_ID
and c.CODE = d.VALUE_CD 
and c.ORGANIZATION = SBI_KPI_KPI.ORGANIZATION
AND c.CATEGORY_TYPE = d.DOMAIN_CD);

COMMIT;

ALTER TABLE SBI_KPI_KPI ADD CONSTRAINT FK_01_SBI_KPI_KPI FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_CATEGORY(ID);

ALTER TABLE SBI_KPI_TARGET DROP CONSTRAINT FK_03_SBI_KPI_TARGET;

UPDATE SBI_KPI_TARGET
SET CATEGORY_ID = ( SELECT c.ID
FROM SBI_CATEGORY c,SBI_DOMAINS d
WHERE d.VALUE_ID = SBI_KPI_TARGET.CATEGORY_ID
AND c.CODE = d.VALUE_CD 
and c.ORGANIZATION = SBI_KPI_TARGET.ORGANIZATION
AND c.CATEGORY_TYPE = d.DOMAIN_CD);

COMMIT;

ALTER TABLE SBI_KPI_TARGET ADD CONSTRAINT FK_03_SBI_KPI_TARGET FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_CATEGORY (ID);

ALTER TABLE SBI_KPI_RULE_OUTPUT DROP CONSTRAINT FK_04_SBI_KPI_RULE_OUTPUT;

UPDATE SBI_KPI_RULE_OUTPUT
SET CATEGORY_ID = ( SELECT c.ID
FROM SBI_CATEGORY c,SBI_DOMAINS d
WHERE d.VALUE_ID = SBI_KPI_RULE_OUTPUT.CATEGORY_ID
and c.CODE = d.VALUE_CD 
and c.ORGANIZATION = SBI_KPI_RULE_OUTPUT.ORGANIZATION
AND c.CATEGORY_TYPE = d.DOMAIN_CD);

COMMIT;

ALTER TABLE SBI_KPI_RULE_OUTPUT ADD CONSTRAINT FK_04_SBI_KPI_RULE_OUTPUT FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_CATEGORY (ID);

ALTER TABLE SBI_EXT_ROLES_CATEGORY DROP CONSTRAINT FK_SB_EXT_ROLES_META_MODEL_C_1;

ALTER TABLE SBI_EXT_ROLES_CATEGORY DROP CONSTRAINT FK_SB_EXT_ROLES_META_MODEL_C_2;

ALTER TABLE SBI_EXT_ROLES_CATEGORY DROP PRIMARY KEY;

UPDATE SBI_EXT_ROLES_CATEGORY
SET CATEGORY_ID = ( SELECT c.ID	
FROM SBI_CATEGORY c,SBI_DOMAINS d,SBI_EXT_ROLES er
where d.VALUE_ID = SBI_EXT_ROLES_CATEGORY.CATEGORY_ID
and er.EXT_ROLE_ID = SBI_EXT_ROLES_CATEGORY.EXT_ROLE_ID
and c.CODE = d.VALUE_CD 
and c.CATEGORY_TYPE = d.DOMAIN_CD 
and c.ORGANIZATION = er.ORGANIZATION);

COMMIT;

ALTER TABLE SBI_EXT_ROLES_CATEGORY ADD PRIMARY KEY(EXT_ROLE_ID,CATEGORY_ID);

ALTER TABLE SBI_EXT_ROLES_CATEGORY ADD CONSTRAINT FK_SB_EXT_ROLES_META_MODEL_C_1 FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID);

ALTER TABLE SBI_EXT_ROLES_CATEGORY ADD CONSTRAINT FK_SB_EXT_ROLES_META_MODEL_C_2 FOREIGN KEY (CATEGORY_ID) REFERENCES SBI_CATEGORY(ID);


insert into hibernate_sequences(next_val,sequence_name) values ((select max(ID)+1 from SBI_CATEGORY) ,'SBI_CATEGORY');
COMMIT;

DELETE 
FROM 
	SBI_DOMAINS 
WHERE
    domain_cd IN (
		'CATEGORY_TYPE', 
		'BM_CATEGORY',
        'GEO_CATEGORY',
        'KPI_KPI_CATEGORY',
        'KPI_TARGET_CATEGORY',
        'KPI_MEASURE_CATEGORY');

COMMIT;

UPDATE SBI_CATEGORY SET CATEGORY_TYPE = 'DATASET_CATEGORY' WHERE CATEGORY_TYPE = 'CATEGORY_TYPE';
COMMIT;

-- 17/10/2022 Dossier
ALTER TABLE SBI_DOSSIER_ACTIVITY ADD PPT_V2 BLOB NULL; 